
tcp_client_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dfc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08005eb8  08005eb8  00015eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006144  08006144  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006144  08006144  00016144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800614c  0800614c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b64  2000007c  080061d0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be0  080061d0  00020be0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd3b  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002592  00000000  00000000  0002de22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  000303b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f3  00000000  00000000  00030ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c30b  00000000  00000000  000317d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3a9  00000000  00000000  0004dade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1a2a  00000000  00000000  0005ce87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b5c  00000000  00000000  0010e8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00111410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000007c 	.word	0x2000007c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005ea0 	.word	0x08005ea0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000080 	.word	0x20000080
 8000100:	08005ea0 	.word	0x08005ea0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
{
	esp_app_1_ms_timer();
}

int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	hardware_init();
 8000644:	f000 f952 	bl	80008ec <hardware_init>

	HAL_Delay(1000);
 8000648:	23fa      	movs	r3, #250	; 0xfa
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fa69 	bl	8001b24 <HAL_Delay>

	esp_app_init();
 8000652:	f000 ffd7 	bl	8001604 <esp_app_init>

  while (1)
  {
	  esp_app_polling();
 8000656:	f000 ffed 	bl	8001634 <esp_app_polling>
 800065a:	e7fc      	b.n	8000656 <main+0x16>

0800065c <main_uart_irq>:
  }
}

void main_uart_irq(unsigned char * rx_data, unsigned int rx_data_length)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	write_into_api_rx_queue(rx_data, rx_data_length);
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f001 f82b 	bl	80016c8 <write_into_api_rx_queue>
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x44>)
 8000684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_MspInit+0x44>)
 8000688:	2101      	movs	r1, #1
 800068a:	430a      	orrs	r2, r1
 800068c:	641a      	str	r2, [r3, #64]	; 0x40
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x44>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	2201      	movs	r2, #1
 8000694:	4013      	ands	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_MspInit+0x44>)
 800069c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_MspInit+0x44>)
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	0549      	lsls	r1, r1, #21
 80006a4:	430a      	orrs	r2, r1
 80006a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_MspInit+0x44>)
 80006aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	055b      	lsls	r3, r3, #21
 80006b0:	4013      	ands	r3, r2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b09d      	sub	sp, #116	; 0x74
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	235c      	movs	r3, #92	; 0x5c
 80006ce:	18fb      	adds	r3, r7, r3
 80006d0:	0018      	movs	r0, r3
 80006d2:	2314      	movs	r3, #20
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f004 ff38 	bl	800554c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006dc:	2410      	movs	r4, #16
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	0018      	movs	r0, r3
 80006e2:	234c      	movs	r3, #76	; 0x4c
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f004 ff30 	bl	800554c <memset>
  if(huart->Instance==USART2)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a26      	ldr	r2, [pc, #152]	; (800078c <HAL_UART_MspInit+0xc8>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d146      	bne.n	8000784 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2202      	movs	r2, #2
 80006fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	193b      	adds	r3, r7, r4
 8000704:	0018      	movs	r0, r3
 8000706:	f002 fab7 	bl	8002c78 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800070e:	f000 fa41 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <HAL_UART_MspInit+0xcc>)
 8000714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <HAL_UART_MspInit+0xcc>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	0289      	lsls	r1, r1, #10
 800071c:	430a      	orrs	r2, r1
 800071e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <HAL_UART_MspInit+0xcc>)
 8000722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	029b      	lsls	r3, r3, #10
 8000728:	4013      	ands	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <HAL_UART_MspInit+0xcc>)
 8000730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_UART_MspInit+0xcc>)
 8000734:	2101      	movs	r1, #1
 8000736:	430a      	orrs	r2, r1
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <HAL_UART_MspInit+0xcc>)
 800073c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073e:	2201      	movs	r2, #1
 8000740:	4013      	ands	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = WIFI_BL_UART_TX_Pin|WIFI_BL_UART_RX_Pin;
 8000746:	215c      	movs	r1, #92	; 0x5c
 8000748:	187b      	adds	r3, r7, r1
 800074a:	220c      	movs	r2, #12
 800074c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2202      	movs	r2, #2
 8000752:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2201      	movs	r2, #1
 8000764:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	187a      	adds	r2, r7, r1
 8000768:	23a0      	movs	r3, #160	; 0xa0
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fba2 	bl	8001eb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	201c      	movs	r0, #28
 800077a:	f001 faa3 	bl	8001cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 800077e:	201c      	movs	r0, #28
 8000780:	f001 fab5 	bl	8001cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b01d      	add	sp, #116	; 0x74
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	40004400 	.word	0x40004400
 8000790:	40021000 	.word	0x40021000

08000794 <NMI_Handler>:

extern UART_HandleTypeDef huart2;
extern unsigned char rx_uart;

void NMI_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:
  }
}


void HardFault_Handler(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0

}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <SysTick_Handler>:


void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  HAL_IncTick();
 80007b8:	f001 f998 	bl	8001aec <HAL_IncTick>

}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <USART2_LPUART2_IRQHandler>:


void USART2_LPUART2_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  HAL_UART_IRQHandler(&huart2);
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <USART2_LPUART2_IRQHandler+0x30>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 fdf0 	bl	80033b0 <HAL_UART_IRQHandler>

  HAL_UART_Receive_IT(&huart2, &rx_uart, 1);
 80007d0:	4909      	ldr	r1, [pc, #36]	; (80007f8 <USART2_LPUART2_IRQHandler+0x34>)
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <USART2_LPUART2_IRQHandler+0x30>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 fd84 	bl	80032e4 <HAL_UART_Receive_IT>

  main_uart_irq(&rx_uart, rx_uart);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <USART2_LPUART2_IRQHandler+0x34>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	001a      	movs	r2, r3
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <USART2_LPUART2_IRQHandler+0x34>)
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff ff38 	bl	800065c <main_uart_irq>
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	2000009c 	.word	0x2000009c
 80007f8:	20000130 	.word	0x20000130

080007fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000804:	4a14      	ldr	r2, [pc, #80]	; (8000858 <_sbrk+0x5c>)
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <_sbrk+0x60>)
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <_sbrk+0x64>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <_sbrk+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	18d3      	adds	r3, r2, r3
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	429a      	cmp	r2, r3
 800082a:	d207      	bcs.n	800083c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800082c:	f004 feba 	bl	80055a4 <__errno>
 8000830:	0003      	movs	r3, r0
 8000832:	220c      	movs	r2, #12
 8000834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000836:	2301      	movs	r3, #1
 8000838:	425b      	negs	r3, r3
 800083a:	e009      	b.n	8000850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <_sbrk+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000842:	4b07      	ldr	r3, [pc, #28]	; (8000860 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	18d2      	adds	r2, r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <_sbrk+0x64>)
 800084c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	b006      	add	sp, #24
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20024000 	.word	0x20024000
 800085c:	00000400 	.word	0x00000400
 8000860:	20000098 	.word	0x20000098
 8000864:	20000be0 	.word	0x20000be0

08000868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000876:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000878:	f7ff fff6 	bl	8000868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LoopForever+0xe>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	; (80008c0 <LoopForever+0x16>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008a2:	f004 fe85 	bl	80055b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008a6:	f7ff fecb 	bl	8000640 <main>

080008aa <LoopForever>:

LoopForever:
  b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   r0, =_estack
 80008ac:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80008b8:	08006154 	.word	0x08006154
  ldr r2, =_sbss
 80008bc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80008c0:	20000be0 	.word	0x20000be0

080008c4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_COMP_IRQHandler>
	...

080008c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008cc:	f3bf 8f4f 	dsb	sy
}
 80008d0:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__NVIC_SystemReset+0x1c>)
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <__NVIC_SystemReset+0x20>)
 80008d6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008d8:	f3bf 8f4f 	dsb	sy
}
 80008dc:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	e7fd      	b.n	80008de <__NVIC_SystemReset+0x16>
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	e000ed00 	.word	0xe000ed00
 80008e8:	05fa0004 	.word	0x05fa0004

080008ec <hardware_init>:

/*
 * @Brief: Peripheral initial function
 * */
hardware_return_type_e hardware_init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	46c0      	nop			; (mov r8, r8)
	__disable_irq();

	if(HAL_Init() != HAL_OK)
 80008f4:	f001 f890 	bl	8001a18 <HAL_Init>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <hardware_init+0x14>
	{
		return HARDWARE_INIT_FAIL;
 80008fc:	2302      	movs	r3, #2
 80008fe:	e00d      	b.n	800091c <hardware_init+0x30>
	}

	SystemClock_Config();
 8000900:	f000 f850 	bl	80009a4 <SystemClock_Config>

	MX_GPIO_Init();
 8000904:	f000 f8ac 	bl	8000a60 <MX_GPIO_Init>

	MX_USART2_UART_Init();
 8000908:	f000 f8ee 	bl	8000ae8 <MX_USART2_UART_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 800090c:	b662      	cpsie	i
}
 800090e:	46c0      	nop			; (mov r8, r8)

	__enable_irq();

	HAL_Delay(1000);
 8000910:	23fa      	movs	r3, #250	; 0xfa
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	0018      	movs	r0, r3
 8000916:	f001 f905 	bl	8001b24 <HAL_Delay>

	return HARDWARE_INIT_SUCCESS;
 800091a:	2303      	movs	r3, #3
}
 800091c:	0018      	movs	r0, r3
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <hardware_transmit_w_uart>:
 * @Brief: UART transmit function of the STM32
 * @Param: Data to be transmitted
 * @Param: Data size to be transmitted
 * */
hardware_return_type_e hardware_transmit_w_uart(const uint8_t *tx_data, uint16_t tx_data_length)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	000a      	movs	r2, r1
 800092e:	1cbb      	adds	r3, r7, #2
 8000930:	801a      	strh	r2, [r3, #0]
	if(HAL_UART_Transmit(&huart2, tx_data, tx_data_length, HAL_MAX_DELAY) != HAL_OK)
 8000932:	2301      	movs	r3, #1
 8000934:	425c      	negs	r4, r3
 8000936:	1cbb      	adds	r3, r7, #2
 8000938:	881a      	ldrh	r2, [r3, #0]
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <hardware_transmit_w_uart+0x34>)
 800093e:	0023      	movs	r3, r4
 8000940:	f002 fc2c 	bl	800319c <HAL_UART_Transmit>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <hardware_transmit_w_uart+0x28>
	{
		return HARDWARE_UART_TX_FAIL;
 8000948:	2304      	movs	r3, #4
 800094a:	e000      	b.n	800094e <hardware_transmit_w_uart+0x2a>
	}

	return HARDWARE_UART_TX_SUCCESS;
 800094c:	2305      	movs	r3, #5
}
 800094e:	0018      	movs	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	b003      	add	sp, #12
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	2000009c 	.word	0x2000009c

0800095c <hardware_gpio_enable>:
 * @Brief: IO enable function of the STM32
 * @Param: Port
 * @Param: Pin
 * */
void hardware_gpio_enable(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	000a      	movs	r2, r1
 8000966:	1cbb      	adds	r3, r7, #2
 8000968:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800096a:	1cbb      	adds	r3, r7, #2
 800096c:	8819      	ldrh	r1, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2201      	movs	r2, #1
 8000972:	0018      	movs	r0, r3
 8000974:	f001 fc0c 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}

08000980 <hardware_gpio_disable>:
 * @Brief: IO disable function of the STM32
 * @Param: Port
 * @Param: Pin
 * */
void hardware_gpio_disable(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	000a      	movs	r2, r1
 800098a:	1cbb      	adds	r3, r7, #2
 800098c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800098e:	1cbb      	adds	r3, r7, #2
 8000990:	8819      	ldrh	r1, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	0018      	movs	r0, r3
 8000998:	f001 fbfa 	bl	8002190 <HAL_GPIO_WritePin>
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <SystemClock_Config>:
 *
 *
 */

void SystemClock_Config(void)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b095      	sub	sp, #84	; 0x54
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	2414      	movs	r4, #20
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0018      	movs	r0, r3
 80009b0:	233c      	movs	r3, #60	; 0x3c
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f004 fdc9 	bl	800554c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	0018      	movs	r0, r3
 80009be:	2310      	movs	r3, #16
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f004 fdc2 	bl	800554c <memset>

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fbfd 	bl	80021cc <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2202      	movs	r2, #2
 80009d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	0052      	lsls	r2, r2, #1
 80009de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009e0:	0021      	movs	r1, r4
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2240      	movs	r2, #64	; 0x40
 80009ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2202      	movs	r2, #2
 80009f2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2202      	movs	r2, #2
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2208      	movs	r2, #8
 8000a04:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	0292      	lsls	r2, r2, #10
 8000a0c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	0492      	lsls	r2, r2, #18
 8000a14:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	0592      	lsls	r2, r2, #22
 8000a1c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 fc1f 	bl	8002264 <HAL_RCC_OscConfig>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a2a:	f000 f8b3 	bl	8000b94 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2202      	movs	r2, #2
 8000a38:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2102      	movs	r1, #2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 ff6a 	bl	8002924 <HAL_RCC_ClockConfig>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a54:	f000 f89e 	bl	8000b94 <Error_Handler>
  }
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b015      	add	sp, #84	; 0x54
 8000a5e:	bd90      	pop	{r4, r7, pc}

08000a60 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	240c      	movs	r4, #12
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	2314      	movs	r3, #20
 8000a6e:	001a      	movs	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	f004 fd6b 	bl	800554c <memset>

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_GPIO_Init+0x80>)
 8000a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_GPIO_Init+0x80>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	635a      	str	r2, [r3, #52]	; 0x34
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_GPIO_Init+0x80>)
 8000a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a86:	2201      	movs	r2, #1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_GPIO_Init+0x80>)
 8000a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_GPIO_Init+0x80>)
 8000a94:	2102      	movs	r1, #2
 8000a96:	430a      	orrs	r2, r1
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_GPIO_Init+0x80>)
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(WIFI_MODULE_ENABLE_GPIO_Port, WIFI_MODULE_ENABLE_Pin, GPIO_PIN_RESET);
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_GPIO_Init+0x84>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2104      	movs	r1, #4
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 fb6f 	bl	8002190 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = WIFI_MODULE_ENABLE_Pin;
 8000ab2:	0021      	movs	r1, r4
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2201      	movs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(WIFI_MODULE_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <MX_GPIO_Init+0x84>)
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	f001 f9f0 	bl	8001eb8 <HAL_GPIO_Init>
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b009      	add	sp, #36	; 0x24
 8000ade:	bd90      	pop	{r4, r7, pc}
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	50000400 	.word	0x50000400

08000ae8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000aee:	4a27      	ldr	r2, [pc, #156]	; (8000b8c <MX_USART2_UART_Init+0xa4>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000af4:	22e1      	movs	r2, #225	; 0xe1
 8000af6:	0252      	lsls	r2, r2, #9
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f002 fadc 	bl	80030f0 <HAL_UART_Init>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b3c:	f000 f82a 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b42:	2100      	movs	r1, #0
 8000b44:	0018      	movs	r0, r3
 8000b46:	f004 fbed 	bl	8005324 <HAL_UARTEx_SetTxFifoThreshold>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b4e:	f000 f821 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b54:	2100      	movs	r1, #0
 8000b56:	0018      	movs	r0, r3
 8000b58:	f004 fc24 	bl	80053a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b60:	f000 f818 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b66:	0018      	movs	r0, r3
 8000b68:	f004 fba2 	bl	80052b0 <HAL_UARTEx_DisableFifoMode>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b70:	f000 f810 	bl	8000b94 <Error_Handler>
  }

  HAL_UART_Receive_IT(&huart2, &rx_uart, 1);	// UART rx IRQ function
 8000b74:	4906      	ldr	r1, [pc, #24]	; (8000b90 <MX_USART2_UART_Init+0xa8>)
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <MX_USART2_UART_Init+0xa0>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 fbb2 	bl	80032e4 <HAL_UART_Receive_IT>
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	2000009c 	.word	0x2000009c
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	20000130 	.word	0x20000130

08000b94 <Error_Handler>:


void Error_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	NVIC_SystemReset(); // Software reset!
 8000b98:	f7ff fe96 	bl	80008c8 <__NVIC_SystemReset>

08000b9c <esp_api_create>:
 * @Param: Callbacks
 * */
esp_return_type_e esp_api_create(void 		* called_by_object,
								 esp_api_t 	* self,
								 esp_api_cb * callback)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
	if(!called_by_object || !self || !callback) {return ESP_FAIL;}
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d005      	beq.n	8000bba <esp_api_create+0x1e>
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <esp_api_create+0x1e>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <esp_api_create+0x22>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e022      	b.n	8000c04 <esp_api_create+0x68>

	self->called_by_object 	= called_by_object;
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	601a      	str	r2, [r3, #0]
	self->callback 			= (esp_api_cb *)callback;
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	605a      	str	r2, [r3, #4]
	self->callback->power_enable_cb(self);
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	4798      	blx	r3

	self->state = AT_RESTORE;
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	23c0      	movs	r3, #192	; 0xc0
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	54d1      	strb	r1, [r2, r3]
	self->command.state = COMMAND_TRANSMITTING;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <esp_api_create+0x70>)
 8000be4:	2100      	movs	r1, #0
 8000be6:	5499      	strb	r1, [r3, r2]

	queue_create(&self->rx_queue);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	4694      	mov	ip, r2
 8000bf0:	4463      	add	r3, ip
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fe34 	bl	8001860 <queue_create>

	queue_create(&self->tx_queue);
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	3308      	adds	r3, #8
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 fe2f 	bl	8001860 <queue_create>

	return ESP_SUCCESS;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b004      	add	sp, #16
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	0000060c 	.word	0x0000060c

08000c10 <esp_api_tcp_api_controller>:
/*
 * @Brief: TCP Client connection process controller
 * @Param: ESP API object
 * */
void esp_api_tcp_api_controller(esp_api_t * self)
{
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	b0a1      	sub	sp, #132	; 0x84
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	6078      	str	r0, [r7, #4]
	if(!self) {return;}
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d100      	bne.n	8000c20 <esp_api_tcp_api_controller+0x10>
 8000c1e:	e220      	b.n	8001062 <esp_api_tcp_api_controller+0x452>

	switch(self->state)
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	23c0      	movs	r3, #192	; 0xc0
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	5cd3      	ldrb	r3, [r2, r3]
 8000c28:	2b0a      	cmp	r3, #10
 8000c2a:	d900      	bls.n	8000c2e <esp_api_tcp_api_controller+0x1e>
 8000c2c:	e232      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
 8000c2e:	009a      	lsls	r2, r3, #2
 8000c30:	4bde      	ldr	r3, [pc, #888]	; (8000fac <esp_api_tcp_api_controller+0x39c>)
 8000c32:	18d3      	adds	r3, r2, r3
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	469f      	mov	pc, r3
	{
		case AT_RESTORE:{
			esp_return_type_e f_return = esp_api_command_manager(self,
 8000c38:	2570      	movs	r5, #112	; 0x70
 8000c3a:	197c      	adds	r4, r7, r5
 8000c3c:	4adc      	ldr	r2, [pc, #880]	; (8000fb0 <esp_api_tcp_api_controller+0x3a0>)
 8000c3e:	49dd      	ldr	r1, [pc, #884]	; (8000fb4 <esp_api_tcp_api_controller+0x3a4>)
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	4bdd      	ldr	r3, [pc, #884]	; (8000fb8 <esp_api_tcp_api_controller+0x3a8>)
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2303      	movs	r3, #3
 8000c48:	f000 fa9e 	bl	8001188 <esp_api_command_manager>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	7023      	strb	r3, [r4, #0]
															     (char *)"AT+RESTORE\r\n",
															     (char *)"OK",
															     3, 3000);

			if(f_return == ESP_SUCCESS)
 8000c50:	197b      	adds	r3, r7, r5
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d105      	bne.n	8000c64 <esp_api_tcp_api_controller+0x54>
			{
				esp_state_delay(self, AT_CWMODE);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f000 fc2b 	bl	80014b8 <esp_state_delay>

			else if(f_return == ESP_HARD_FAIL)
			{
				self->state = ESP_HARD_RESET;
			}
		break;}
 8000c62:	e200      	b.n	8001066 <esp_api_tcp_api_controller+0x456>
			else if(f_return == ESP_HARD_FAIL)
 8000c64:	2370      	movs	r3, #112	; 0x70
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d000      	beq.n	8000c70 <esp_api_tcp_api_controller+0x60>
 8000c6e:	e1fa      	b.n	8001066 <esp_api_tcp_api_controller+0x456>
				self->state = ESP_HARD_RESET;
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	23c0      	movs	r3, #192	; 0xc0
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	210a      	movs	r1, #10
 8000c78:	54d1      	strb	r1, [r2, r3]
		break;}
 8000c7a:	e1f4      	b.n	8001066 <esp_api_tcp_api_controller+0x456>

		case AT_CWMODE:{
			esp_return_type_e f_return = esp_api_command_manager(self,
 8000c7c:	2571      	movs	r5, #113	; 0x71
 8000c7e:	197c      	adds	r4, r7, r5
 8000c80:	4acb      	ldr	r2, [pc, #812]	; (8000fb0 <esp_api_tcp_api_controller+0x3a0>)
 8000c82:	49ce      	ldr	r1, [pc, #824]	; (8000fbc <esp_api_tcp_api_controller+0x3ac>)
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	4bcc      	ldr	r3, [pc, #816]	; (8000fb8 <esp_api_tcp_api_controller+0x3a8>)
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	f000 fa7c 	bl	8001188 <esp_api_command_manager>
 8000c90:	0003      	movs	r3, r0
 8000c92:	7023      	strb	r3, [r4, #0]
															     (char *)"AT+CWMODE=3\r\n",
															     (char *)"OK",
															     3, 3000);

			if(f_return == ESP_SUCCESS)
 8000c94:	197b      	adds	r3, r7, r5
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d105      	bne.n	8000ca8 <esp_api_tcp_api_controller+0x98>
			{
				esp_state_delay(self, AT_CIFSR);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2102      	movs	r1, #2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 fc09 	bl	80014b8 <esp_state_delay>

			else if(f_return == ESP_HARD_FAIL)
			{
				self->state = ESP_HARD_RESET;
			}
		break;}
 8000ca6:	e1e0      	b.n	800106a <esp_api_tcp_api_controller+0x45a>
			else if(f_return == ESP_HARD_FAIL)
 8000ca8:	2371      	movs	r3, #113	; 0x71
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d000      	beq.n	8000cb4 <esp_api_tcp_api_controller+0xa4>
 8000cb2:	e1da      	b.n	800106a <esp_api_tcp_api_controller+0x45a>
				self->state = ESP_HARD_RESET;
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	23c0      	movs	r3, #192	; 0xc0
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	210a      	movs	r1, #10
 8000cbc:	54d1      	strb	r1, [r2, r3]
		break;}
 8000cbe:	e1d4      	b.n	800106a <esp_api_tcp_api_controller+0x45a>

		case AT_CIFSR:{
			esp_return_type_e f_return = esp_api_command_manager(self,
 8000cc0:	2572      	movs	r5, #114	; 0x72
 8000cc2:	197c      	adds	r4, r7, r5
 8000cc4:	4aba      	ldr	r2, [pc, #744]	; (8000fb0 <esp_api_tcp_api_controller+0x3a0>)
 8000cc6:	49be      	ldr	r1, [pc, #760]	; (8000fc0 <esp_api_tcp_api_controller+0x3b0>)
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	4bbb      	ldr	r3, [pc, #748]	; (8000fb8 <esp_api_tcp_api_controller+0x3a8>)
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2303      	movs	r3, #3
 8000cd0:	f000 fa5a 	bl	8001188 <esp_api_command_manager>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	7023      	strb	r3, [r4, #0]
															     (char *)"AT+CIFSR\r\n",
															     (char *)"OK",
															     3, 3000);

			if(f_return == ESP_SUCCESS)
 8000cd8:	197b      	adds	r3, r7, r5
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <esp_api_tcp_api_controller+0xdc>
			{
				esp_state_delay(self, AT_CIPSTA);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f000 fbe7 	bl	80014b8 <esp_state_delay>

			else if(f_return == ESP_HARD_FAIL)
			{
				self->state = ESP_HARD_RESET;
			}
		break;}
 8000cea:	e1c0      	b.n	800106e <esp_api_tcp_api_controller+0x45e>
			else if(f_return == ESP_HARD_FAIL)
 8000cec:	2372      	movs	r3, #114	; 0x72
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d000      	beq.n	8000cf8 <esp_api_tcp_api_controller+0xe8>
 8000cf6:	e1ba      	b.n	800106e <esp_api_tcp_api_controller+0x45e>
				self->state = ESP_HARD_RESET;
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	23c0      	movs	r3, #192	; 0xc0
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	210a      	movs	r1, #10
 8000d00:	54d1      	strb	r1, [r2, r3]
		break;}
 8000d02:	e1b4      	b.n	800106e <esp_api_tcp_api_controller+0x45e>

		case AT_CIPSTA:{
			if(self->parameter.gateway_ip[0] == '\0' ||
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4aaf      	ldr	r2, [pc, #700]	; (8000fc4 <esp_api_tcp_api_controller+0x3b4>)
 8000d08:	5c9b      	ldrb	r3, [r3, r2]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00a      	beq.n	8000d24 <esp_api_tcp_api_controller+0x114>
			   self->parameter.static_ip[0]  == '\0' ||
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4aad      	ldr	r2, [pc, #692]	; (8000fc8 <esp_api_tcp_api_controller+0x3b8>)
 8000d12:	5c9b      	ldrb	r3, [r3, r2]
			if(self->parameter.gateway_ip[0] == '\0' ||
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <esp_api_tcp_api_controller+0x114>
			   self->parameter.mac_ip[0]     == '\0') {self->state = AT_CWJAP;}
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	23e4      	movs	r3, #228	; 0xe4
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	5cd3      	ldrb	r3, [r2, r3]
			   self->parameter.static_ip[0]  == '\0' ||
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d104      	bne.n	8000d2e <esp_api_tcp_api_controller+0x11e>
			   self->parameter.mac_ip[0]     == '\0') {self->state = AT_CWJAP;}
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	23c0      	movs	r3, #192	; 0xc0
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	54d1      	strb	r1, [r2, r3]

			unsigned char cipsta_buffer[ESP_L_BUFF_SIZE] = {0};
 8000d2e:	250c      	movs	r5, #12
 8000d30:	197b      	adds	r3, r7, r5
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	3304      	adds	r3, #4
 8000d38:	2260      	movs	r2, #96	; 0x60
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f004 fc05 	bl	800554c <memset>

	        snprintf((char *)cipsta_buffer,
	                 sizeof(cipsta_buffer),
	                 "AT+CIPSTA=\"%s\",\"%s\",\"%s\"\r\n",
	                 self->parameter.static_ip,
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4aa0      	ldr	r2, [pc, #640]	; (8000fc8 <esp_api_tcp_api_controller+0x3b8>)
 8000d46:	189c      	adds	r4, r3, r2
	                 self->parameter.mac_ip,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	22e4      	movs	r2, #228	; 0xe4
 8000d4c:	00d2      	lsls	r2, r2, #3
 8000d4e:	4694      	mov	ip, r2
 8000d50:	4463      	add	r3, ip
	                 self->parameter.gateway_ip);
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	499b      	ldr	r1, [pc, #620]	; (8000fc4 <esp_api_tcp_api_controller+0x3b4>)
 8000d56:	468c      	mov	ip, r1
 8000d58:	4462      	add	r2, ip
	        snprintf((char *)cipsta_buffer,
 8000d5a:	499c      	ldr	r1, [pc, #624]	; (8000fcc <esp_api_tcp_api_controller+0x3bc>)
 8000d5c:	1978      	adds	r0, r7, r5
 8000d5e:	9201      	str	r2, [sp, #4]
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	0023      	movs	r3, r4
 8000d64:	000a      	movs	r2, r1
 8000d66:	2164      	movs	r1, #100	; 0x64
 8000d68:	f004 fbbc 	bl	80054e4 <sniprintf>

			esp_return_type_e f_return = esp_api_command_manager(self,
 8000d6c:	2673      	movs	r6, #115	; 0x73
 8000d6e:	19bc      	adds	r4, r7, r6
 8000d70:	4a8f      	ldr	r2, [pc, #572]	; (8000fb0 <esp_api_tcp_api_controller+0x3a0>)
 8000d72:	1979      	adds	r1, r7, r5
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	4b90      	ldr	r3, [pc, #576]	; (8000fb8 <esp_api_tcp_api_controller+0x3a8>)
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f000 fa04 	bl	8001188 <esp_api_command_manager>
 8000d80:	0003      	movs	r3, r0
 8000d82:	7023      	strb	r3, [r4, #0]
															     (char *)cipsta_buffer,
															     (char *)"OK",
															     3, 3000);

			if(f_return == ESP_SUCCESS)
 8000d84:	19bb      	adds	r3, r7, r6
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d105      	bne.n	8000d98 <esp_api_tcp_api_controller+0x188>
			{
				esp_state_delay(self, AT_CWJAP);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2104      	movs	r1, #4
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fb91 	bl	80014b8 <esp_state_delay>

			else if(f_return == ESP_HARD_FAIL)
			{
				self->state = ESP_HARD_RESET;
			}
		break;}
 8000d96:	e16c      	b.n	8001072 <esp_api_tcp_api_controller+0x462>
			else if(f_return == ESP_HARD_FAIL)
 8000d98:	2373      	movs	r3, #115	; 0x73
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d000      	beq.n	8000da4 <esp_api_tcp_api_controller+0x194>
 8000da2:	e166      	b.n	8001072 <esp_api_tcp_api_controller+0x462>
				self->state = ESP_HARD_RESET;
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	23c0      	movs	r3, #192	; 0xc0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	210a      	movs	r1, #10
 8000dac:	54d1      	strb	r1, [r2, r3]
		break;}
 8000dae:	e160      	b.n	8001072 <esp_api_tcp_api_controller+0x462>

		case AT_CWJAP:{
		   if(self->parameter.wifi_ssid[0] == '\0' || self->parameter.wifi_password[0] == '\0') {return;}
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	23c4      	movs	r3, #196	; 0xc4
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	5cd3      	ldrb	r3, [r2, r3]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d100      	bne.n	8000dbe <esp_api_tcp_api_controller+0x1ae>
 8000dbc:	e15b      	b.n	8001076 <esp_api_tcp_api_controller+0x466>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a83      	ldr	r2, [pc, #524]	; (8000fd0 <esp_api_tcp_api_controller+0x3c0>)
 8000dc2:	5c9b      	ldrb	r3, [r3, r2]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d100      	bne.n	8000dca <esp_api_tcp_api_controller+0x1ba>
 8000dc8:	e155      	b.n	8001076 <esp_api_tcp_api_controller+0x466>

		   unsigned char cwjap_buffer[ESP_L_BUFF_SIZE] = {0};
 8000dca:	240c      	movs	r4, #12
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	3304      	adds	r3, #4
 8000dd4:	2260      	movs	r2, #96	; 0x60
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f004 fbb7 	bl	800554c <memset>

		   snprintf((char *)cwjap_buffer,
					sizeof(cwjap_buffer),
					"AT+CWJAP=\"%s\",\"%s\"\r\n",
					self->parameter.wifi_ssid,
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	22c4      	movs	r2, #196	; 0xc4
 8000de2:	00d2      	lsls	r2, r2, #3
 8000de4:	1899      	adds	r1, r3, r2
					self->parameter.wifi_password);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a79      	ldr	r2, [pc, #484]	; (8000fd0 <esp_api_tcp_api_controller+0x3c0>)
 8000dea:	4694      	mov	ip, r2
 8000dec:	4463      	add	r3, ip
		   snprintf((char *)cwjap_buffer,
 8000dee:	4a79      	ldr	r2, [pc, #484]	; (8000fd4 <esp_api_tcp_api_controller+0x3c4>)
 8000df0:	0025      	movs	r5, r4
 8000df2:	1938      	adds	r0, r7, r4
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	000b      	movs	r3, r1
 8000df8:	2164      	movs	r1, #100	; 0x64
 8000dfa:	f004 fb73 	bl	80054e4 <sniprintf>

			esp_return_type_e f_return = esp_api_command_manager(self,
 8000dfe:	2674      	movs	r6, #116	; 0x74
 8000e00:	19bc      	adds	r4, r7, r6
 8000e02:	4a6b      	ldr	r2, [pc, #428]	; (8000fb0 <esp_api_tcp_api_controller+0x3a0>)
 8000e04:	1979      	adds	r1, r7, r5
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	4b73      	ldr	r3, [pc, #460]	; (8000fd8 <esp_api_tcp_api_controller+0x3c8>)
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	f000 f9bb 	bl	8001188 <esp_api_command_manager>
 8000e12:	0003      	movs	r3, r0
 8000e14:	7023      	strb	r3, [r4, #0]
															     (char *)cwjap_buffer,
															     (char *)"OK",
															     3, 5000);

			if(f_return == ESP_SUCCESS)
 8000e16:	19bb      	adds	r3, r7, r6
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d10d      	bne.n	8000e3a <esp_api_tcp_api_controller+0x22a>
			{
				self->callback->wifi_connection_success_cb(self->called_by_object, self);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	4790      	blx	r2


				esp_state_delay(self, AT_CIPSTART);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2105      	movs	r1, #5
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 fb40 	bl	80014b8 <esp_state_delay>

			else if(f_return == ESP_HARD_FAIL)
			{
				self->state = ESP_HARD_RESET;
			}
		break;}
 8000e38:	e11f      	b.n	800107a <esp_api_tcp_api_controller+0x46a>
			else if(f_return == ESP_HARD_FAIL)
 8000e3a:	2374      	movs	r3, #116	; 0x74
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d000      	beq.n	8000e46 <esp_api_tcp_api_controller+0x236>
 8000e44:	e119      	b.n	800107a <esp_api_tcp_api_controller+0x46a>
				self->state = ESP_HARD_RESET;
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	23c0      	movs	r3, #192	; 0xc0
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	210a      	movs	r1, #10
 8000e4e:	54d1      	strb	r1, [r2, r3]
 8000e50:	e120      	b.n	8001094 <esp_api_tcp_api_controller+0x484>

		case AT_CIPSTART:{
			if(self->parameter.tcp_ip == NULL || self->parameter.tcp_port == 0) {return;}
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a61      	ldr	r2, [pc, #388]	; (8000fdc <esp_api_tcp_api_controller+0x3cc>)
 8000e56:	4694      	mov	ip, r2
 8000e58:	4463      	add	r3, ip
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d100      	bne.n	8000e60 <esp_api_tcp_api_controller+0x250>
 8000e5e:	e10e      	b.n	800107e <esp_api_tcp_api_controller+0x46e>
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	23d7      	movs	r3, #215	; 0xd7
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	58d3      	ldr	r3, [r2, r3]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d100      	bne.n	8000e6e <esp_api_tcp_api_controller+0x25e>
 8000e6c:	e107      	b.n	800107e <esp_api_tcp_api_controller+0x46e>

	        unsigned char cipstart_buffer[ESP_L_BUFF_SIZE] = {0};
 8000e6e:	240c      	movs	r4, #12
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	3304      	adds	r3, #4
 8000e78:	2260      	movs	r2, #96	; 0x60
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f004 fb65 	bl	800554c <memset>

	        snprintf((char *)cipstart_buffer,
	                 sizeof(cipstart_buffer),
	                 "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",
	                 self->parameter.tcp_ip,
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a55      	ldr	r2, [pc, #340]	; (8000fdc <esp_api_tcp_api_controller+0x3cc>)
 8000e86:	1899      	adds	r1, r3, r2
	        snprintf((char *)cipstart_buffer,
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	23d7      	movs	r3, #215	; 0xd7
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	58d3      	ldr	r3, [r2, r3]
 8000e90:	4a53      	ldr	r2, [pc, #332]	; (8000fe0 <esp_api_tcp_api_controller+0x3d0>)
 8000e92:	0025      	movs	r5, r4
 8000e94:	1938      	adds	r0, r7, r4
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	000b      	movs	r3, r1
 8000e9a:	2164      	movs	r1, #100	; 0x64
 8000e9c:	f004 fb22 	bl	80054e4 <sniprintf>
	                 self->parameter.tcp_port);

			esp_return_type_e f_return = esp_api_command_manager(self,
 8000ea0:	2675      	movs	r6, #117	; 0x75
 8000ea2:	19bc      	adds	r4, r7, r6
 8000ea4:	4a4f      	ldr	r2, [pc, #316]	; (8000fe4 <esp_api_tcp_api_controller+0x3d4>)
 8000ea6:	1979      	adds	r1, r7, r5
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <esp_api_tcp_api_controller+0x3c8>)
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f000 f96a 	bl	8001188 <esp_api_command_manager>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	7023      	strb	r3, [r4, #0]
															     (char *)cipstart_buffer,
															     (char *)"CONNECT",
															     3, 5000);

			if(f_return == ESP_SUCCESS)
 8000eb8:	19bb      	adds	r3, r7, r6
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d10d      	bne.n	8000edc <esp_api_tcp_api_controller+0x2cc>
			{
				self->callback->tcp_connection_success_cb(self->called_by_object, self);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	0018      	movs	r0, r3
 8000ece:	4790      	blx	r2

				esp_state_delay(self, TCP_COMMUNICATION);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f000 faef 	bl	80014b8 <esp_state_delay>

			else if(f_return == ESP_HARD_FAIL)
			{
				self->state = ESP_HARD_RESET;
			}
		break;}
 8000eda:	e0d2      	b.n	8001082 <esp_api_tcp_api_controller+0x472>
			else if(f_return == ESP_HARD_FAIL)
 8000edc:	2375      	movs	r3, #117	; 0x75
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d000      	beq.n	8000ee8 <esp_api_tcp_api_controller+0x2d8>
 8000ee6:	e0cc      	b.n	8001082 <esp_api_tcp_api_controller+0x472>
				self->state = ESP_HARD_RESET;
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	23c0      	movs	r3, #192	; 0xc0
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	210a      	movs	r1, #10
 8000ef0:	54d1      	strb	r1, [r2, r3]
 8000ef2:	e0cf      	b.n	8001094 <esp_api_tcp_api_controller+0x484>

		case AT_CIPSEND:{
	        unsigned char cipsend_buffer[ESP_L_BUFF_SIZE] = {0};
 8000ef4:	240c      	movs	r4, #12
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2260      	movs	r2, #96	; 0x60
 8000f00:	2100      	movs	r1, #0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f004 fb22 	bl	800554c <memset>

	        snprintf((char *)cipsend_buffer,
	                 sizeof(cipsend_buffer),
	                 "AT+CIPSEND=%d\r\n",
	                 length_calculator((const char *)self->tx_buffer));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2282      	movs	r2, #130	; 0x82
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4694      	mov	ip, r2
 8000f10:	4463      	add	r3, ip
	        snprintf((char *)cipsend_buffer,
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fb30 	bl	8001578 <length_calculator>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	4a33      	ldr	r2, [pc, #204]	; (8000fe8 <esp_api_tcp_api_controller+0x3d8>)
 8000f1c:	0025      	movs	r5, r4
 8000f1e:	1938      	adds	r0, r7, r4
 8000f20:	2164      	movs	r1, #100	; 0x64
 8000f22:	f004 fadf 	bl	80054e4 <sniprintf>

			esp_return_type_e f_return = esp_api_command_manager(self,
 8000f26:	2676      	movs	r6, #118	; 0x76
 8000f28:	19bc      	adds	r4, r7, r6
 8000f2a:	4a30      	ldr	r2, [pc, #192]	; (8000fec <esp_api_tcp_api_controller+0x3dc>)
 8000f2c:	1979      	adds	r1, r7, r5
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <esp_api_tcp_api_controller+0x3a8>)
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2303      	movs	r3, #3
 8000f36:	f000 f927 	bl	8001188 <esp_api_command_manager>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	7023      	strb	r3, [r4, #0]
															     (char *)cipsend_buffer,
															     (char *)">",
															     3, 3000);

			if(f_return == ESP_SUCCESS)
 8000f3e:	19bb      	adds	r3, r7, r6
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d105      	bne.n	8000f52 <esp_api_tcp_api_controller+0x342>
			{
				esp_state_delay(self, TRANSMIT_MESSAGE);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2108      	movs	r1, #8
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 fab4 	bl	80014b8 <esp_state_delay>

			else if(f_return == ESP_HARD_FAIL)
			{
				self->state = ESP_HARD_RESET;
			}
		break;}
 8000f50:	e099      	b.n	8001086 <esp_api_tcp_api_controller+0x476>
			else if(f_return == ESP_HARD_FAIL)
 8000f52:	2376      	movs	r3, #118	; 0x76
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d000      	beq.n	8000f5e <esp_api_tcp_api_controller+0x34e>
 8000f5c:	e093      	b.n	8001086 <esp_api_tcp_api_controller+0x476>
				self->state = ESP_HARD_RESET;
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	23c0      	movs	r3, #192	; 0xc0
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	210a      	movs	r1, #10
 8000f66:	54d1      	strb	r1, [r2, r3]
		break;}
 8000f68:	e08d      	b.n	8001086 <esp_api_tcp_api_controller+0x476>

		case TCP_COMMUNICATION:{
			if(!queue_is_empty(&self->tx_queue) && self->rx_timer > ESP_UART_SYNC_TIMEOUT)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3308      	adds	r3, #8
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f000 fcb0 	bl	80018d4 <queue_is_empty>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d108      	bne.n	8000f8a <esp_api_tcp_api_controller+0x37a>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <esp_api_tcp_api_controller+0x3e0>)
 8000f7c:	589b      	ldr	r3, [r3, r2]
 8000f7e:	2b32      	cmp	r3, #50	; 0x32
 8000f80:	d903      	bls.n	8000f8a <esp_api_tcp_api_controller+0x37a>
			{
				esp_receive_handler(self);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 f9cf 	bl	8001328 <esp_receive_handler>
			}

			if(!queue_is_empty(&self->rx_queue))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	22ff      	movs	r2, #255	; 0xff
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	4694      	mov	ip, r2
 8000f92:	4463      	add	r3, ip
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 fc9d 	bl	80018d4 <queue_is_empty>
 8000f9a:	1e03      	subs	r3, r0, #0
 8000f9c:	d000      	beq.n	8000fa0 <esp_api_tcp_api_controller+0x390>
 8000f9e:	e074      	b.n	800108a <esp_api_tcp_api_controller+0x47a>
			{
				esp_transmit_handler(self);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fa56 	bl	8001454 <esp_transmit_handler>
			}

		break;}
 8000fa8:	e06f      	b.n	800108a <esp_api_tcp_api_controller+0x47a>
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	080060bc 	.word	0x080060bc
 8000fb0:	08005eb8 	.word	0x08005eb8
 8000fb4:	08005ebc 	.word	0x08005ebc
 8000fb8:	00000bb8 	.word	0x00000bb8
 8000fbc:	08005ecc 	.word	0x08005ecc
 8000fc0:	08005edc 	.word	0x08005edc
 8000fc4:	000006bc 	.word	0x000006bc
 8000fc8:	000006ee 	.word	0x000006ee
 8000fcc:	08005ee8 	.word	0x08005ee8
 8000fd0:	00000652 	.word	0x00000652
 8000fd4:	08005f04 	.word	0x08005f04
 8000fd8:	00001388 	.word	0x00001388
 8000fdc:	00000684 	.word	0x00000684
 8000fe0:	08005f1c 	.word	0x08005f1c
 8000fe4:	08005f38 	.word	0x08005f38
 8000fe8:	08005f40 	.word	0x08005f40
 8000fec:	08005f50 	.word	0x08005f50
 8000ff0:	000005fc 	.word	0x000005fc

		case TRANSMIT_MESSAGE:{
			esp_return_type_e f_return = esp_api_command_manager(self,
															     (char *)self->tx_buffer,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2282      	movs	r2, #130	; 0x82
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	1899      	adds	r1, r3, r2
			esp_return_type_e f_return = esp_api_command_manager(self,
 8000ffc:	2577      	movs	r5, #119	; 0x77
 8000ffe:	197c      	adds	r4, r7, r5
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <esp_api_tcp_api_controller+0x48c>)
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <esp_api_tcp_api_controller+0x490>)
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2303      	movs	r3, #3
 800100a:	f000 f8bd 	bl	8001188 <esp_api_command_manager>
 800100e:	0003      	movs	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
															     (char *)"SEND OK",
															     3, 3000);

			if(f_return == ESP_SUCCESS)
 8001012:	197b      	adds	r3, r7, r5
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d105      	bne.n	8001026 <esp_api_tcp_api_controller+0x416>
			{
				esp_state_delay(self, TCP_COMMUNICATION);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2107      	movs	r1, #7
 800101e:	0018      	movs	r0, r3
 8001020:	f000 fa4a 	bl	80014b8 <esp_state_delay>

			else if(f_return == ESP_HARD_FAIL)
			{
				self->state = ESP_HARD_RESET;
			}
		break;}
 8001024:	e033      	b.n	800108e <esp_api_tcp_api_controller+0x47e>
			else if(f_return == ESP_HARD_FAIL)
 8001026:	2377      	movs	r3, #119	; 0x77
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d12e      	bne.n	800108e <esp_api_tcp_api_controller+0x47e>
				self->state = ESP_HARD_RESET;
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	23c0      	movs	r3, #192	; 0xc0
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	210a      	movs	r1, #10
 8001038:	54d1      	strb	r1, [r2, r3]
		break;}
 800103a:	e028      	b.n	800108e <esp_api_tcp_api_controller+0x47e>

		case AT_DELAY_STATE:
			if(self->state >= ESP_STATE_DELAY_TIMEOUT)
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	23c0      	movs	r3, #192	; 0xc0
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	2b63      	cmp	r3, #99	; 0x63
 8001046:	d924      	bls.n	8001092 <esp_api_tcp_api_controller+0x482>
			{
				self->state = self->next_state;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <esp_api_tcp_api_controller+0x494>)
 800104c:	5c99      	ldrb	r1, [r3, r2]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	23c0      	movs	r3, #192	; 0xc0
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	54d1      	strb	r1, [r2, r3]
			}
		break;
 8001056:	e01c      	b.n	8001092 <esp_api_tcp_api_controller+0x482>

		case ESP_HARD_RESET:
			esp_hard_reset(self);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	0018      	movs	r0, r3
 800105c:	f000 fa4e 	bl	80014fc <esp_hard_reset>
		break;
 8001060:	e018      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
	if(!self) {return;}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	e016      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		break;}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	e014      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		break;}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	e012      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		break;}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	e010      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		break;}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	e00e      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		   if(self->parameter.wifi_ssid[0] == '\0' || self->parameter.wifi_password[0] == '\0') {return;}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	e00c      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		break;}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	e00a      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
			if(self->parameter.tcp_ip == NULL || self->parameter.tcp_port == 0) {return;}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	e008      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		break;}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	e006      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		break;}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	e004      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		break;}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	e002      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		break;}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	e000      	b.n	8001094 <esp_api_tcp_api_controller+0x484>
		break;
 8001092:	46c0      	nop			; (mov r8, r8)
	}
}
 8001094:	46bd      	mov	sp, r7
 8001096:	b01f      	add	sp, #124	; 0x7c
 8001098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	08005f54 	.word	0x08005f54
 80010a0:	00000bb8 	.word	0x00000bb8
 80010a4:	00000601 	.word	0x00000601

080010a8 <esp_set_wifi_ssid>:

/*
 * @Brief: WiFi SSID must be necessary for TCP client connection
 * */
esp_return_type_e esp_set_wifi_ssid(esp_api_t * self, char * wifi_ssid)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	if(!self || !wifi_ssid) {return ESP_FAIL;}
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <esp_set_wifi_ssid+0x16>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <esp_set_wifi_ssid+0x1a>
 80010be:	2300      	movs	r3, #0
 80010c0:	e00a      	b.n	80010d8 <esp_set_wifi_ssid+0x30>

	snprintf((char *)self->parameter.wifi_ssid, sizeof(self->parameter.wifi_ssid), wifi_ssid);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	22c4      	movs	r2, #196	; 0xc4
 80010c6:	00d2      	lsls	r2, r2, #3
 80010c8:	4694      	mov	ip, r2
 80010ca:	4463      	add	r3, ip
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	2132      	movs	r1, #50	; 0x32
 80010d0:	0018      	movs	r0, r3
 80010d2:	f004 fa07 	bl	80054e4 <sniprintf>

	return ESP_SUCCESS;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}

080010e0 <esp_set_wifi_password>:

/*
 * @Brief: WiFi password must be necessary for TCP client connection
 * */
esp_return_type_e esp_set_wifi_password(esp_api_t * self, char * wifi_password)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	if(!self || !wifi_password) {return ESP_FAIL;}
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <esp_set_wifi_password+0x16>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <esp_set_wifi_password+0x1a>
 80010f6:	2300      	movs	r3, #0
 80010f8:	e009      	b.n	800110e <esp_set_wifi_password+0x2e>

	snprintf((char *)self->parameter.wifi_password, sizeof(self->parameter.wifi_password), wifi_password);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <esp_set_wifi_password+0x38>)
 80010fe:	4694      	mov	ip, r2
 8001100:	4463      	add	r3, ip
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	2132      	movs	r1, #50	; 0x32
 8001106:	0018      	movs	r0, r3
 8001108:	f004 f9ec 	bl	80054e4 <sniprintf>

	return ESP_SUCCESS;
 800110c:	2301      	movs	r3, #1
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	00000652 	.word	0x00000652

0800111c <esp_set_tcp_ip>:

/*
 * @Brief: TCP IP must be necessary for TCP client connection
 * */
esp_return_type_e esp_set_tcp_ip(esp_api_t * self, char * tcp_ip)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	if(!self || !tcp_ip) {return ESP_FAIL;}
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <esp_set_tcp_ip+0x16>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <esp_set_tcp_ip+0x1a>
 8001132:	2300      	movs	r3, #0
 8001134:	e009      	b.n	800114a <esp_set_tcp_ip+0x2e>

	snprintf((char *)self->parameter.tcp_ip, sizeof(self->parameter.tcp_ip), tcp_ip);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <esp_set_tcp_ip+0x38>)
 800113a:	4694      	mov	ip, r2
 800113c:	4463      	add	r3, ip
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	2132      	movs	r1, #50	; 0x32
 8001142:	0018      	movs	r0, r3
 8001144:	f004 f9ce 	bl	80054e4 <sniprintf>

	return ESP_SUCCESS;
 8001148:	2301      	movs	r3, #1
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b002      	add	sp, #8
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	00000684 	.word	0x00000684

08001158 <esp_set_tcp_port>:

/*
 * @Brief: TCP port must be necessary for TCP client connection
 * */
esp_return_type_e esp_set_tcp_port(esp_api_t * self, int  tcp_port)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
	if(!self || !tcp_port) {return ESP_FAIL;}
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <esp_set_tcp_port+0x16>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <esp_set_tcp_port+0x1a>
 800116e:	2300      	movs	r3, #0
 8001170:	e005      	b.n	800117e <esp_set_tcp_port+0x26>

	self->parameter.tcp_port = tcp_port;
 8001172:	6839      	ldr	r1, [r7, #0]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	23d7      	movs	r3, #215	; 0xd7
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	50d1      	str	r1, [r2, r3]

	return ESP_SUCCESS;
 800117c:	2301      	movs	r3, #1
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b002      	add	sp, #8
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <esp_api_command_manager>:
static esp_return_type_e esp_api_command_manager(esp_api_t * self,
											     char * command,
											     char * expected_response,
											     unsigned int attempt_number,
											     unsigned int timeout)
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	4c61      	ldr	r4, [pc, #388]	; (8001310 <esp_api_command_manager+0x188>)
 800118c:	44a5      	add	sp, r4
 800118e:	af00      	add	r7, sp, #0
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	603b      	str	r3, [r7, #0]
	if(!self                 ||
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00e      	beq.n	80011bc <esp_api_command_manager+0x34>
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00b      	beq.n	80011bc <esp_api_command_manager+0x34>
	   !command              ||
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d008      	beq.n	80011bc <esp_api_command_manager+0x34>
	   !expected_response    ||
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d005      	beq.n	80011bc <esp_api_command_manager+0x34>
	   attempt_number <= 0   ||
 80011b0:	2386      	movs	r3, #134	; 0x86
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <esp_api_command_manager+0x38>
	   timeout <= 0) {return ESP_HARD_FAIL;}
 80011bc:	2302      	movs	r3, #2
 80011be:	e0a1      	b.n	8001304 <esp_api_command_manager+0x17c>

	switch(self->command.state)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4a54      	ldr	r2, [pc, #336]	; (8001314 <esp_api_command_manager+0x18c>)
 80011c4:	5c9b      	ldrb	r3, [r3, r2]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d100      	bne.n	80011cc <esp_api_command_manager+0x44>
 80011ca:	e08b      	b.n	80012e4 <esp_api_command_manager+0x15c>
 80011cc:	dd00      	ble.n	80011d0 <esp_api_command_manager+0x48>
 80011ce:	e098      	b.n	8001302 <esp_api_command_manager+0x17a>
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <esp_api_command_manager+0x52>
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d029      	beq.n	800122c <esp_api_command_manager+0xa4>
 80011d8:	e093      	b.n	8001302 <esp_api_command_manager+0x17a>
	{
		case COMMAND_TRANSMITTING:
			self->command.timer = 0;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4a4e      	ldr	r2, [pc, #312]	; (8001318 <esp_api_command_manager+0x190>)
 80011de:	2100      	movs	r1, #0
 80011e0:	5099      	str	r1, [r3, r2]
			self->command.tx_data = (unsigned char *)command;
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	23c2      	movs	r3, #194	; 0xc2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	50d1      	str	r1, [r2, r3]
			self->command.number_of_attempt++;
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	23c3      	movs	r3, #195	; 0xc3
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	58d3      	ldr	r3, [r2, r3]
 80011f4:	1c59      	adds	r1, r3, #1
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	23c3      	movs	r3, #195	; 0xc3
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	50d1      	str	r1, [r2, r3]
			self->command.expected_response = (unsigned char *)expected_response;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4946      	ldr	r1, [pc, #280]	; (800131c <esp_api_command_manager+0x194>)
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	505a      	str	r2, [r3, r1]
			self->command.state = COMMAND_RESPONSE_RECEIVING;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4a42      	ldr	r2, [pc, #264]	; (8001314 <esp_api_command_manager+0x18c>)
 800120a:	2101      	movs	r1, #1
 800120c:	5499      	strb	r1, [r3, r2]

			self->callback->transmit_data_cb(self->called_by_object,
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	699c      	ldr	r4, [r3, #24]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681d      	ldr	r5, [r3, #0]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	0018      	movs	r0, r3
 800121c:	f000 f9ac 	bl	8001578 <length_calculator>
 8001220:	0003      	movs	r3, r0
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	68f9      	ldr	r1, [r7, #12]
 8001226:	0028      	movs	r0, r5
 8001228:	47a0      	blx	r4
											 self,
											 (unsigned char *)command,
											 length_calculator((char *)command));
		break;
 800122a:	e06a      	b.n	8001302 <esp_api_command_manager+0x17a>

		case COMMAND_RESPONSE_RECEIVING:
			if(!queue_is_empty(&self->rx_queue) &&
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	22ff      	movs	r2, #255	; 0xff
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4694      	mov	ip, r2
 8001234:	4463      	add	r3, ip
 8001236:	0018      	movs	r0, r3
 8001238:	f000 fb4c 	bl	80018d4 <queue_is_empty>
 800123c:	1e03      	subs	r3, r0, #0
 800123e:	d141      	bne.n	80012c4 <esp_api_command_manager+0x13c>
			   self->command.timer <= timeout 	&&
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4a35      	ldr	r2, [pc, #212]	; (8001318 <esp_api_command_manager+0x190>)
 8001244:	589b      	ldr	r3, [r3, r2]
			if(!queue_is_empty(&self->rx_queue) &&
 8001246:	2286      	movs	r2, #134	; 0x86
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	18ba      	adds	r2, r7, r2
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d338      	bcc.n	80012c4 <esp_api_command_manager+0x13c>
			   self->rx_timer > ESP_UART_SYNC_TIMEOUT)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4a32      	ldr	r2, [pc, #200]	; (8001320 <esp_api_command_manager+0x198>)
 8001256:	589b      	ldr	r3, [r3, r2]
			   self->command.timer <= timeout 	&&
 8001258:	2b32      	cmp	r3, #50	; 0x32
 800125a:	d933      	bls.n	80012c4 <esp_api_command_manager+0x13c>
			{
				unsigned char buffer[QUEUE_SIZE] = {0};
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <esp_api_command_manager+0x19c>)
 800125e:	2282      	movs	r2, #130	; 0x82
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	189b      	adds	r3, r3, r2
 8001264:	19db      	adds	r3, r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	3304      	adds	r3, #4
 800126c:	22f8      	movs	r2, #248	; 0xf8
 800126e:	0052      	lsls	r2, r2, #1
 8001270:	2100      	movs	r1, #0
 8001272:	0018      	movs	r0, r3
 8001274:	f004 f96a 	bl	800554c <memset>

				queue_read_data(&self->rx_queue, buffer, queue_get_unreaden_size(&self->rx_queue));
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	22ff      	movs	r2, #255	; 0xff
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	189c      	adds	r4, r3, r2
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	22ff      	movs	r2, #255	; 0xff
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	4694      	mov	ip, r2
 8001288:	4463      	add	r3, ip
 800128a:	0018      	movs	r0, r3
 800128c:	f000 fb33 	bl	80018f6 <queue_get_unreaden_size>
 8001290:	0002      	movs	r2, r0
 8001292:	2514      	movs	r5, #20
 8001294:	197b      	adds	r3, r7, r5
 8001296:	0019      	movs	r1, r3
 8001298:	0020      	movs	r0, r4
 800129a:	f000 fb75 	bl	8001988 <queue_read_data>

				if(strstr((char *)buffer, expected_response))
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	197b      	adds	r3, r7, r5
 80012a2:	0011      	movs	r1, r2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f004 f967 	bl	8005578 <strstr>
 80012aa:	1e03      	subs	r3, r0, #0
 80012ac:	d018      	beq.n	80012e0 <esp_api_command_manager+0x158>
				{
					self->command.number_of_attempt = 0;
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	23c3      	movs	r3, #195	; 0xc3
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	2100      	movs	r1, #0
 80012b6:	50d1      	str	r1, [r2, r3]
					self->command.state =  COMMAND_TRANSMITTING;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4a16      	ldr	r2, [pc, #88]	; (8001314 <esp_api_command_manager+0x18c>)
 80012bc:	2100      	movs	r1, #0
 80012be:	5499      	strb	r1, [r3, r2]
					return ESP_SUCCESS;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e01f      	b.n	8001304 <esp_api_command_manager+0x17c>
				}
			}

			else if(self->command.timer > timeout)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4a14      	ldr	r2, [pc, #80]	; (8001318 <esp_api_command_manager+0x190>)
 80012c8:	589b      	ldr	r3, [r3, r2]
 80012ca:	2286      	movs	r2, #134	; 0x86
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	18ba      	adds	r2, r7, r2
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d214      	bcs.n	8001300 <esp_api_command_manager+0x178>
			{
				self->command.state =  COMMAND_ATTEMPT_CONTROL;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <esp_api_command_manager+0x18c>)
 80012da:	2102      	movs	r1, #2
 80012dc:	5499      	strb	r1, [r3, r2]
			}
		break;
 80012de:	e00f      	b.n	8001300 <esp_api_command_manager+0x178>
			{
 80012e0:	46c0      	nop			; (mov r8, r8)
		break;
 80012e2:	e00d      	b.n	8001300 <esp_api_command_manager+0x178>

		case COMMAND_ATTEMPT_CONTROL:
			if(self->command.number_of_attempt >= attempt_number)
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	23c3      	movs	r3, #195	; 0xc3
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	58d3      	ldr	r3, [r2, r3]
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d801      	bhi.n	80012f6 <esp_api_command_manager+0x16e>
			{
				return ESP_HARD_FAIL;
 80012f2:	2302      	movs	r3, #2
 80012f4:	e006      	b.n	8001304 <esp_api_command_manager+0x17c>
			}

			self->command.state =  COMMAND_TRANSMITTING;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <esp_api_command_manager+0x18c>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	5499      	strb	r1, [r3, r2]
		break;
 80012fe:	e000      	b.n	8001302 <esp_api_command_manager+0x17a>
		break;
 8001300:	46c0      	nop			; (mov r8, r8)
	}

	return ESP_FAIL;
 8001302:	2300      	movs	r3, #0
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	2382      	movs	r3, #130	; 0x82
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	449d      	add	sp, r3
 800130e:	bdb0      	pop	{r4, r5, r7, pc}
 8001310:	fffffdf8 	.word	0xfffffdf8
 8001314:	0000060c 	.word	0x0000060c
 8001318:	0000061c 	.word	0x0000061c
 800131c:	00000614 	.word	0x00000614
 8001320:	000005fc 	.word	0x000005fc
 8001324:	fffffe0c 	.word	0xfffffe0c

08001328 <esp_receive_handler>:

/*
 * @Brief: ESP received data handler
 * */
static void esp_receive_handler(esp_api_t * self)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b0c6      	sub	sp, #280	; 0x118
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if(!self) {return;}
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d100      	bne.n	8001338 <esp_receive_handler+0x10>
 8001336:	e081      	b.n	800143c <esp_receive_handler+0x114>

	unsigned char buffer[255] = {0};
 8001338:	4b42      	ldr	r3, [pc, #264]	; (8001444 <esp_receive_handler+0x11c>)
 800133a:	228c      	movs	r2, #140	; 0x8c
 800133c:	0052      	lsls	r2, r2, #1
 800133e:	189b      	adds	r3, r3, r2
 8001340:	19db      	adds	r3, r3, r7
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	3304      	adds	r3, #4
 8001348:	22fb      	movs	r2, #251	; 0xfb
 800134a:	2100      	movs	r1, #0
 800134c:	0018      	movs	r0, r3
 800134e:	f004 f8fd 	bl	800554c <memset>

	queue_read_data(&self->rx_queue, (unsigned char *)buffer, queue_get_unreaden_size(&self->rx_queue));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	189c      	adds	r4, r3, r2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	22ff      	movs	r2, #255	; 0xff
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4694      	mov	ip, r2
 8001362:	4463      	add	r3, ip
 8001364:	0018      	movs	r0, r3
 8001366:	f000 fac6 	bl	80018f6 <queue_get_unreaden_size>
 800136a:	0002      	movs	r2, r0
 800136c:	250c      	movs	r5, #12
 800136e:	197b      	adds	r3, r7, r5
 8001370:	0019      	movs	r1, r3
 8001372:	0020      	movs	r0, r4
 8001374:	f000 fb08 	bl	8001988 <queue_read_data>

	if(strstr((char *)buffer, "+IPD,"))
 8001378:	4a33      	ldr	r2, [pc, #204]	; (8001448 <esp_receive_handler+0x120>)
 800137a:	002c      	movs	r4, r5
 800137c:	193b      	adds	r3, r7, r4
 800137e:	0011      	movs	r1, r2
 8001380:	0018      	movs	r0, r3
 8001382:	f004 f8f9 	bl	8005578 <strstr>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d034      	beq.n	80013f4 <esp_receive_handler+0xcc>
	{
		char * temp_hold = strstr((char *)buffer,"+IPD,");
 800138a:	4a2f      	ldr	r2, [pc, #188]	; (8001448 <esp_receive_handler+0x120>)
 800138c:	193b      	adds	r3, r7, r4
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f004 f8f1 	bl	8005578 <strstr>
 8001396:	0003      	movs	r3, r0
 8001398:	248a      	movs	r4, #138	; 0x8a
 800139a:	0064      	lsls	r4, r4, #1
 800139c:	193a      	adds	r2, r7, r4
 800139e:	6013      	str	r3, [r2, #0]

		unsigned int received_data_size = string_to_int_converter((const char *)temp_hold);
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 f8fd 	bl	80015a4 <string_to_int_converter>
 80013aa:	0003      	movs	r3, r0
 80013ac:	2588      	movs	r5, #136	; 0x88
 80013ae:	006d      	lsls	r5, r5, #1
 80013b0:	197a      	adds	r2, r7, r5
 80013b2:	6013      	str	r3, [r2, #0]

		if(received_data_size)
 80013b4:	197b      	adds	r3, r7, r5
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d040      	beq.n	800143e <esp_receive_handler+0x116>
		{
			char * data_hold = strstr((const char *)temp_hold, ":");
 80013bc:	193b      	adds	r3, r7, r4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	213a      	movs	r1, #58	; 0x3a
 80013c2:	0018      	movs	r0, r3
 80013c4:	f004 f8ca 	bl	800555c <strchr>
 80013c8:	0003      	movs	r3, r0
 80013ca:	2286      	movs	r2, #134	; 0x86
 80013cc:	0052      	lsls	r2, r2, #1
 80013ce:	18b9      	adds	r1, r7, r2
 80013d0:	600b      	str	r3, [r1, #0]

			if(data_hold)
 80013d2:	18bb      	adds	r3, r7, r2
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d031      	beq.n	800143e <esp_receive_handler+0x116>
			{
				self->callback->received_data_cb(self->called_by_object,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	69dc      	ldr	r4, [r3, #28]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	18bb      	adds	r3, r7, r2
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	197b      	adds	r3, r7, r5
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	47a0      	blx	r4
 80013f2:	e024      	b.n	800143e <esp_receive_handler+0x116>
												 received_data_size);
			}
		}
	}

	else if(strstr((char *)buffer, "CLOSED"))
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <esp_receive_handler+0x124>)
 80013f6:	230c      	movs	r3, #12
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	0011      	movs	r1, r2
 80013fc:	0018      	movs	r0, r3
 80013fe:	f004 f8bb 	bl	8005578 <strstr>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d008      	beq.n	8001418 <esp_receive_handler+0xf0>
	{
		self->callback->tcp_connection_fail_cb(self->called_by_object, self);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	0018      	movs	r0, r3
 8001414:	4790      	blx	r2
 8001416:	e012      	b.n	800143e <esp_receive_handler+0x116>
	}

	else if(strstr((char *)buffer, "WIFI DISCONNECT"))
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <esp_receive_handler+0x128>)
 800141a:	230c      	movs	r3, #12
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	0011      	movs	r1, r2
 8001420:	0018      	movs	r0, r3
 8001422:	f004 f8a9 	bl	8005578 <strstr>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d009      	beq.n	800143e <esp_receive_handler+0x116>
	{
		self->callback->wifi_connection_fail_cb(self->called_by_object, self);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	0018      	movs	r0, r3
 8001438:	4790      	blx	r2
 800143a:	e000      	b.n	800143e <esp_receive_handler+0x116>
	if(!self) {return;}
 800143c:	46c0      	nop			; (mov r8, r8)
	}
}
 800143e:	46bd      	mov	sp, r7
 8001440:	b046      	add	sp, #280	; 0x118
 8001442:	bdb0      	pop	{r4, r5, r7, pc}
 8001444:	fffffef4 	.word	0xfffffef4
 8001448:	08005f5c 	.word	0x08005f5c
 800144c:	08005f64 	.word	0x08005f64
 8001450:	08005f6c 	.word	0x08005f6c

08001454 <esp_transmit_handler>:

/*
 * @Brief: MCU to ESP transmit handler
 * */
static void esp_transmit_handler(esp_api_t * self)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	if(!self) {return;}
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d026      	beq.n	80014b0 <esp_transmit_handler+0x5c>

	unsigned int unreaden_data_size = queue_get_unreaden_size(&self->tx_queue);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3308      	adds	r3, #8
 8001466:	0018      	movs	r0, r3
 8001468:	f000 fa45 	bl	80018f6 <queue_get_unreaden_size>
 800146c:	0003      	movs	r3, r0
 800146e:	60fb      	str	r3, [r7, #12]

	if(unreaden_data_size > 1)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d91d      	bls.n	80014b2 <esp_transmit_handler+0x5e>
	{
		memset((char *)self->tx_buffer, 0, sizeof(self->tx_buffer));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2282      	movs	r2, #130	; 0x82
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4694      	mov	ip, r2
 800147e:	4463      	add	r3, ip
 8001480:	22fa      	movs	r2, #250	; 0xfa
 8001482:	0052      	lsls	r2, r2, #1
 8001484:	2100      	movs	r1, #0
 8001486:	0018      	movs	r0, r3
 8001488:	f004 f860 	bl	800554c <memset>

		queue_read_data(&self->tx_queue, self->tx_buffer, unreaden_data_size);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3308      	adds	r3, #8
 8001490:	0018      	movs	r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2282      	movs	r2, #130	; 0x82
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4694      	mov	ip, r2
 800149a:	4463      	add	r3, ip
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	0019      	movs	r1, r3
 80014a0:	f000 fa72 	bl	8001988 <queue_read_data>

		self->state = AT_CIPSEND;
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	23c0      	movs	r3, #192	; 0xc0
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	2106      	movs	r1, #6
 80014ac:	54d1      	strb	r1, [r2, r3]
 80014ae:	e000      	b.n	80014b2 <esp_transmit_handler+0x5e>
	if(!self) {return;}
 80014b0:	46c0      	nop			; (mov r8, r8)
	}
}
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b004      	add	sp, #16
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <esp_state_delay>:
 * @Brief: Creating delay for the next step
 * @Param: ESP API object
 * @Param: Next AT state
 * */
static void esp_state_delay(esp_api_t * self, esp_at_state_e next_state)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	000a      	movs	r2, r1
 80014c2:	1cfb      	adds	r3, r7, #3
 80014c4:	701a      	strb	r2, [r3, #0]
  if(!self) {return;}
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00e      	beq.n	80014ea <esp_state_delay+0x32>

  self->delay_timer = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <esp_state_delay+0x3c>)
 80014d0:	2100      	movs	r1, #0
 80014d2:	5099      	str	r1, [r3, r2]
  self->state = AT_DELAY_STATE;
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	23c0      	movs	r3, #192	; 0xc0
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	2109      	movs	r1, #9
 80014dc:	54d1      	strb	r1, [r2, r3]
  self->next_state = next_state;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1cfa      	adds	r2, r7, #3
 80014e2:	4905      	ldr	r1, [pc, #20]	; (80014f8 <esp_state_delay+0x40>)
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	545a      	strb	r2, [r3, r1]
 80014e8:	e000      	b.n	80014ec <esp_state_delay+0x34>
  if(!self) {return;}
 80014ea:	46c0      	nop			; (mov r8, r8)
}
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	00000604 	.word	0x00000604
 80014f8:	00000601 	.word	0x00000601

080014fc <esp_hard_reset>:

static void esp_hard_reset(esp_api_t * self)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	if(!self) {return;}
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d02f      	beq.n	800156a <esp_hard_reset+0x6e>

	self->callback->power_disable_cb(self);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	0010      	movs	r0, r2
 8001514:	4798      	blx	r3

	if(self->reset_timer > ESP_RESET_TIMEOUT)
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	23c1      	movs	r3, #193	; 0xc1
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	58d2      	ldr	r2, [r2, r3]
 800151e:	23fa      	movs	r3, #250	; 0xfa
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	429a      	cmp	r2, r3
 8001524:	d922      	bls.n	800156c <esp_hard_reset+0x70>
	{
		self->reset_timer = 0;
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	23c1      	movs	r3, #193	; 0xc1
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	2100      	movs	r1, #0
 800152e:	50d1      	str	r1, [r2, r3]
		self->callback->power_enable_cb(self);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	0010      	movs	r0, r2
 800153a:	4798      	blx	r3
		self->state = AT_RESTORE;
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	23c0      	movs	r3, #192	; 0xc0
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	2100      	movs	r1, #0
 8001544:	54d1      	strb	r1, [r2, r3]
		self->command.state = COMMAND_TRANSMITTING;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <esp_hard_reset+0x78>)
 800154a:	2100      	movs	r1, #0
 800154c:	5499      	strb	r1, [r3, r2]
		queue_create(&self->rx_queue);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	22ff      	movs	r2, #255	; 0xff
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	4694      	mov	ip, r2
 8001556:	4463      	add	r3, ip
 8001558:	0018      	movs	r0, r3
 800155a:	f000 f981 	bl	8001860 <queue_create>
		queue_create(&self->tx_queue);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3308      	adds	r3, #8
 8001562:	0018      	movs	r0, r3
 8001564:	f000 f97c 	bl	8001860 <queue_create>
 8001568:	e000      	b.n	800156c <esp_hard_reset+0x70>
	if(!self) {return;}
 800156a:	46c0      	nop			; (mov r8, r8)
	}
}
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	0000060c 	.word	0x0000060c

08001578 <length_calculator>:

/*
 * @Brief: Calculating the length of string
 * */
static unsigned int length_calculator(const char * string)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  int index = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]

  while (*string)
 8001584:	e005      	b.n	8001592 <length_calculator+0x1a>
  {
      index++;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3301      	adds	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
      string++;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3301      	adds	r3, #1
 8001590:	607b      	str	r3, [r7, #4]
  while (*string)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f5      	bne.n	8001586 <length_calculator+0xe>
  }

  return index;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b004      	add	sp, #16
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <string_to_int_converter>:

/*
 * @Brief: String to integer converter
 * */
static int string_to_int_converter(const char * string)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
    int result = 0; int flag = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
    while (*string) {
 80015b4:	e01b      	b.n	80015ee <string_to_int_converter+0x4a>
        if (*string >= '0' && *string <= '9') {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b2f      	cmp	r3, #47	; 0x2f
 80015bc:	d911      	bls.n	80015e2 <string_to_int_converter+0x3e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b39      	cmp	r3, #57	; 0x39
 80015c4:	d80d      	bhi.n	80015e2 <string_to_int_converter+0x3e>
            result = result * 10 + (*string - '0');
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	0013      	movs	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	189b      	adds	r3, r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	001a      	movs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	3b30      	subs	r3, #48	; 0x30
 80015d8:	18d3      	adds	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
            flag = 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	e002      	b.n	80015e8 <string_to_int_converter+0x44>
        }
        else{
            if(flag == 1){break;}
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d007      	beq.n	80015f8 <string_to_int_converter+0x54>
        }
        string++;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3301      	adds	r3, #1
 80015ec:	607b      	str	r3, [r7, #4]
    while (*string) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1df      	bne.n	80015b6 <string_to_int_converter+0x12>
 80015f6:	e000      	b.n	80015fa <string_to_int_converter+0x56>
            if(flag == 1){break;}
 80015f8:	46c0      	nop			; (mov r8, r8)
    }
    return result;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b004      	add	sp, #16
 8001602:	bd80      	pop	{r7, pc}

08001604 <esp_app_init>:
/* ----------------------> GLOBAL FUNCTION START <---------------------- */
/*
 * @Brief: ESP APP init
 * */
void esp_app_init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	queue_create(&_app.queue);
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <esp_app_init+0x24>)
 800160a:	0018      	movs	r0, r3
 800160c:	f000 f928 	bl	8001860 <queue_create>

	esp_api_create(&_app, &_app._api, &_esp_api_cb);
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <esp_app_init+0x28>)
 8001612:	4907      	ldr	r1, [pc, #28]	; (8001630 <esp_app_init+0x2c>)
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <esp_app_init+0x2c>)
 8001616:	0018      	movs	r0, r3
 8001618:	f7ff fac0 	bl	8000b9c <esp_api_create>

	esp_set_parameters();
 800161c:	f000 f86e 	bl	80016fc <esp_set_parameters>
}
 8001620:	46c0      	nop			; (mov r8, r8)
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	20000888 	.word	0x20000888
 800162c:	20000004 	.word	0x20000004
 8001630:	20000134 	.word	0x20000134

08001634 <esp_app_polling>:

/*
 * @Brief: ESP APP polling
 * */
void esp_app_polling(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b0c0      	sub	sp, #256	; 0x100
 8001638:	af00      	add	r7, sp, #0
	esp_api_tcp_api_controller(&_app._api);
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <esp_app_polling+0x78>)
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff fae7 	bl	8000c10 <esp_api_tcp_api_controller>

	if(_app.flag.tcp == TCP_CONNECTION_SUCCESS &&
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <esp_app_polling+0x78>)
 8001644:	4a1a      	ldr	r2, [pc, #104]	; (80016b0 <esp_app_polling+0x7c>)
 8001646:	5c9b      	ldrb	r3, [r3, r2]
 8001648:	2b03      	cmp	r3, #3
 800164a:	d12a      	bne.n	80016a2 <esp_app_polling+0x6e>
	   _app.tx_timer > SEND_MESSAGE_TIMEOUT)
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <esp_app_polling+0x78>)
 800164e:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <esp_app_polling+0x80>)
 8001650:	589b      	ldr	r3, [r3, r2]
	if(_app.flag.tcp == TCP_CONNECTION_SUCCESS &&
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d925      	bls.n	80016a2 <esp_app_polling+0x6e>
	{
		_app.tx_timer = 0;
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <esp_app_polling+0x78>)
 8001658:	4a16      	ldr	r2, [pc, #88]	; (80016b4 <esp_app_polling+0x80>)
 800165a:	2100      	movs	r1, #0
 800165c:	5099      	str	r1, [r3, r2]
		counter++;
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <esp_app_polling+0x84>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <esp_app_polling+0x84>)
 8001666:	601a      	str	r2, [r3, #0]
		unsigned char test_text[255] = {0};
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <esp_app_polling+0x88>)
 800166a:	3301      	adds	r3, #1
 800166c:	33ff      	adds	r3, #255	; 0xff
 800166e:	19db      	adds	r3, r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	3304      	adds	r3, #4
 8001676:	22fb      	movs	r2, #251	; 0xfb
 8001678:	2100      	movs	r1, #0
 800167a:	0018      	movs	r0, r3
 800167c:	f003 ff66 	bl	800554c <memset>
		snprintf((char *)test_text,
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <esp_app_polling+0x84>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <esp_app_polling+0x8c>)
 8001686:	0038      	movs	r0, r7
 8001688:	21ff      	movs	r1, #255	; 0xff
 800168a:	f003 ff2b 	bl	80054e4 <sniprintf>
		   sizeof(test_text),
		   "The journey of life is filled with twists and turns, leading us down paths unknown. In the depths of uncertainty, we find strength to face the challenges ahead.Test number %d\r\n",
		   counter);

		queue_write_data(&_app._api.tx_queue, test_text, strlen((char *)test_text));
 800168e:	003b      	movs	r3, r7
 8001690:	0018      	movs	r0, r3
 8001692:	f7fe fd37 	bl	8000104 <strlen>
 8001696:	0002      	movs	r2, r0
 8001698:	0039      	movs	r1, r7
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <esp_app_polling+0x90>)
 800169c:	0018      	movs	r0, r3
 800169e:	f000 f939 	bl	8001914 <queue_write_data>
	}
}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b040      	add	sp, #256	; 0x100
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	20000134 	.word	0x20000134
 80016b0:	00000955 	.word	0x00000955
 80016b4:	00000958 	.word	0x00000958
 80016b8:	20000a90 	.word	0x20000a90
 80016bc:	ffffff00 	.word	0xffffff00
 80016c0:	08005f7c 	.word	0x08005f7c
 80016c4:	2000013c 	.word	0x2000013c

080016c8 <write_into_api_rx_queue>:

/*
 * @Brief: ESP API queue filler
 * */
void write_into_api_rx_queue(const unsigned char * rx_data, unsigned int rx_data_length)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
	queue_write_data(&_app._api.rx_queue, (unsigned char *)rx_data, rx_data_length);
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <write_into_api_rx_queue+0x28>)
 80016d8:	0018      	movs	r0, r3
 80016da:	f000 f91b 	bl	8001914 <queue_write_data>
	_app._api.rx_timer = 0;
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <write_into_api_rx_queue+0x2c>)
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <write_into_api_rx_queue+0x30>)
 80016e2:	2100      	movs	r1, #0
 80016e4:	5099      	str	r1, [r3, r2]
}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	20000530 	.word	0x20000530
 80016f4:	20000134 	.word	0x20000134
 80016f8:	000005fc 	.word	0x000005fc

080016fc <esp_set_parameters>:
/* -----------------------> GLOBAL FUNCTION END <----------------------- */

static void esp_set_parameters(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	esp_set_wifi_ssid(&_app._api, WIFI_SSID);
 8001700:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <esp_set_parameters+0x38>)
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <esp_set_parameters+0x3c>)
 8001704:	0011      	movs	r1, r2
 8001706:	0018      	movs	r0, r3
 8001708:	f7ff fcce 	bl	80010a8 <esp_set_wifi_ssid>
	esp_set_wifi_password(&_app._api, WIFI_PASSWORD);
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <esp_set_parameters+0x40>)
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <esp_set_parameters+0x3c>)
 8001710:	0011      	movs	r1, r2
 8001712:	0018      	movs	r0, r3
 8001714:	f7ff fce4 	bl	80010e0 <esp_set_wifi_password>
	esp_set_tcp_ip(&_app._api, TCP_IP);
 8001718:	4a09      	ldr	r2, [pc, #36]	; (8001740 <esp_set_parameters+0x44>)
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <esp_set_parameters+0x3c>)
 800171c:	0011      	movs	r1, r2
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff fcfc 	bl	800111c <esp_set_tcp_ip>
	esp_set_tcp_port(&_app._api, TCP_PORT);
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <esp_set_parameters+0x3c>)
 8001726:	2129      	movs	r1, #41	; 0x29
 8001728:	0018      	movs	r0, r3
 800172a:	f7ff fd15 	bl	8001158 <esp_set_tcp_port>
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	08006030 	.word	0x08006030
 8001738:	20000134 	.word	0x20000134
 800173c:	0800603c 	.word	0x0800603c
 8001740:	0800604c 	.word	0x0800604c

08001744 <power_enable_fp>:


/* --------------------------------------------------------- */
static void power_enable_fp(void * esp_api_object)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	hardware_gpio_enable(GPIOB, GPIO_PIN_2);
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <power_enable_fp+0x1c>)
 800174e:	2104      	movs	r1, #4
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff f903 	bl	800095c <hardware_gpio_enable>
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	50000400 	.word	0x50000400

08001764 <power_disable_fp>:
/* --------------------------------------------------------- */
static void power_disable_fp(void * esp_api_object)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	hardware_gpio_disable(GPIOB, GPIO_PIN_2);
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <power_disable_fp+0x1c>)
 800176e:	2104      	movs	r1, #4
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff f905 	bl	8000980 <hardware_gpio_disable>
}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b002      	add	sp, #8
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	50000400 	.word	0x50000400

08001784 <wifi_connection_success_fp>:
/* ---------------------------------------------------------------------------------- */
static void wifi_connection_success_fp(void * called_by_object, void * esp_api_object)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
	_app.flag.wifi = WIFI_CONNECTION_SUCCESS;
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <wifi_connection_success_fp+0x1c>)
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <wifi_connection_success_fp+0x20>)
 8001792:	2101      	movs	r1, #1
 8001794:	5499      	strb	r1, [r3, r2]
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46bd      	mov	sp, r7
 800179a:	b002      	add	sp, #8
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	20000134 	.word	0x20000134
 80017a4:	00000954 	.word	0x00000954

080017a8 <wifi_connection_fail_fp>:
/* ---------------------------------------------------------------------------------- */
static void wifi_connection_fail_fp(void * called_by_object, void * esp_api_object)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	_app.flag.wifi = WIFI_CONNECTION_FAIL;
 80017b2:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <wifi_connection_fail_fp+0x1c>)
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <wifi_connection_fail_fp+0x20>)
 80017b6:	2100      	movs	r1, #0
 80017b8:	5499      	strb	r1, [r3, r2]
}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b002      	add	sp, #8
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	20000134 	.word	0x20000134
 80017c8:	00000954 	.word	0x00000954

080017cc <tcp_connection_success_fp>:
/* ---------------------------------------------------------------------------------- */
static void tcp_connection_success_fp(void * called_by_object, void * esp_api_object)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	_app.flag.tcp = TCP_CONNECTION_SUCCESS;
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <tcp_connection_success_fp+0x1c>)
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <tcp_connection_success_fp+0x20>)
 80017da:	2103      	movs	r1, #3
 80017dc:	5499      	strb	r1, [r3, r2]
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	20000134 	.word	0x20000134
 80017ec:	00000955 	.word	0x00000955

080017f0 <tcp_connection_fail_fp>:
/* ---------------------------------------------------------------------------------- */
static void tcp_connection_fail_fp(void * called_by_object, void * esp_api_object)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	_app.flag.tcp = TCP_CONNECTION_FAIL;
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <tcp_connection_fail_fp+0x1c>)
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <tcp_connection_fail_fp+0x20>)
 80017fe:	2102      	movs	r1, #2
 8001800:	5499      	strb	r1, [r3, r2]
}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46bd      	mov	sp, r7
 8001806:	b002      	add	sp, #8
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	20000134 	.word	0x20000134
 8001810:	00000955 	.word	0x00000955

08001814 <transmit_data_fp>:
/* ---------------------------------------------------------------------------------------------------------------------------------------------- */
static void transmit_data_fp(void * called_by_object, void * esp_api_object, const unsigned char * rx_data, unsigned int rx_data_length)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	603b      	str	r3, [r7, #0]
	hardware_transmit_w_uart(rx_data, rx_data_length);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0011      	movs	r1, r2
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff f87a 	bl	8000924 <hardware_transmit_w_uart>
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b004      	add	sp, #16
 8001836:	bd80      	pop	{r7, pc}

08001838 <received_data_fp>:
/* ---------------------------------------------------------------------------------------------------------------------------------------------- */
static void received_data_fp(void * called_by_object, void * esp_api_object, const unsigned char * rx_data, unsigned int rx_data_length)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
	queue_write_data(&_app.queue, (unsigned char *)rx_data, rx_data_length);
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <received_data_fp+0x24>)
 800184c:	0018      	movs	r0, r3
 800184e:	f000 f861 	bl	8001914 <queue_write_data>
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b004      	add	sp, #16
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	20000888 	.word	0x20000888

08001860 <queue_create>:

/*
 * @Brief: Create queue function
 * */
queue_return_type_e queue_create(queue_t * self)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	if(!self) {return QUEUE_FAIL;}
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <queue_create+0x12>
 800186e:	2300      	movs	r3, #0
 8001870:	e004      	b.n	800187c <queue_create+0x1c>

	queue_clean_up(self);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0018      	movs	r0, r3
 8001876:	f000 f805 	bl	8001884 <queue_clean_up>

	return QUEUE_SUCCESS;
 800187a:	2301      	movs	r3, #1
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}

08001884 <queue_clean_up>:

/*
 * @Brief: Cleans the whole queue buffer.
 * */
queue_return_type_e queue_clean_up(queue_t * self)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	if(!self) {return QUEUE_FAIL;}
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <queue_clean_up+0x12>
 8001892:	2300      	movs	r3, #0
 8001894:	e01a      	b.n	80018cc <queue_clean_up+0x48>

	self->head 	= 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
	self->index 	= 0;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
	self->tail 	= 0;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	605a      	str	r2, [r3, #4]

	for (int index = 0; index < QUEUE_SIZE; index++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e008      	b.n	80018c0 <queue_clean_up+0x3c>
	{
		self->buffer[index] = '\0';
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	18d3      	adds	r3, r2, r3
 80018b4:	330c      	adds	r3, #12
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
	for (int index = 0; index < QUEUE_SIZE; index++)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3301      	adds	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	23fa      	movs	r3, #250	; 0xfa
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dbf1      	blt.n	80018ae <queue_clean_up+0x2a>
	}

	return QUEUE_SUCCESS;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b004      	add	sp, #16
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <queue_is_empty>:

/*
 * @Brief: Gives the info about the queue. If the queue is empty it returns 1 otherwise 0.
 * */
queue_size_return_type_e queue_is_empty(queue_t * self)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	if(self->head == self->tail) {return QUEUE_IS_EMPTY;}
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d101      	bne.n	80018ec <queue_is_empty+0x18>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <queue_is_empty+0x1a>

	return QUEUE_IS_NOT_EMPTY;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <queue_get_unreaden_size>:

/*
 * @Brief: Gives the info about the current queue size.
 * */
unsigned int queue_get_unreaden_size(queue_t * self)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
	unsigned int unreaden_size = self->head - self->tail;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	60fb      	str	r3, [r7, #12]
	if(unreaden_size < 0)
	{
		unreaden_size = self->head + (QUEUE_SIZE - self->tail);
	}

	return unreaden_size;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b004      	add	sp, #16
 8001912:	bd80      	pop	{r7, pc}

08001914 <queue_write_data>:
 * @Brief: Helps write data to queue buffer. This buffer is circular.
 * */
void queue_write_data(queue_t * self,
					  unsigned char* in_data,
					  unsigned int in_data_length)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
	if(self == NULL || in_data == NULL || in_data_length < 1) {return;}
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d02c      	beq.n	8001980 <queue_write_data+0x6c>
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d029      	beq.n	8001980 <queue_write_data+0x6c>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d026      	beq.n	8001980 <queue_write_data+0x6c>

	do
	{
		self->buffer[self->head] = in_data[self->index];
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	18d2      	adds	r2, r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	7811      	ldrb	r1, [r2, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	18d3      	adds	r3, r2, r3
 8001944:	1c0a      	adds	r2, r1, #0
 8001946:	731a      	strb	r2, [r3, #12]

		self->head++;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	601a      	str	r2, [r3, #0]

		if(self->head > (QUEUE_SIZE - 1)) {self->head = 0;}
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	23fa      	movs	r3, #250	; 0xfa
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	429a      	cmp	r2, r3
 800195c:	d302      	bcc.n	8001964 <queue_write_data+0x50>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

		self->index++;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	609a      	str	r2, [r3, #8]
	}while(self->index < in_data_length);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8dc      	bhi.n	8001932 <queue_write_data+0x1e>

	self->index = 0;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	e000      	b.n	8001982 <queue_write_data+0x6e>
	if(self == NULL || in_data == NULL || in_data_length < 1) {return;}
 8001980:	46c0      	nop			; (mov r8, r8)
}
 8001982:	46bd      	mov	sp, r7
 8001984:	b004      	add	sp, #16
 8001986:	bd80      	pop	{r7, pc}

08001988 <queue_read_data>:
 * @Brief: Helps read data from queue buffer.
 * */
void queue_read_data(queue_t* self,
					 unsigned char* out_data,
					 unsigned int out_data_length)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
	if(self == NULL || out_data_length < 1) {return;}
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d039      	beq.n	8001a0e <queue_read_data+0x86>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d036      	beq.n	8001a0e <queue_read_data+0x86>

	do
	{
		if(!queue_is_empty(self))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7ff ff96 	bl	80018d4 <queue_is_empty>
 80019a8:	1e03      	subs	r3, r0, #0
 80019aa:	d12b      	bne.n	8001a04 <queue_read_data+0x7c>
		{
			*(out_data + self->index) = self->buffer[self->tail];
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	18cb      	adds	r3, r1, r3
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	188a      	adds	r2, r1, r2
 80019bc:	7b12      	ldrb	r2, [r2, #12]
 80019be:	701a      	strb	r2, [r3, #0]

			self->tail++;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	605a      	str	r2, [r3, #4]

			if(self->tail > (QUEUE_SIZE - 1)) {self->tail = 0;}
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	23fa      	movs	r3, #250	; 0xfa
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d302      	bcc.n	80019dc <queue_read_data+0x54>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]

			self->index++;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	609a      	str	r2, [r3, #8]

			if (self->index > (QUEUE_SIZE - 1)) {
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	23fa      	movs	r3, #250	; 0xfa
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d302      	bcc.n	80019f8 <queue_read_data+0x70>
				self->index = 0;}
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
		else
		{
			break;
		}

	}while(self->index < out_data_length);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d8ce      	bhi.n	80019a0 <queue_read_data+0x18>
 8001a02:	e000      	b.n	8001a06 <queue_read_data+0x7e>
			break;
 8001a04:	46c0      	nop			; (mov r8, r8)

	self->index = 0;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	e000      	b.n	8001a10 <queue_read_data+0x88>
	if(self == NULL || out_data_length < 1) {return;}
 8001a0e:	46c0      	nop			; (mov r8, r8)
}
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b004      	add	sp, #16
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_Init+0x3c>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_Init+0x3c>)
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	0049      	lsls	r1, r1, #1
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a32:	2003      	movs	r0, #3
 8001a34:	f000 f810 	bl	8001a58 <HAL_InitTick>
 8001a38:	1e03      	subs	r3, r0, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001a3c:	1dfb      	adds	r3, r7, #7
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e001      	b.n	8001a48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7fe fe1a 	bl	800067c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a48:	1dfb      	adds	r3, r7, #7
 8001a4a:	781b      	ldrb	r3, [r3, #0]
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b002      	add	sp, #8
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40022000 	.word	0x40022000

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a60:	230f      	movs	r3, #15
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_InitTick+0x88>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d02b      	beq.n	8001ac8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_InitTick+0x8c>)
 8001a72:	681c      	ldr	r4, [r3, #0]
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_InitTick+0x88>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	0019      	movs	r1, r3
 8001a7a:	23fa      	movs	r3, #250	; 0xfa
 8001a7c:	0098      	lsls	r0, r3, #2
 8001a7e:	f7fe fb53 	bl	8000128 <__udivsi3>
 8001a82:	0003      	movs	r3, r0
 8001a84:	0019      	movs	r1, r3
 8001a86:	0020      	movs	r0, r4
 8001a88:	f7fe fb4e 	bl	8000128 <__udivsi3>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 f93d 	bl	8001d0e <HAL_SYSTICK_Config>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d112      	bne.n	8001abe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d80a      	bhi.n	8001ab4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	425b      	negs	r3, r3
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f000 f90c 	bl	8001cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_InitTick+0x90>)
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	e00d      	b.n	8001ad0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001ab4:	230f      	movs	r3, #15
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e008      	b.n	8001ad0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001abe:	230f      	movs	r3, #15
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	e003      	b.n	8001ad0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ac8:	230f      	movs	r3, #15
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	781b      	ldrb	r3, [r3, #0]
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b005      	add	sp, #20
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	20000028 	.word	0x20000028
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000024 	.word	0x20000024

08001aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_IncTick+0x1c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	001a      	movs	r2, r3
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_IncTick+0x20>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	18d2      	adds	r2, r2, r3
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <HAL_IncTick+0x20>)
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	46c0      	nop			; (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	20000028 	.word	0x20000028
 8001b0c:	20000a94 	.word	0x20000a94

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <HAL_GetTick+0x10>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	20000a94 	.word	0x20000a94

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff fff0 	bl	8001b10 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	001a      	movs	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	189b      	adds	r3, r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	f7ff ffe0 	bl	8001b10 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	20000028 	.word	0x20000028

08001b6c <__NVIC_EnableIRQ>:
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	0002      	movs	r2, r0
 8001b74:	1dfb      	adds	r3, r7, #7
 8001b76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b78:	1dfb      	adds	r3, r7, #7
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b7e:	d809      	bhi.n	8001b94 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b80:	1dfb      	adds	r3, r7, #7
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	001a      	movs	r2, r3
 8001b86:	231f      	movs	r3, #31
 8001b88:	401a      	ands	r2, r3
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <__NVIC_EnableIRQ+0x30>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4091      	lsls	r1, r2
 8001b90:	000a      	movs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	e000e100 	.word	0xe000e100

08001ba0 <__NVIC_SetPriority>:
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8001bb4:	d828      	bhi.n	8001c08 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb6:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <__NVIC_SetPriority+0xd4>)
 8001bb8:	1dfb      	adds	r3, r7, #7
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	33c0      	adds	r3, #192	; 0xc0
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	589b      	ldr	r3, [r3, r2]
 8001bc6:	1dfa      	adds	r2, r7, #7
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	0011      	movs	r1, r2
 8001bcc:	2203      	movs	r2, #3
 8001bce:	400a      	ands	r2, r1
 8001bd0:	00d2      	lsls	r2, r2, #3
 8001bd2:	21ff      	movs	r1, #255	; 0xff
 8001bd4:	4091      	lsls	r1, r2
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	43d2      	mvns	r2, r2
 8001bda:	401a      	ands	r2, r3
 8001bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	019b      	lsls	r3, r3, #6
 8001be2:	22ff      	movs	r2, #255	; 0xff
 8001be4:	401a      	ands	r2, r3
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	0018      	movs	r0, r3
 8001bec:	2303      	movs	r3, #3
 8001bee:	4003      	ands	r3, r0
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf4:	481f      	ldr	r0, [pc, #124]	; (8001c74 <__NVIC_SetPriority+0xd4>)
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b25b      	sxtb	r3, r3
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	33c0      	adds	r3, #192	; 0xc0
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	501a      	str	r2, [r3, r0]
}
 8001c06:	e031      	b.n	8001c6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <__NVIC_SetPriority+0xd8>)
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	0019      	movs	r1, r3
 8001c10:	230f      	movs	r3, #15
 8001c12:	400b      	ands	r3, r1
 8001c14:	3b08      	subs	r3, #8
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3306      	adds	r3, #6
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	18d3      	adds	r3, r2, r3
 8001c1e:	3304      	adds	r3, #4
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	1dfa      	adds	r2, r7, #7
 8001c24:	7812      	ldrb	r2, [r2, #0]
 8001c26:	0011      	movs	r1, r2
 8001c28:	2203      	movs	r2, #3
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	00d2      	lsls	r2, r2, #3
 8001c2e:	21ff      	movs	r1, #255	; 0xff
 8001c30:	4091      	lsls	r1, r2
 8001c32:	000a      	movs	r2, r1
 8001c34:	43d2      	mvns	r2, r2
 8001c36:	401a      	ands	r2, r3
 8001c38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	019b      	lsls	r3, r3, #6
 8001c3e:	22ff      	movs	r2, #255	; 0xff
 8001c40:	401a      	ands	r2, r3
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	0018      	movs	r0, r3
 8001c48:	2303      	movs	r3, #3
 8001c4a:	4003      	ands	r3, r0
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c50:	4809      	ldr	r0, [pc, #36]	; (8001c78 <__NVIC_SetPriority+0xd8>)
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	001c      	movs	r4, r3
 8001c58:	230f      	movs	r3, #15
 8001c5a:	4023      	ands	r3, r4
 8001c5c:	3b08      	subs	r3, #8
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	430a      	orrs	r2, r1
 8001c62:	3306      	adds	r3, #6
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	18c3      	adds	r3, r0, r3
 8001c68:	3304      	adds	r3, #4
 8001c6a:	601a      	str	r2, [r3, #0]
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b003      	add	sp, #12
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	045b      	lsls	r3, r3, #17
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d301      	bcc.n	8001c94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c90:	2301      	movs	r3, #1
 8001c92:	e010      	b.n	8001cb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <SysTick_Config+0x44>)
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	425b      	negs	r3, r3
 8001ca0:	2103      	movs	r1, #3
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7ff ff7c 	bl	8001ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x44>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x44>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b002      	add	sp, #8
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	210f      	movs	r1, #15
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	1c02      	adds	r2, r0, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	0011      	movs	r1, r2
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7ff ff5d 	bl	8001ba0 <__NVIC_SetPriority>
}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b004      	add	sp, #16
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	1dfb      	adds	r3, r7, #7
 8001cf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7ff ff33 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b002      	add	sp, #8
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff ffaf 	bl	8001c7c <SysTick_Config>
 8001d1e:	0003      	movs	r3, r0
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e04f      	b.n	8001dda <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2225      	movs	r2, #37	; 0x25
 8001d3e:	5c9b      	ldrb	r3, [r3, r2]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d008      	beq.n	8001d58 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	; 0x24
 8001d50:	2100      	movs	r1, #0
 8001d52:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e040      	b.n	8001dda <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	210e      	movs	r1, #14
 8001d64:	438a      	bics	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d72:	491c      	ldr	r1, [pc, #112]	; (8001de4 <HAL_DMA_Abort+0xbc>)
 8001d74:	400a      	ands	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2101      	movs	r1, #1
 8001d84:	438a      	bics	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	221c      	movs	r2, #28
 8001d8e:	401a      	ands	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	2101      	movs	r1, #1
 8001d96:	4091      	lsls	r1, r2
 8001d98:	000a      	movs	r2, r1
 8001d9a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001da4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00c      	beq.n	8001dc8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	490a      	ldr	r1, [pc, #40]	; (8001de4 <HAL_DMA_Abort+0xbc>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001dc6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2225      	movs	r2, #37	; 0x25
 8001dcc:	2101      	movs	r1, #1
 8001dce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	fffffeff 	.word	0xfffffeff

08001de8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df0:	210f      	movs	r1, #15
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2225      	movs	r2, #37	; 0x25
 8001dfc:	5c9b      	ldrb	r3, [r3, r2]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d006      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2204      	movs	r2, #4
 8001e08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e048      	b.n	8001ea4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	210e      	movs	r1, #14
 8001e1e:	438a      	bics	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	438a      	bics	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3c:	491d      	ldr	r1, [pc, #116]	; (8001eb4 <HAL_DMA_Abort_IT+0xcc>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	221c      	movs	r2, #28
 8001e48:	401a      	ands	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4091      	lsls	r1, r2
 8001e52:	000a      	movs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e5e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00c      	beq.n	8001e82 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	4910      	ldr	r1, [pc, #64]	; (8001eb4 <HAL_DMA_Abort_IT+0xcc>)
 8001e74:	400a      	ands	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e80:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2225      	movs	r2, #37	; 0x25
 8001e86:	2101      	movs	r1, #1
 8001e88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2224      	movs	r2, #36	; 0x24
 8001e8e:	2100      	movs	r1, #0
 8001e90:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d004      	beq.n	8001ea4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	0010      	movs	r0, r2
 8001ea2:	4798      	blx	r3
    }
  }
  return status;
 8001ea4:	230f      	movs	r3, #15
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	781b      	ldrb	r3, [r3, #0]
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	fffffeff 	.word	0xfffffeff

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	e14d      	b.n	8002164 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4091      	lsls	r1, r2
 8001ed2:	000a      	movs	r2, r1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d100      	bne.n	8001ee0 <HAL_GPIO_Init+0x28>
 8001ede:	e13e      	b.n	800215e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d005      	beq.n	8001ef8 <HAL_GPIO_Init+0x40>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d130      	bne.n	8001f5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	409a      	lsls	r2, r3
 8001f06:	0013      	movs	r3, r2
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	0013      	movs	r3, r2
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f2e:	2201      	movs	r2, #1
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
 8001f34:	0013      	movs	r3, r2
 8001f36:	43da      	mvns	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	2201      	movs	r2, #1
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2203      	movs	r2, #3
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d017      	beq.n	8001f96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	409a      	lsls	r2, r3
 8001f74:	0013      	movs	r3, r2
 8001f76:	43da      	mvns	r2, r3
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	409a      	lsls	r2, r3
 8001f88:	0013      	movs	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d123      	bne.n	8001fea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	58d3      	ldr	r3, [r2, r3]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	220f      	movs	r2, #15
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2107      	movs	r1, #7
 8001fce:	400b      	ands	r3, r1
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	0013      	movs	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	08da      	lsrs	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3208      	adds	r2, #8
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	6939      	ldr	r1, [r7, #16]
 8001fe8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2203      	movs	r2, #3
 8002008:	401a      	ands	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	409a      	lsls	r2, r3
 8002010:	0013      	movs	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	23c0      	movs	r3, #192	; 0xc0
 8002024:	029b      	lsls	r3, r3, #10
 8002026:	4013      	ands	r3, r2
 8002028:	d100      	bne.n	800202c <HAL_GPIO_Init+0x174>
 800202a:	e098      	b.n	800215e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800202c:	4a53      	ldr	r2, [pc, #332]	; (800217c <HAL_GPIO_Init+0x2c4>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3318      	adds	r3, #24
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	589b      	ldr	r3, [r3, r2]
 8002038:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2203      	movs	r2, #3
 800203e:	4013      	ands	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	220f      	movs	r2, #15
 8002044:	409a      	lsls	r2, r3
 8002046:	0013      	movs	r3, r2
 8002048:	43da      	mvns	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	23a0      	movs	r3, #160	; 0xa0
 8002054:	05db      	lsls	r3, r3, #23
 8002056:	429a      	cmp	r2, r3
 8002058:	d019      	beq.n	800208e <HAL_GPIO_Init+0x1d6>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a48      	ldr	r2, [pc, #288]	; (8002180 <HAL_GPIO_Init+0x2c8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x1d2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a47      	ldr	r2, [pc, #284]	; (8002184 <HAL_GPIO_Init+0x2cc>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x1ce>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a46      	ldr	r2, [pc, #280]	; (8002188 <HAL_GPIO_Init+0x2d0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x1ca>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a45      	ldr	r2, [pc, #276]	; (800218c <HAL_GPIO_Init+0x2d4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x1c6>
 800207a:	2304      	movs	r3, #4
 800207c:	e008      	b.n	8002090 <HAL_GPIO_Init+0x1d8>
 800207e:	2305      	movs	r3, #5
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x1d8>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <HAL_GPIO_Init+0x1d8>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <HAL_GPIO_Init+0x1d8>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_GPIO_Init+0x1d8>
 800208e:	2300      	movs	r3, #0
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	2103      	movs	r1, #3
 8002094:	400a      	ands	r2, r1
 8002096:	00d2      	lsls	r2, r2, #3
 8002098:	4093      	lsls	r3, r2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80020a0:	4936      	ldr	r1, [pc, #216]	; (800217c <HAL_GPIO_Init+0x2c4>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3318      	adds	r3, #24
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ae:	4b33      	ldr	r3, [pc, #204]	; (800217c <HAL_GPIO_Init+0x2c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43da      	mvns	r2, r3
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	035b      	lsls	r3, r3, #13
 80020c6:	4013      	ands	r3, r2
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020d2:	4b2a      	ldr	r3, [pc, #168]	; (800217c <HAL_GPIO_Init+0x2c4>)
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80020d8:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_GPIO_Init+0x2c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	43da      	mvns	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	039b      	lsls	r3, r3, #14
 80020f0:	4013      	ands	r3, r2
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <HAL_GPIO_Init+0x2c4>)
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <HAL_GPIO_Init+0x2c4>)
 8002104:	2384      	movs	r3, #132	; 0x84
 8002106:	58d3      	ldr	r3, [r2, r3]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43da      	mvns	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	029b      	lsls	r3, r3, #10
 800211c:	4013      	ands	r3, r2
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002128:	4914      	ldr	r1, [pc, #80]	; (800217c <HAL_GPIO_Init+0x2c4>)
 800212a:	2284      	movs	r2, #132	; 0x84
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002130:	4a12      	ldr	r2, [pc, #72]	; (800217c <HAL_GPIO_Init+0x2c4>)
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	58d3      	ldr	r3, [r2, r3]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	43da      	mvns	r2, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4013      	ands	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	025b      	lsls	r3, r3, #9
 800214a:	4013      	ands	r3, r2
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002156:	4909      	ldr	r1, [pc, #36]	; (800217c <HAL_GPIO_Init+0x2c4>)
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	40da      	lsrs	r2, r3
 800216c:	1e13      	subs	r3, r2, #0
 800216e:	d000      	beq.n	8002172 <HAL_GPIO_Init+0x2ba>
 8002170:	e6aa      	b.n	8001ec8 <HAL_GPIO_Init+0x10>
  }
}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b006      	add	sp, #24
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021800 	.word	0x40021800
 8002180:	50000400 	.word	0x50000400
 8002184:	50000800 	.word	0x50000800
 8002188:	50000c00 	.word	0x50000c00
 800218c:	50001000 	.word	0x50001000

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	0008      	movs	r0, r1
 800219a:	0011      	movs	r1, r2
 800219c:	1cbb      	adds	r3, r7, #2
 800219e:	1c02      	adds	r2, r0, #0
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	1c7b      	adds	r3, r7, #1
 80021a4:	1c0a      	adds	r2, r1, #0
 80021a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a8:	1c7b      	adds	r3, r7, #1
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d004      	beq.n	80021ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b0:	1cbb      	adds	r3, r7, #2
 80021b2:	881a      	ldrh	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b8:	e003      	b.n	80021c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ba:	1cbb      	adds	r3, r7, #2
 80021bc:	881a      	ldrh	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b002      	add	sp, #8
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021da:	4013      	ands	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d11f      	bne.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	0013      	movs	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	189b      	adds	r3, r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4912      	ldr	r1, [pc, #72]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021fe:	0018      	movs	r0, r3
 8002200:	f7fd ff92 	bl	8000128 <__udivsi3>
 8002204:	0003      	movs	r3, r0
 8002206:	3301      	adds	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800220a:	e008      	b.n	800221e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3b01      	subs	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e001      	b.n	800221e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e009      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	401a      	ands	r2, r3
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	429a      	cmp	r2, r3
 800222e:	d0ed      	beq.n	800220c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b004      	add	sp, #16
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	40007000 	.word	0x40007000
 8002240:	fffff9ff 	.word	0xfffff9ff
 8002244:	20000000 	.word	0x20000000
 8002248:	000f4240 	.word	0x000f4240

0800224c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	23e0      	movs	r3, #224	; 0xe0
 8002256:	01db      	lsls	r3, r3, #7
 8002258:	4013      	ands	r3, r2
}
 800225a:	0018      	movs	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000

08002264 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	f000 fb50 	bl	8002918 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2201      	movs	r2, #1
 800227e:	4013      	ands	r3, r2
 8002280:	d100      	bne.n	8002284 <HAL_RCC_OscConfig+0x20>
 8002282:	e07c      	b.n	800237e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002284:	4bc3      	ldr	r3, [pc, #780]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2238      	movs	r2, #56	; 0x38
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800228e:	4bc1      	ldr	r3, [pc, #772]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2203      	movs	r2, #3
 8002294:	4013      	ands	r3, r2
 8002296:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b10      	cmp	r3, #16
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_OscConfig+0x40>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d002      	beq.n	80022aa <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d10b      	bne.n	80022c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022aa:	4bba      	ldr	r3, [pc, #744]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	029b      	lsls	r3, r3, #10
 80022b2:	4013      	ands	r3, r2
 80022b4:	d062      	beq.n	800237c <HAL_RCC_OscConfig+0x118>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d15e      	bne.n	800237c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e32a      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d107      	bne.n	80022de <HAL_RCC_OscConfig+0x7a>
 80022ce:	4bb1      	ldr	r3, [pc, #708]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4bb0      	ldr	r3, [pc, #704]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0249      	lsls	r1, r1, #9
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e020      	b.n	8002320 <HAL_RCC_OscConfig+0xbc>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	23a0      	movs	r3, #160	; 0xa0
 80022e4:	02db      	lsls	r3, r3, #11
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d10e      	bne.n	8002308 <HAL_RCC_OscConfig+0xa4>
 80022ea:	4baa      	ldr	r3, [pc, #680]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4ba9      	ldr	r3, [pc, #676]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022f0:	2180      	movs	r1, #128	; 0x80
 80022f2:	02c9      	lsls	r1, r1, #11
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	4ba6      	ldr	r3, [pc, #664]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4ba5      	ldr	r3, [pc, #660]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	0249      	lsls	r1, r1, #9
 8002302:	430a      	orrs	r2, r1
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0xbc>
 8002308:	4ba2      	ldr	r3, [pc, #648]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4ba1      	ldr	r3, [pc, #644]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800230e:	49a2      	ldr	r1, [pc, #648]	; (8002598 <HAL_RCC_OscConfig+0x334>)
 8002310:	400a      	ands	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	4b9f      	ldr	r3, [pc, #636]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b9e      	ldr	r3, [pc, #632]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800231a:	49a0      	ldr	r1, [pc, #640]	; (800259c <HAL_RCC_OscConfig+0x338>)
 800231c:	400a      	ands	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d014      	beq.n	8002352 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff fbf2 	bl	8001b10 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002332:	f7ff fbed 	bl	8001b10 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	; 0x64
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e2e9      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002344:	4b93      	ldr	r3, [pc, #588]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	4013      	ands	r3, r2
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0xce>
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7ff fbdd 	bl	8001b10 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff fbd8 	bl	8001b10 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e2d4      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236e:	4b89      	ldr	r3, [pc, #548]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	029b      	lsls	r3, r3, #10
 8002376:	4013      	ands	r3, r2
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0xf8>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2202      	movs	r2, #2
 8002384:	4013      	ands	r3, r2
 8002386:	d100      	bne.n	800238a <HAL_RCC_OscConfig+0x126>
 8002388:	e099      	b.n	80024be <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238a:	4b82      	ldr	r3, [pc, #520]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2238      	movs	r2, #56	; 0x38
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002394:	4b7f      	ldr	r3, [pc, #508]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2203      	movs	r2, #3
 800239a:	4013      	ands	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d102      	bne.n	80023aa <HAL_RCC_OscConfig+0x146>
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d002      	beq.n	80023b0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d135      	bne.n	800241c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b0:	4b78      	ldr	r3, [pc, #480]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4013      	ands	r3, r2
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_OscConfig+0x164>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e2a7      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b72      	ldr	r3, [pc, #456]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a74      	ldr	r2, [pc, #464]	; (80025a0 <HAL_RCC_OscConfig+0x33c>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	021a      	lsls	r2, r3, #8
 80023d8:	4b6e      	ldr	r3, [pc, #440]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d112      	bne.n	800240a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023e4:	4b6b      	ldr	r3, [pc, #428]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a6e      	ldr	r2, [pc, #440]	; (80025a4 <HAL_RCC_OscConfig+0x340>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023f8:	4b66      	ldr	r3, [pc, #408]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0adb      	lsrs	r3, r3, #11
 80023fe:	2207      	movs	r2, #7
 8002400:	4013      	ands	r3, r2
 8002402:	4a69      	ldr	r2, [pc, #420]	; (80025a8 <HAL_RCC_OscConfig+0x344>)
 8002404:	40da      	lsrs	r2, r3
 8002406:	4b69      	ldr	r3, [pc, #420]	; (80025ac <HAL_RCC_OscConfig+0x348>)
 8002408:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800240a:	4b69      	ldr	r3, [pc, #420]	; (80025b0 <HAL_RCC_OscConfig+0x34c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	0018      	movs	r0, r3
 8002410:	f7ff fb22 	bl	8001a58 <HAL_InitTick>
 8002414:	1e03      	subs	r3, r0, #0
 8002416:	d051      	beq.n	80024bc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e27d      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d030      	beq.n	8002486 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002424:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a5e      	ldr	r2, [pc, #376]	; (80025a4 <HAL_RCC_OscConfig+0x340>)
 800242a:	4013      	ands	r3, r2
 800242c:	0019      	movs	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	4b58      	ldr	r3, [pc, #352]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002438:	4b56      	ldr	r3, [pc, #344]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b55      	ldr	r3, [pc, #340]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0049      	lsls	r1, r1, #1
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7ff fb63 	bl	8001b10 <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002450:	f7ff fb5e 	bl	8001b10 <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e25a      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002462:	4b4c      	ldr	r3, [pc, #304]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4013      	ands	r3, r2
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246e:	4b49      	ldr	r3, [pc, #292]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a4b      	ldr	r2, [pc, #300]	; (80025a0 <HAL_RCC_OscConfig+0x33c>)
 8002474:	4013      	ands	r3, r2
 8002476:	0019      	movs	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	021a      	lsls	r2, r3, #8
 800247e:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	e01b      	b.n	80024be <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800248c:	4949      	ldr	r1, [pc, #292]	; (80025b4 <HAL_RCC_OscConfig+0x350>)
 800248e:	400a      	ands	r2, r1
 8002490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7ff fb3d 	bl	8001b10 <HAL_GetTick>
 8002496:	0003      	movs	r3, r0
 8002498:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249c:	f7ff fb38 	bl	8001b10 <HAL_GetTick>
 80024a0:	0002      	movs	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e234      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4013      	ands	r3, r2
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x238>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2208      	movs	r2, #8
 80024c4:	4013      	ands	r3, r2
 80024c6:	d047      	beq.n	8002558 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2238      	movs	r2, #56	; 0x38
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b18      	cmp	r3, #24
 80024d2:	d10a      	bne.n	80024ea <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024d4:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80024d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d8:	2202      	movs	r2, #2
 80024da:	4013      	ands	r3, r2
 80024dc:	d03c      	beq.n	8002558 <HAL_RCC_OscConfig+0x2f4>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d138      	bne.n	8002558 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e216      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d019      	beq.n	8002526 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024f2:	4b28      	ldr	r3, [pc, #160]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80024f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024f6:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 80024f8:	2101      	movs	r1, #1
 80024fa:	430a      	orrs	r2, r1
 80024fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7ff fb07 	bl	8001b10 <HAL_GetTick>
 8002502:	0003      	movs	r3, r0
 8002504:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002508:	f7ff fb02 	bl	8001b10 <HAL_GetTick>
 800250c:	0002      	movs	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1fe      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800251c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251e:	2202      	movs	r2, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d0f1      	beq.n	8002508 <HAL_RCC_OscConfig+0x2a4>
 8002524:	e018      	b.n	8002558 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002528:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800252c:	2101      	movs	r1, #1
 800252e:	438a      	bics	r2, r1
 8002530:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7ff faed 	bl	8001b10 <HAL_GetTick>
 8002536:	0003      	movs	r3, r0
 8002538:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7ff fae8 	bl	8001b10 <HAL_GetTick>
 8002540:	0002      	movs	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1e4      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	2202      	movs	r2, #2
 8002554:	4013      	ands	r3, r2
 8002556:	d1f1      	bne.n	800253c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2204      	movs	r2, #4
 800255e:	4013      	ands	r3, r2
 8002560:	d100      	bne.n	8002564 <HAL_RCC_OscConfig+0x300>
 8002562:	e0c7      	b.n	80026f4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002564:	231f      	movs	r3, #31
 8002566:	18fb      	adds	r3, r7, r3
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2238      	movs	r2, #56	; 0x38
 8002572:	4013      	ands	r3, r2
 8002574:	2b20      	cmp	r3, #32
 8002576:	d11f      	bne.n	80025b8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_OscConfig+0x330>)
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	2202      	movs	r2, #2
 800257e:	4013      	ands	r3, r2
 8002580:	d100      	bne.n	8002584 <HAL_RCC_OscConfig+0x320>
 8002582:	e0b7      	b.n	80026f4 <HAL_RCC_OscConfig+0x490>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d000      	beq.n	800258e <HAL_RCC_OscConfig+0x32a>
 800258c:	e0b2      	b.n	80026f4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1c2      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40021000 	.word	0x40021000
 8002598:	fffeffff 	.word	0xfffeffff
 800259c:	fffbffff 	.word	0xfffbffff
 80025a0:	ffff80ff 	.word	0xffff80ff
 80025a4:	ffffc7ff 	.word	0xffffc7ff
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20000024 	.word	0x20000024
 80025b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025b8:	4bb5      	ldr	r3, [pc, #724]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80025ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	4013      	ands	r3, r2
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_OscConfig+0x364>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x366>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d011      	beq.n	80025f2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	4bb0      	ldr	r3, [pc, #704]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80025d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025d2:	4baf      	ldr	r3, [pc, #700]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0549      	lsls	r1, r1, #21
 80025d8:	430a      	orrs	r2, r1
 80025da:	63da      	str	r2, [r3, #60]	; 0x3c
 80025dc:	4bac      	ldr	r3, [pc, #688]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80025de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	055b      	lsls	r3, r3, #21
 80025e4:	4013      	ands	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025ea:	231f      	movs	r3, #31
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f2:	4ba8      	ldr	r3, [pc, #672]	; (8002894 <HAL_RCC_OscConfig+0x630>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4013      	ands	r3, r2
 80025fc:	d11a      	bne.n	8002634 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025fe:	4ba5      	ldr	r3, [pc, #660]	; (8002894 <HAL_RCC_OscConfig+0x630>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4ba4      	ldr	r3, [pc, #656]	; (8002894 <HAL_RCC_OscConfig+0x630>)
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	0049      	lsls	r1, r1, #1
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800260c:	f7ff fa80 	bl	8001b10 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002616:	f7ff fa7b 	bl	8001b10 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e177      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002628:	4b9a      	ldr	r3, [pc, #616]	; (8002894 <HAL_RCC_OscConfig+0x630>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4013      	ands	r3, r2
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x3e6>
 800263c:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800263e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002640:	4b93      	ldr	r3, [pc, #588]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002642:	2101      	movs	r1, #1
 8002644:	430a      	orrs	r2, r1
 8002646:	65da      	str	r2, [r3, #92]	; 0x5c
 8002648:	e01c      	b.n	8002684 <HAL_RCC_OscConfig+0x420>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b05      	cmp	r3, #5
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x408>
 8002652:	4b8f      	ldr	r3, [pc, #572]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002654:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002656:	4b8e      	ldr	r3, [pc, #568]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002658:	2104      	movs	r1, #4
 800265a:	430a      	orrs	r2, r1
 800265c:	65da      	str	r2, [r3, #92]	; 0x5c
 800265e:	4b8c      	ldr	r3, [pc, #560]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002662:	4b8b      	ldr	r3, [pc, #556]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002664:	2101      	movs	r1, #1
 8002666:	430a      	orrs	r2, r1
 8002668:	65da      	str	r2, [r3, #92]	; 0x5c
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0x420>
 800266c:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800266e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002670:	4b87      	ldr	r3, [pc, #540]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002672:	2101      	movs	r1, #1
 8002674:	438a      	bics	r2, r1
 8002676:	65da      	str	r2, [r3, #92]	; 0x5c
 8002678:	4b85      	ldr	r3, [pc, #532]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800267a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800267c:	4b84      	ldr	r3, [pc, #528]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800267e:	2104      	movs	r1, #4
 8002680:	438a      	bics	r2, r1
 8002682:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d014      	beq.n	80026b6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7ff fa40 	bl	8001b10 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002694:	e009      	b.n	80026aa <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7ff fa3b 	bl	8001b10 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	4a7d      	ldr	r2, [pc, #500]	; (8002898 <HAL_RCC_OscConfig+0x634>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e136      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026aa:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2202      	movs	r2, #2
 80026b0:	4013      	ands	r3, r2
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x432>
 80026b4:	e013      	b.n	80026de <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7ff fa2b 	bl	8001b10 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026be:	e009      	b.n	80026d4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7ff fa26 	bl	8001b10 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	4a73      	ldr	r2, [pc, #460]	; (8002898 <HAL_RCC_OscConfig+0x634>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e121      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d4:	4b6e      	ldr	r3, [pc, #440]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d8:	2202      	movs	r2, #2
 80026da:	4013      	ands	r3, r2
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026de:	231f      	movs	r3, #31
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026e8:	4b69      	ldr	r3, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80026ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ec:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80026ee:	496b      	ldr	r1, [pc, #428]	; (800289c <HAL_RCC_OscConfig+0x638>)
 80026f0:	400a      	ands	r2, r1
 80026f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2220      	movs	r2, #32
 80026fa:	4013      	ands	r3, r2
 80026fc:	d039      	beq.n	8002772 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01b      	beq.n	800273e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002706:	4b62      	ldr	r3, [pc, #392]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b61      	ldr	r3, [pc, #388]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	03c9      	lsls	r1, r1, #15
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7ff f9fc 	bl	8001b10 <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800271e:	f7ff f9f7 	bl	8001b10 <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0f3      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002730:	4b57      	ldr	r3, [pc, #348]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	4013      	ands	r3, r2
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x4ba>
 800273c:	e019      	b.n	8002772 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002744:	4956      	ldr	r1, [pc, #344]	; (80028a0 <HAL_RCC_OscConfig+0x63c>)
 8002746:	400a      	ands	r2, r1
 8002748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7ff f9e1 	bl	8001b10 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002754:	f7ff f9dc 	bl	8001b10 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0d8      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002766:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	4013      	ands	r3, r2
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d100      	bne.n	800277c <HAL_RCC_OscConfig+0x518>
 800277a:	e0cc      	b.n	8002916 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800277c:	4b44      	ldr	r3, [pc, #272]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2238      	movs	r2, #56	; 0x38
 8002782:	4013      	ands	r3, r2
 8002784:	2b10      	cmp	r3, #16
 8002786:	d100      	bne.n	800278a <HAL_RCC_OscConfig+0x526>
 8002788:	e07b      	b.n	8002882 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d156      	bne.n	8002840 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002798:	4942      	ldr	r1, [pc, #264]	; (80028a4 <HAL_RCC_OscConfig+0x640>)
 800279a:	400a      	ands	r2, r1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7ff f9b7 	bl	8001b10 <HAL_GetTick>
 80027a2:	0003      	movs	r3, r0
 80027a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7ff f9b2 	bl	8001b10 <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0ae      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ba:	4b35      	ldr	r3, [pc, #212]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	049b      	lsls	r3, r3, #18
 80027c2:	4013      	ands	r3, r2
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c6:	4b32      	ldr	r3, [pc, #200]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4a37      	ldr	r2, [pc, #220]	; (80028a8 <HAL_RCC_OscConfig+0x644>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	0019      	movs	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	431a      	orrs	r2, r3
 80027f4:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80027f6:	430a      	orrs	r2, r1
 80027f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	0449      	lsls	r1, r1, #17
 8002804:	430a      	orrs	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	0549      	lsls	r1, r1, #21
 8002812:	430a      	orrs	r2, r1
 8002814:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7ff f97b 	bl	8001b10 <HAL_GetTick>
 800281a:	0003      	movs	r3, r0
 800281c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7ff f976 	bl	8001b10 <HAL_GetTick>
 8002824:	0002      	movs	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e072      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	049b      	lsls	r3, r3, #18
 800283a:	4013      	ands	r3, r2
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x5bc>
 800283e:	e06a      	b.n	8002916 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002846:	4917      	ldr	r1, [pc, #92]	; (80028a4 <HAL_RCC_OscConfig+0x640>)
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7ff f960 	bl	8001b10 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002856:	f7ff f95b 	bl	8001b10 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e057      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	049b      	lsls	r3, r3, #18
 8002870:	4013      	ands	r3, r2
 8002872:	d1f0      	bne.n	8002856 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_OscConfig+0x62c>)
 800287a:	490c      	ldr	r1, [pc, #48]	; (80028ac <HAL_RCC_OscConfig+0x648>)
 800287c:	400a      	ands	r2, r1
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	e049      	b.n	8002916 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d112      	bne.n	80028b0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e044      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
 8002898:	00001388 	.word	0x00001388
 800289c:	efffffff 	.word	0xefffffff
 80028a0:	ffbfffff 	.word	0xffbfffff
 80028a4:	feffffff 	.word	0xfeffffff
 80028a8:	11c1808c 	.word	0x11c1808c
 80028ac:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x6bc>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2203      	movs	r2, #3
 80028ba:	401a      	ands	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d126      	bne.n	8002912 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2270      	movs	r2, #112	; 0x70
 80028c8:	401a      	ands	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d11f      	bne.n	8002912 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	23fe      	movs	r3, #254	; 0xfe
 80028d6:	01db      	lsls	r3, r3, #7
 80028d8:	401a      	ands	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d116      	bne.n	8002912 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	23f8      	movs	r3, #248	; 0xf8
 80028e8:	039b      	lsls	r3, r3, #14
 80028ea:	401a      	ands	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d10e      	bne.n	8002912 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	23e0      	movs	r3, #224	; 0xe0
 80028f8:	051b      	lsls	r3, r3, #20
 80028fa:	401a      	ands	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d106      	bne.n	8002912 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	0f5b      	lsrs	r3, r3, #29
 8002908:	075a      	lsls	r2, r3, #29
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800290e:	429a      	cmp	r2, r3
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b008      	add	sp, #32
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0e9      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b76      	ldr	r3, [pc, #472]	; (8002b14 <HAL_RCC_ClockConfig+0x1f0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2207      	movs	r2, #7
 800293e:	4013      	ands	r3, r2
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d91e      	bls.n	8002984 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCC_ClockConfig+0x1f0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2207      	movs	r2, #7
 800294c:	4393      	bics	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	4b70      	ldr	r3, [pc, #448]	; (8002b14 <HAL_RCC_ClockConfig+0x1f0>)
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002958:	f7ff f8da 	bl	8001b10 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002960:	e009      	b.n	8002976 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002962:	f7ff f8d5 	bl	8001b10 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	4a6a      	ldr	r2, [pc, #424]	; (8002b18 <HAL_RCC_ClockConfig+0x1f4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0ca      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002976:	4b67      	ldr	r3, [pc, #412]	; (8002b14 <HAL_RCC_ClockConfig+0x1f0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2207      	movs	r2, #7
 800297c:	4013      	ands	r3, r2
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d1ee      	bne.n	8002962 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2202      	movs	r2, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d015      	beq.n	80029ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2204      	movs	r2, #4
 8002994:	4013      	ands	r3, r2
 8002996:	d006      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002998:	4b60      	ldr	r3, [pc, #384]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	4b5f      	ldr	r3, [pc, #380]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 800299e:	21e0      	movs	r1, #224	; 0xe0
 80029a0:	01c9      	lsls	r1, r1, #7
 80029a2:	430a      	orrs	r2, r1
 80029a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a6:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	4a5d      	ldr	r2, [pc, #372]	; (8002b20 <HAL_RCC_ClockConfig+0x1fc>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 80029b6:	430a      	orrs	r2, r1
 80029b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2201      	movs	r2, #1
 80029c0:	4013      	ands	r3, r2
 80029c2:	d057      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029cc:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	029b      	lsls	r3, r3, #10
 80029d4:	4013      	ands	r3, r2
 80029d6:	d12b      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e097      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d107      	bne.n	80029f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e4:	4b4d      	ldr	r3, [pc, #308]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	049b      	lsls	r3, r3, #18
 80029ec:	4013      	ands	r3, r2
 80029ee:	d11f      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e08b      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d107      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029fc:	4b47      	ldr	r3, [pc, #284]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4013      	ands	r3, r2
 8002a06:	d113      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e07f      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a14:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 8002a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d108      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e074      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a22:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	2202      	movs	r2, #2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e06d      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a30:	4b3a      	ldr	r3, [pc, #232]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2207      	movs	r2, #7
 8002a36:	4393      	bics	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a44:	f7ff f864 	bl	8001b10 <HAL_GetTick>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4c:	e009      	b.n	8002a62 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4e:	f7ff f85f 	bl	8001b10 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	4a2f      	ldr	r2, [pc, #188]	; (8002b18 <HAL_RCC_ClockConfig+0x1f4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e054      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2238      	movs	r2, #56	; 0x38
 8002a68:	401a      	ands	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1ec      	bne.n	8002a4e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2207      	movs	r2, #7
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d21e      	bcs.n	8002ac0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2207      	movs	r2, #7
 8002a88:	4393      	bics	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a94:	f7ff f83c 	bl	8001b10 <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a9c:	e009      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9e:	f7ff f837 	bl	8001b10 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	4a1b      	ldr	r2, [pc, #108]	; (8002b18 <HAL_RCC_ClockConfig+0x1f4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e02c      	b.n	8002b0c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ab2:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	4013      	ands	r3, r2
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d1ee      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <HAL_RCC_ClockConfig+0x200>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ade:	f000 f829 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002ae2:	0001      	movs	r1, r0
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_RCC_ClockConfig+0x1f8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	220f      	movs	r2, #15
 8002aec:	401a      	ands	r2, r3
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_RCC_ClockConfig+0x204>)
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	58d3      	ldr	r3, [r2, r3]
 8002af4:	221f      	movs	r2, #31
 8002af6:	4013      	ands	r3, r2
 8002af8:	000a      	movs	r2, r1
 8002afa:	40da      	lsrs	r2, r3
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_ClockConfig+0x208>)
 8002afe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x20c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7fe ffa7 	bl	8001a58 <HAL_InitTick>
 8002b0a:	0003      	movs	r3, r0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40022000 	.word	0x40022000
 8002b18:	00001388 	.word	0x00001388
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	fffff0ff 	.word	0xfffff0ff
 8002b24:	ffff8fff 	.word	0xffff8fff
 8002b28:	0800605c 	.word	0x0800605c
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000024 	.word	0x20000024

08002b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b3a:	4b3c      	ldr	r3, [pc, #240]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2238      	movs	r2, #56	; 0x38
 8002b40:	4013      	ands	r3, r2
 8002b42:	d10f      	bne.n	8002b64 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b44:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0adb      	lsrs	r3, r3, #11
 8002b4a:	2207      	movs	r2, #7
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2201      	movs	r2, #1
 8002b50:	409a      	lsls	r2, r3
 8002b52:	0013      	movs	r3, r2
 8002b54:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b56:	6839      	ldr	r1, [r7, #0]
 8002b58:	4835      	ldr	r0, [pc, #212]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b5a:	f7fd fae5 	bl	8000128 <__udivsi3>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e05d      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2238      	movs	r2, #56	; 0x38
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d102      	bne.n	8002b76 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	e054      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b76:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2238      	movs	r2, #56	; 0x38
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d138      	bne.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b82:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2203      	movs	r2, #3
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b8c:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	2207      	movs	r2, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	3301      	adds	r3, #1
 8002b98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d10d      	bne.n	8002bbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ba0:	68b9      	ldr	r1, [r7, #8]
 8002ba2:	4824      	ldr	r0, [pc, #144]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ba4:	f7fd fac0 	bl	8000128 <__udivsi3>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	0019      	movs	r1, r3
 8002bac:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	227f      	movs	r2, #127	; 0x7f
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	434b      	muls	r3, r1
 8002bb8:	617b      	str	r3, [r7, #20]
        break;
 8002bba:	e00d      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	481c      	ldr	r0, [pc, #112]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bc0:	f7fd fab2 	bl	8000128 <__udivsi3>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	227f      	movs	r2, #127	; 0x7f
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	434b      	muls	r3, r1
 8002bd4:	617b      	str	r3, [r7, #20]
        break;
 8002bd6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	0f5b      	lsrs	r3, r3, #29
 8002bde:	2207      	movs	r2, #7
 8002be0:	4013      	ands	r3, r2
 8002be2:	3301      	adds	r3, #1
 8002be4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	6978      	ldr	r0, [r7, #20]
 8002bea:	f7fd fa9d 	bl	8000128 <__udivsi3>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	e015      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2238      	movs	r2, #56	; 0x38
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d103      	bne.n	8002c08 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c08:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2238      	movs	r2, #56	; 0x38
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b18      	cmp	r3, #24
 8002c12:	d103      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c14:	23fa      	movs	r3, #250	; 0xfa
 8002c16:	01db      	lsls	r3, r3, #7
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	e001      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c20:	693b      	ldr	r3, [r7, #16]
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b006      	add	sp, #24
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	00f42400 	.word	0x00f42400
 8002c34:	007a1200 	.word	0x007a1200

08002c38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c3c:	4b02      	ldr	r3, [pc, #8]	; (8002c48 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	20000000 	.word	0x20000000

08002c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c4c:	b5b0      	push	{r4, r5, r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c50:	f7ff fff2 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 8002c54:	0004      	movs	r4, r0
 8002c56:	f7ff faf9 	bl	800224c <LL_RCC_GetAPB1Prescaler>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	0b1a      	lsrs	r2, r3, #12
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c60:	0092      	lsls	r2, r2, #2
 8002c62:	58d3      	ldr	r3, [r2, r3]
 8002c64:	221f      	movs	r2, #31
 8002c66:	4013      	ands	r3, r2
 8002c68:	40dc      	lsrs	r4, r3
 8002c6a:	0023      	movs	r3, r4
}
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bdb0      	pop	{r4, r5, r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	0800609c 	.word	0x0800609c

08002c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c80:	2313      	movs	r3, #19
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c88:	2312      	movs	r3, #18
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c9c:	e0ad      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9e:	2011      	movs	r0, #17
 8002ca0:	183b      	adds	r3, r7, r0
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	055b      	lsls	r3, r3, #21
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d110      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb6:	4b43      	ldr	r3, [pc, #268]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	0549      	lsls	r1, r1, #21
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cc0:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	055b      	lsls	r3, r3, #21
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cce:	183b      	adds	r3, r7, r0
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cd4:	4b3c      	ldr	r3, [pc, #240]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	0049      	lsls	r1, r1, #1
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ce2:	f7fe ff15 	bl	8001b10 <HAL_GetTick>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cea:	e00b      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7fe ff10 	bl	8001b10 <HAL_GetTick>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d904      	bls.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002cfa:	2313      	movs	r3, #19
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	2203      	movs	r2, #3
 8002d00:	701a      	strb	r2, [r3, #0]
        break;
 8002d02:	e005      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d04:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d0ed      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d10:	2313      	movs	r3, #19
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d15e      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d1e:	23c0      	movs	r3, #192	; 0xc0
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4013      	ands	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d019      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d014      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3a:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d40:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d44:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d46:	2180      	movs	r1, #128	; 0x80
 8002d48:	0249      	lsls	r1, r1, #9
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d52:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d54:	491e      	ldr	r1, [pc, #120]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2201      	movs	r2, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d016      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe fed2 	bl	8001b10 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d70:	e00c      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d72:	f7fe fecd 	bl	8001b10 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d904      	bls.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d82:	2313      	movs	r3, #19
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2203      	movs	r2, #3
 8002d88:	701a      	strb	r2, [r3, #0]
            break;
 8002d8a:	e004      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	2202      	movs	r2, #2
 8002d92:	4013      	ands	r3, r2
 8002d94:	d0ed      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d96:	2313      	movs	r3, #19
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db4:	e016      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002db6:	2312      	movs	r3, #18
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2213      	movs	r2, #19
 8002dbc:	18ba      	adds	r2, r7, r2
 8002dbe:	7812      	ldrb	r2, [r2, #0]
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e00f      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	fffffcff 	.word	0xfffffcff
 8002dd0:	fffeffff 	.word	0xfffeffff
 8002dd4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd8:	2312      	movs	r3, #18
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2213      	movs	r2, #19
 8002dde:	18ba      	adds	r2, r7, r2
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002de4:	2311      	movs	r3, #17
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4bb6      	ldr	r3, [pc, #728]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df2:	4bb5      	ldr	r3, [pc, #724]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002df4:	49b5      	ldr	r1, [pc, #724]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002df6:	400a      	ands	r2, r1
 8002df8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4013      	ands	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e04:	4bb0      	ldr	r3, [pc, #704]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	2203      	movs	r2, #3
 8002e0a:	4393      	bics	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4bad      	ldr	r3, [pc, #692]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e14:	430a      	orrs	r2, r1
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e22:	4ba9      	ldr	r3, [pc, #676]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	220c      	movs	r2, #12
 8002e28:	4393      	bics	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	4ba5      	ldr	r3, [pc, #660]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e32:	430a      	orrs	r2, r1
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e40:	4ba1      	ldr	r3, [pc, #644]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	2230      	movs	r2, #48	; 0x30
 8002e46:	4393      	bics	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	4b9e      	ldr	r3, [pc, #632]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e50:	430a      	orrs	r2, r1
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e5e:	4b9a      	ldr	r3, [pc, #616]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	4a9b      	ldr	r2, [pc, #620]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	4b96      	ldr	r3, [pc, #600]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	015b      	lsls	r3, r3, #5
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002e7e:	4b92      	ldr	r3, [pc, #584]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	4a94      	ldr	r2, [pc, #592]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d009      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9e:	4b8a      	ldr	r3, [pc, #552]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	4a8d      	ldr	r2, [pc, #564]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eac:	4b86      	ldr	r3, [pc, #536]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ebe:	4b82      	ldr	r3, [pc, #520]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	4a86      	ldr	r2, [pc, #536]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	4b7e      	ldr	r3, [pc, #504]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002edc:	4b7a      	ldr	r3, [pc, #488]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee0:	4a7f      	ldr	r2, [pc, #508]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	4b77      	ldr	r3, [pc, #476]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eec:	430a      	orrs	r2, r1
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2240      	movs	r2, #64	; 0x40
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002efa:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	4a79      	ldr	r2, [pc, #484]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	4b6f      	ldr	r3, [pc, #444]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	01db      	lsls	r3, r3, #7
 8002f16:	4013      	ands	r3, r2
 8002f18:	d015      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f1a:	4b6b      	ldr	r3, [pc, #428]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	0899      	lsrs	r1, r3, #2
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f26:	4b68      	ldr	r3, [pc, #416]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	05db      	lsls	r3, r3, #23
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d106      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f38:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f3e:	2180      	movs	r1, #128	; 0x80
 8002f40:	0249      	lsls	r1, r1, #9
 8002f42:	430a      	orrs	r2, r1
 8002f44:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	031b      	lsls	r3, r3, #12
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d009      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f52:	4b5d      	ldr	r3, [pc, #372]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	4393      	bics	r3, r2
 8002f5a:	0019      	movs	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f62:	430a      	orrs	r2, r1
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	039b      	lsls	r3, r3, #14
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d016      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f72:	4b55      	ldr	r3, [pc, #340]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	4a5c      	ldr	r2, [pc, #368]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f80:	4b51      	ldr	r3, [pc, #324]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	03db      	lsls	r3, r3, #15
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d106      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f92:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b4c      	ldr	r3, [pc, #304]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0449      	lsls	r1, r1, #17
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	03db      	lsls	r3, r3, #15
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d016      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fac:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	4a4e      	ldr	r2, [pc, #312]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fba:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	045b      	lsls	r3, r3, #17
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d106      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fcc:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	0449      	lsls	r1, r1, #17
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d014      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002fe6:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fea:	2203      	movs	r2, #3
 8002fec:	4393      	bics	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1a      	ldr	r2, [r3, #32]
 8002ff4:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d106      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003002:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003008:	2180      	movs	r1, #128	; 0x80
 800300a:	0249      	lsls	r1, r1, #9
 800300c:	430a      	orrs	r2, r1
 800300e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	4013      	ands	r3, r2
 800301a:	d014      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800301c:	4b2a      	ldr	r3, [pc, #168]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	220c      	movs	r2, #12
 8003022:	4393      	bics	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800302c:	430a      	orrs	r2, r1
 800302e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	2b04      	cmp	r3, #4
 8003036:	d106      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003038:	4b23      	ldr	r3, [pc, #140]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	0249      	lsls	r1, r1, #9
 8003042:	430a      	orrs	r2, r1
 8003044:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	045b      	lsls	r3, r3, #17
 800304e:	4013      	ands	r3, r2
 8003050:	d016      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003052:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003058:	4013      	ands	r3, r2
 800305a:	0019      	movs	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003062:	430a      	orrs	r2, r1
 8003064:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	429a      	cmp	r2, r3
 8003070:	d106      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003078:	2180      	movs	r1, #128	; 0x80
 800307a:	0449      	lsls	r1, r1, #17
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2380      	movs	r3, #128	; 0x80
 8003086:	049b      	lsls	r3, r3, #18
 8003088:	4013      	ands	r3, r2
 800308a:	d016      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	4a10      	ldr	r2, [pc, #64]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800309c:	430a      	orrs	r2, r1
 800309e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d106      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	0449      	lsls	r1, r1, #17
 80030b6:	430a      	orrs	r2, r1
 80030b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80030ba:	2312      	movs	r3, #18
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	781b      	ldrb	r3, [r3, #0]
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b006      	add	sp, #24
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	efffffff 	.word	0xefffffff
 80030d0:	fffff3ff 	.word	0xfffff3ff
 80030d4:	fffffcff 	.word	0xfffffcff
 80030d8:	fff3ffff 	.word	0xfff3ffff
 80030dc:	ffcfffff 	.word	0xffcfffff
 80030e0:	ffffcfff 	.word	0xffffcfff
 80030e4:	ffff3fff 	.word	0xffff3fff
 80030e8:	ffbfffff 	.word	0xffbfffff
 80030ec:	feffffff 	.word	0xfeffffff

080030f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e046      	b.n	8003190 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2288      	movs	r2, #136	; 0x88
 8003106:	589b      	ldr	r3, [r3, r2]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2284      	movs	r2, #132	; 0x84
 8003110:	2100      	movs	r1, #0
 8003112:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	0018      	movs	r0, r3
 8003118:	f7fd fad4 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2288      	movs	r2, #136	; 0x88
 8003120:	2124      	movs	r1, #36	; 0x24
 8003122:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	438a      	bics	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	0018      	movs	r0, r3
 8003140:	f000 ffd6 	bl	80040f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	0018      	movs	r0, r3
 8003148:	f000 fc7c 	bl	8003a44 <UART_SetConfig>
 800314c:	0003      	movs	r3, r0
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e01c      	b.n	8003190 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	490d      	ldr	r1, [pc, #52]	; (8003198 <HAL_UART_Init+0xa8>)
 8003162:	400a      	ands	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	212a      	movs	r1, #42	; 0x2a
 8003172:	438a      	bics	r2, r1
 8003174:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f001 f865 	bl	8004258 <UART_CheckIdleState>
 800318e:	0003      	movs	r3, r0
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}
 8003198:	ffffb7ff 	.word	0xffffb7ff

0800319c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	; 0x28
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	1dbb      	adds	r3, r7, #6
 80031aa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2288      	movs	r2, #136	; 0x88
 80031b0:	589b      	ldr	r3, [r3, r2]
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d000      	beq.n	80031b8 <HAL_UART_Transmit+0x1c>
 80031b6:	e090      	b.n	80032da <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_UART_Transmit+0x2a>
 80031be:	1dbb      	adds	r3, r7, #6
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e088      	b.n	80032dc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	015b      	lsls	r3, r3, #5
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d109      	bne.n	80031ea <HAL_UART_Transmit+0x4e>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d105      	bne.n	80031ea <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2201      	movs	r2, #1
 80031e2:	4013      	ands	r3, r2
 80031e4:	d001      	beq.n	80031ea <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e078      	b.n	80032dc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2290      	movs	r2, #144	; 0x90
 80031ee:	2100      	movs	r1, #0
 80031f0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2288      	movs	r2, #136	; 0x88
 80031f6:	2121      	movs	r1, #33	; 0x21
 80031f8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031fa:	f7fe fc89 	bl	8001b10 <HAL_GetTick>
 80031fe:	0003      	movs	r3, r0
 8003200:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1dba      	adds	r2, r7, #6
 8003206:	2154      	movs	r1, #84	; 0x54
 8003208:	8812      	ldrh	r2, [r2, #0]
 800320a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1dba      	adds	r2, r7, #6
 8003210:	2156      	movs	r1, #86	; 0x56
 8003212:	8812      	ldrh	r2, [r2, #0]
 8003214:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	015b      	lsls	r3, r3, #5
 800321e:	429a      	cmp	r2, r3
 8003220:	d108      	bne.n	8003234 <HAL_UART_Transmit+0x98>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d104      	bne.n	8003234 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	e003      	b.n	800323c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800323c:	e030      	b.n	80032a0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	0013      	movs	r3, r2
 8003248:	2200      	movs	r2, #0
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	f001 f8ae 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 8003250:	1e03      	subs	r3, r0, #0
 8003252:	d005      	beq.n	8003260 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2288      	movs	r2, #136	; 0x88
 8003258:	2120      	movs	r1, #32
 800325a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e03d      	b.n	80032dc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10b      	bne.n	800327e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	001a      	movs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	05d2      	lsls	r2, r2, #23
 8003272:	0dd2      	lsrs	r2, r2, #23
 8003274:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	3302      	adds	r3, #2
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	e007      	b.n	800328e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	781a      	ldrb	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	3301      	adds	r3, #1
 800328c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2256      	movs	r2, #86	; 0x56
 8003292:	5a9b      	ldrh	r3, [r3, r2]
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b299      	uxth	r1, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2256      	movs	r2, #86	; 0x56
 800329e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2256      	movs	r2, #86	; 0x56
 80032a4:	5a9b      	ldrh	r3, [r3, r2]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1c8      	bne.n	800323e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	0013      	movs	r3, r2
 80032b6:	2200      	movs	r2, #0
 80032b8:	2140      	movs	r1, #64	; 0x40
 80032ba:	f001 f877 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d005      	beq.n	80032ce <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2288      	movs	r2, #136	; 0x88
 80032c6:	2120      	movs	r1, #32
 80032c8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e006      	b.n	80032dc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2288      	movs	r2, #136	; 0x88
 80032d2:	2120      	movs	r1, #32
 80032d4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
  }
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b008      	add	sp, #32
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	1dbb      	adds	r3, r7, #6
 80032f0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	228c      	movs	r2, #140	; 0x8c
 80032f6:	589b      	ldr	r3, [r3, r2]
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d14f      	bne.n	800339c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_UART_Receive_IT+0x26>
 8003302:	1dbb      	adds	r3, r7, #6
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e047      	b.n	800339e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	015b      	lsls	r3, r3, #5
 8003316:	429a      	cmp	r2, r3
 8003318:	d109      	bne.n	800332e <HAL_UART_Receive_IT+0x4a>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d105      	bne.n	800332e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2201      	movs	r2, #1
 8003326:	4013      	ands	r3, r2
 8003328:	d001      	beq.n	800332e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e037      	b.n	800339e <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <HAL_UART_Receive_IT+0xc4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d025      	beq.n	800338a <HAL_UART_Receive_IT+0xa6>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_UART_Receive_IT+0xc8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d020      	beq.n	800338a <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	041b      	lsls	r3, r3, #16
 8003352:	4013      	ands	r3, r2
 8003354:	d019      	beq.n	800338a <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003356:	f3ef 8310 	mrs	r3, PRIMASK
 800335a:	613b      	str	r3, [r7, #16]
  return(result);
 800335c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	2301      	movs	r3, #1
 8003362:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	04c9      	lsls	r1, r1, #19
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800338a:	1dbb      	adds	r3, r7, #6
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	0018      	movs	r0, r3
 8003394:	f001 f87a 	bl	800448c <UART_Start_Receive_IT>
 8003398:	0003      	movs	r3, r0
 800339a:	e000      	b.n	800339e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b008      	add	sp, #32
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	40008000 	.word	0x40008000
 80033ac:	40008400 	.word	0x40008400

080033b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033b0:	b5b0      	push	{r4, r5, r7, lr}
 80033b2:	b0aa      	sub	sp, #168	; 0xa8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	22a4      	movs	r2, #164	; 0xa4
 80033c0:	18b9      	adds	r1, r7, r2
 80033c2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	20a0      	movs	r0, #160	; 0xa0
 80033cc:	1839      	adds	r1, r7, r0
 80033ce:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	249c      	movs	r4, #156	; 0x9c
 80033d8:	1939      	adds	r1, r7, r4
 80033da:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80033dc:	0011      	movs	r1, r2
 80033de:	18bb      	adds	r3, r7, r2
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4aa2      	ldr	r2, [pc, #648]	; (800366c <HAL_UART_IRQHandler+0x2bc>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	2298      	movs	r2, #152	; 0x98
 80033e8:	18bd      	adds	r5, r7, r2
 80033ea:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80033ec:	18bb      	adds	r3, r7, r2
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11a      	bne.n	800342a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2220      	movs	r2, #32
 80033fa:	4013      	ands	r3, r2
 80033fc:	d015      	beq.n	800342a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80033fe:	183b      	adds	r3, r7, r0
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2220      	movs	r2, #32
 8003404:	4013      	ands	r3, r2
 8003406:	d105      	bne.n	8003414 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003408:	193b      	adds	r3, r7, r4
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	055b      	lsls	r3, r3, #21
 8003410:	4013      	ands	r3, r2
 8003412:	d00a      	beq.n	800342a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	2b00      	cmp	r3, #0
 800341a:	d100      	bne.n	800341e <HAL_UART_IRQHandler+0x6e>
 800341c:	e2dc      	b.n	80039d8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	0010      	movs	r0, r2
 8003426:	4798      	blx	r3
      }
      return;
 8003428:	e2d6      	b.n	80039d8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800342a:	2398      	movs	r3, #152	; 0x98
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d100      	bne.n	8003436 <HAL_UART_IRQHandler+0x86>
 8003434:	e122      	b.n	800367c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003436:	239c      	movs	r3, #156	; 0x9c
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a8c      	ldr	r2, [pc, #560]	; (8003670 <HAL_UART_IRQHandler+0x2c0>)
 800343e:	4013      	ands	r3, r2
 8003440:	d106      	bne.n	8003450 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003442:	23a0      	movs	r3, #160	; 0xa0
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a8a      	ldr	r2, [pc, #552]	; (8003674 <HAL_UART_IRQHandler+0x2c4>)
 800344a:	4013      	ands	r3, r2
 800344c:	d100      	bne.n	8003450 <HAL_UART_IRQHandler+0xa0>
 800344e:	e115      	b.n	800367c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003450:	23a4      	movs	r3, #164	; 0xa4
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2201      	movs	r2, #1
 8003458:	4013      	ands	r3, r2
 800345a:	d012      	beq.n	8003482 <HAL_UART_IRQHandler+0xd2>
 800345c:	23a0      	movs	r3, #160	; 0xa0
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4013      	ands	r3, r2
 8003468:	d00b      	beq.n	8003482 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2201      	movs	r2, #1
 8003470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2290      	movs	r2, #144	; 0x90
 8003476:	589b      	ldr	r3, [r3, r2]
 8003478:	2201      	movs	r2, #1
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2190      	movs	r1, #144	; 0x90
 8003480:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003482:	23a4      	movs	r3, #164	; 0xa4
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2202      	movs	r2, #2
 800348a:	4013      	ands	r3, r2
 800348c:	d011      	beq.n	80034b2 <HAL_UART_IRQHandler+0x102>
 800348e:	239c      	movs	r3, #156	; 0x9c
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2201      	movs	r2, #1
 8003496:	4013      	ands	r3, r2
 8003498:	d00b      	beq.n	80034b2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2202      	movs	r2, #2
 80034a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2290      	movs	r2, #144	; 0x90
 80034a6:	589b      	ldr	r3, [r3, r2]
 80034a8:	2204      	movs	r2, #4
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2190      	movs	r1, #144	; 0x90
 80034b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034b2:	23a4      	movs	r3, #164	; 0xa4
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2204      	movs	r2, #4
 80034ba:	4013      	ands	r3, r2
 80034bc:	d011      	beq.n	80034e2 <HAL_UART_IRQHandler+0x132>
 80034be:	239c      	movs	r3, #156	; 0x9c
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2201      	movs	r2, #1
 80034c6:	4013      	ands	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2204      	movs	r2, #4
 80034d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2290      	movs	r2, #144	; 0x90
 80034d6:	589b      	ldr	r3, [r3, r2]
 80034d8:	2202      	movs	r2, #2
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2190      	movs	r1, #144	; 0x90
 80034e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034e2:	23a4      	movs	r3, #164	; 0xa4
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2208      	movs	r2, #8
 80034ea:	4013      	ands	r3, r2
 80034ec:	d017      	beq.n	800351e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80034ee:	23a0      	movs	r3, #160	; 0xa0
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2220      	movs	r2, #32
 80034f6:	4013      	ands	r3, r2
 80034f8:	d105      	bne.n	8003506 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80034fa:	239c      	movs	r3, #156	; 0x9c
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a5b      	ldr	r2, [pc, #364]	; (8003670 <HAL_UART_IRQHandler+0x2c0>)
 8003502:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003504:	d00b      	beq.n	800351e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2208      	movs	r2, #8
 800350c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2290      	movs	r2, #144	; 0x90
 8003512:	589b      	ldr	r3, [r3, r2]
 8003514:	2208      	movs	r2, #8
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2190      	movs	r1, #144	; 0x90
 800351c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800351e:	23a4      	movs	r3, #164	; 0xa4
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	4013      	ands	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_UART_IRQHandler+0x1a4>
 800352c:	23a0      	movs	r3, #160	; 0xa0
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	04db      	lsls	r3, r3, #19
 8003536:	4013      	ands	r3, r2
 8003538:	d00c      	beq.n	8003554 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2290      	movs	r2, #144	; 0x90
 8003548:	589b      	ldr	r3, [r3, r2]
 800354a:	2220      	movs	r2, #32
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2190      	movs	r1, #144	; 0x90
 8003552:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2290      	movs	r2, #144	; 0x90
 8003558:	589b      	ldr	r3, [r3, r2]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d100      	bne.n	8003560 <HAL_UART_IRQHandler+0x1b0>
 800355e:	e23d      	b.n	80039dc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003560:	23a4      	movs	r3, #164	; 0xa4
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2220      	movs	r2, #32
 8003568:	4013      	ands	r3, r2
 800356a:	d015      	beq.n	8003598 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800356c:	23a0      	movs	r3, #160	; 0xa0
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2220      	movs	r2, #32
 8003574:	4013      	ands	r3, r2
 8003576:	d106      	bne.n	8003586 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003578:	239c      	movs	r3, #156	; 0x9c
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	055b      	lsls	r3, r3, #21
 8003582:	4013      	ands	r3, r2
 8003584:	d008      	beq.n	8003598 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	0010      	movs	r0, r2
 8003596:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2290      	movs	r2, #144	; 0x90
 800359c:	589b      	ldr	r3, [r3, r2]
 800359e:	2194      	movs	r1, #148	; 0x94
 80035a0:	187a      	adds	r2, r7, r1
 80035a2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	4013      	ands	r3, r2
 80035ae:	2b40      	cmp	r3, #64	; 0x40
 80035b0:	d004      	beq.n	80035bc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035b2:	187b      	adds	r3, r7, r1
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2228      	movs	r2, #40	; 0x28
 80035b8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035ba:	d04c      	beq.n	8003656 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	0018      	movs	r0, r3
 80035c0:	f001 f888 	bl	80046d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2240      	movs	r2, #64	; 0x40
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d13c      	bne.n	800364c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d2:	f3ef 8310 	mrs	r3, PRIMASK
 80035d6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80035d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035da:	2090      	movs	r0, #144	; 0x90
 80035dc:	183a      	adds	r2, r7, r0
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	2301      	movs	r3, #1
 80035e2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035e6:	f383 8810 	msr	PRIMASK, r3
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2140      	movs	r1, #64	; 0x40
 80035f8:	438a      	bics	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	183b      	adds	r3, r7, r0
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003604:	f383 8810 	msr	PRIMASK, r3
}
 8003608:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	589b      	ldr	r3, [r3, r2]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d016      	beq.n	8003642 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2280      	movs	r2, #128	; 0x80
 8003618:	589b      	ldr	r3, [r3, r2]
 800361a:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_UART_IRQHandler+0x2c8>)
 800361c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2280      	movs	r2, #128	; 0x80
 8003622:	589b      	ldr	r3, [r3, r2]
 8003624:	0018      	movs	r0, r3
 8003626:	f7fe fbdf 	bl	8001de8 <HAL_DMA_Abort_IT>
 800362a:	1e03      	subs	r3, r0, #0
 800362c:	d01c      	beq.n	8003668 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2280      	movs	r2, #128	; 0x80
 8003632:	589b      	ldr	r3, [r3, r2]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	5852      	ldr	r2, [r2, r1]
 800363c:	0010      	movs	r0, r2
 800363e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003640:	e012      	b.n	8003668 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	0018      	movs	r0, r3
 8003646:	f000 f9e9 	bl	8003a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364a:	e00d      	b.n	8003668 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 f9e4 	bl	8003a1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e008      	b.n	8003668 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 f9df 	bl	8003a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2290      	movs	r2, #144	; 0x90
 8003662:	2100      	movs	r1, #0
 8003664:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003666:	e1b9      	b.n	80039dc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003668:	46c0      	nop			; (mov r8, r8)
    return;
 800366a:	e1b7      	b.n	80039dc <HAL_UART_IRQHandler+0x62c>
 800366c:	0000080f 	.word	0x0000080f
 8003670:	10000001 	.word	0x10000001
 8003674:	04000120 	.word	0x04000120
 8003678:	080047a1 	.word	0x080047a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d000      	beq.n	8003686 <HAL_UART_IRQHandler+0x2d6>
 8003684:	e13e      	b.n	8003904 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003686:	23a4      	movs	r3, #164	; 0xa4
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2210      	movs	r2, #16
 800368e:	4013      	ands	r3, r2
 8003690:	d100      	bne.n	8003694 <HAL_UART_IRQHandler+0x2e4>
 8003692:	e137      	b.n	8003904 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003694:	23a0      	movs	r3, #160	; 0xa0
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2210      	movs	r2, #16
 800369c:	4013      	ands	r3, r2
 800369e:	d100      	bne.n	80036a2 <HAL_UART_IRQHandler+0x2f2>
 80036a0:	e130      	b.n	8003904 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2210      	movs	r2, #16
 80036a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2240      	movs	r2, #64	; 0x40
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d000      	beq.n	80036ba <HAL_UART_IRQHandler+0x30a>
 80036b8:	e0a4      	b.n	8003804 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	589b      	ldr	r3, [r3, r2]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	217e      	movs	r1, #126	; 0x7e
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d100      	bne.n	80036d4 <HAL_UART_IRQHandler+0x324>
 80036d2:	e185      	b.n	80039e0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	225c      	movs	r2, #92	; 0x5c
 80036d8:	5a9b      	ldrh	r3, [r3, r2]
 80036da:	187a      	adds	r2, r7, r1
 80036dc:	8812      	ldrh	r2, [r2, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d300      	bcc.n	80036e4 <HAL_UART_IRQHandler+0x334>
 80036e2:	e17d      	b.n	80039e0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	187a      	adds	r2, r7, r1
 80036e8:	215e      	movs	r1, #94	; 0x5e
 80036ea:	8812      	ldrh	r2, [r2, #0]
 80036ec:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2280      	movs	r2, #128	; 0x80
 80036f2:	589b      	ldr	r3, [r3, r2]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2220      	movs	r2, #32
 80036fa:	4013      	ands	r3, r2
 80036fc:	d170      	bne.n	80037e0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003702:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003706:	67bb      	str	r3, [r7, #120]	; 0x78
 8003708:	2301      	movs	r3, #1
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	49b4      	ldr	r1, [pc, #720]	; (80039f0 <HAL_UART_IRQHandler+0x640>)
 8003720:	400a      	ands	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003726:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003730:	f3ef 8310 	mrs	r3, PRIMASK
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003738:	677b      	str	r3, [r7, #116]	; 0x74
 800373a:	2301      	movs	r3, #1
 800373c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003740:	f383 8810 	msr	PRIMASK, r3
}
 8003744:	46c0      	nop			; (mov r8, r8)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	438a      	bics	r2, r1
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003758:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375c:	f383 8810 	msr	PRIMASK, r3
}
 8003760:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003762:	f3ef 8310 	mrs	r3, PRIMASK
 8003766:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003768:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800376a:	673b      	str	r3, [r7, #112]	; 0x70
 800376c:	2301      	movs	r3, #1
 800376e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003772:	f383 8810 	msr	PRIMASK, r3
}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2140      	movs	r1, #64	; 0x40
 8003784:	438a      	bics	r2, r1
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800378a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800378c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800378e:	f383 8810 	msr	PRIMASK, r3
}
 8003792:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	228c      	movs	r2, #140	; 0x8c
 8003798:	2120      	movs	r1, #32
 800379a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a2:	f3ef 8310 	mrs	r3, PRIMASK
 80037a6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80037a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ac:	2301      	movs	r3, #1
 80037ae:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2110      	movs	r1, #16
 80037c4:	438a      	bics	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ce:	f383 8810 	msr	PRIMASK, r3
}
 80037d2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	589b      	ldr	r3, [r3, r2]
 80037da:	0018      	movs	r0, r3
 80037dc:	f7fe faa4 	bl	8001d28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	225c      	movs	r2, #92	; 0x5c
 80037ea:	5a9a      	ldrh	r2, [r3, r2]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	215e      	movs	r1, #94	; 0x5e
 80037f0:	5a5b      	ldrh	r3, [r3, r1]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0011      	movs	r1, r2
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 f915 	bl	8003a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003802:	e0ed      	b.n	80039e0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	225c      	movs	r2, #92	; 0x5c
 8003808:	5a99      	ldrh	r1, [r3, r2]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	225e      	movs	r2, #94	; 0x5e
 800380e:	5a9b      	ldrh	r3, [r3, r2]
 8003810:	b29a      	uxth	r2, r3
 8003812:	208e      	movs	r0, #142	; 0x8e
 8003814:	183b      	adds	r3, r7, r0
 8003816:	1a8a      	subs	r2, r1, r2
 8003818:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	225e      	movs	r2, #94	; 0x5e
 800381e:	5a9b      	ldrh	r3, [r3, r2]
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d100      	bne.n	8003828 <HAL_UART_IRQHandler+0x478>
 8003826:	e0dd      	b.n	80039e4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003828:	183b      	adds	r3, r7, r0
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d100      	bne.n	8003832 <HAL_UART_IRQHandler+0x482>
 8003830:	e0d8      	b.n	80039e4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003832:	f3ef 8310 	mrs	r3, PRIMASK
 8003836:	60fb      	str	r3, [r7, #12]
  return(result);
 8003838:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800383a:	2488      	movs	r4, #136	; 0x88
 800383c:	193a      	adds	r2, r7, r4
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	2301      	movs	r3, #1
 8003842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f383 8810 	msr	PRIMASK, r3
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4967      	ldr	r1, [pc, #412]	; (80039f4 <HAL_UART_IRQHandler+0x644>)
 8003858:	400a      	ands	r2, r1
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	193b      	adds	r3, r7, r4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386a:	f3ef 8310 	mrs	r3, PRIMASK
 800386e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003870:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003872:	2484      	movs	r4, #132	; 0x84
 8003874:	193a      	adds	r2, r7, r4
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	2301      	movs	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f383 8810 	msr	PRIMASK, r3
}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	495a      	ldr	r1, [pc, #360]	; (80039f8 <HAL_UART_IRQHandler+0x648>)
 8003890:	400a      	ands	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	193b      	adds	r3, r7, r4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f383 8810 	msr	PRIMASK, r3
}
 80038a0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	228c      	movs	r2, #140	; 0x8c
 80038a6:	2120      	movs	r1, #32
 80038a8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038b6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038be:	2480      	movs	r4, #128	; 0x80
 80038c0:	193a      	adds	r2, r7, r4
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	2301      	movs	r3, #1
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	f383 8810 	msr	PRIMASK, r3
}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2110      	movs	r1, #16
 80038dc:	438a      	bics	r2, r1
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	193b      	adds	r3, r7, r4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e8:	f383 8810 	msr	PRIMASK, r3
}
 80038ec:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	0011      	movs	r1, r2
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 f895 	bl	8003a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003902:	e06f      	b.n	80039e4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003904:	23a4      	movs	r3, #164	; 0xa4
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	035b      	lsls	r3, r3, #13
 800390e:	4013      	ands	r3, r2
 8003910:	d010      	beq.n	8003934 <HAL_UART_IRQHandler+0x584>
 8003912:	239c      	movs	r3, #156	; 0x9c
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	03db      	lsls	r3, r3, #15
 800391c:	4013      	ands	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	0352      	lsls	r2, r2, #13
 8003928:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0018      	movs	r0, r3
 800392e:	f001 fca7 	bl	8005280 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003932:	e05a      	b.n	80039ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003934:	23a4      	movs	r3, #164	; 0xa4
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2280      	movs	r2, #128	; 0x80
 800393c:	4013      	ands	r3, r2
 800393e:	d016      	beq.n	800396e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003940:	23a0      	movs	r3, #160	; 0xa0
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	4013      	ands	r3, r2
 800394a:	d106      	bne.n	800395a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800394c:	239c      	movs	r3, #156	; 0x9c
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	4013      	ands	r3, r2
 8003958:	d009      	beq.n	800396e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800395e:	2b00      	cmp	r3, #0
 8003960:	d042      	beq.n	80039e8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	0010      	movs	r0, r2
 800396a:	4798      	blx	r3
    }
    return;
 800396c:	e03c      	b.n	80039e8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800396e:	23a4      	movs	r3, #164	; 0xa4
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2240      	movs	r2, #64	; 0x40
 8003976:	4013      	ands	r3, r2
 8003978:	d00a      	beq.n	8003990 <HAL_UART_IRQHandler+0x5e0>
 800397a:	23a0      	movs	r3, #160	; 0xa0
 800397c:	18fb      	adds	r3, r7, r3
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2240      	movs	r2, #64	; 0x40
 8003982:	4013      	ands	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0018      	movs	r0, r3
 800398a:	f000 ff20 	bl	80047ce <UART_EndTransmit_IT>
    return;
 800398e:	e02c      	b.n	80039ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003990:	23a4      	movs	r3, #164	; 0xa4
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	4013      	ands	r3, r2
 800399c:	d00b      	beq.n	80039b6 <HAL_UART_IRQHandler+0x606>
 800399e:	23a0      	movs	r3, #160	; 0xa0
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	05db      	lsls	r3, r3, #23
 80039a8:	4013      	ands	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	0018      	movs	r0, r3
 80039b0:	f001 fc76 	bl	80052a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039b4:	e019      	b.n	80039ea <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80039b6:	23a4      	movs	r3, #164	; 0xa4
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	045b      	lsls	r3, r3, #17
 80039c0:	4013      	ands	r3, r2
 80039c2:	d012      	beq.n	80039ea <HAL_UART_IRQHandler+0x63a>
 80039c4:	23a0      	movs	r3, #160	; 0xa0
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	da0d      	bge.n	80039ea <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f001 fc5d 	bl	8005290 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039d6:	e008      	b.n	80039ea <HAL_UART_IRQHandler+0x63a>
      return;
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	e006      	b.n	80039ea <HAL_UART_IRQHandler+0x63a>
    return;
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	e004      	b.n	80039ea <HAL_UART_IRQHandler+0x63a>
      return;
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	e002      	b.n	80039ea <HAL_UART_IRQHandler+0x63a>
      return;
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	e000      	b.n	80039ea <HAL_UART_IRQHandler+0x63a>
    return;
 80039e8:	46c0      	nop			; (mov r8, r8)
  }
}
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b02a      	add	sp, #168	; 0xa8
 80039ee:	bdb0      	pop	{r4, r5, r7, pc}
 80039f0:	fffffeff 	.word	0xfffffeff
 80039f4:	fffffedf 	.word	0xfffffedf
 80039f8:	effffffe 	.word	0xeffffffe

080039fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b002      	add	sp, #8
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	000a      	movs	r2, r1
 8003a36:	1cbb      	adds	r3, r7, #2
 8003a38:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a44:	b5b0      	push	{r4, r5, r7, lr}
 8003a46:	b090      	sub	sp, #64	; 0x40
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a4c:	231a      	movs	r3, #26
 8003a4e:	2220      	movs	r2, #32
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	19db      	adds	r3, r3, r7
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4ac1      	ldr	r2, [pc, #772]	; (8003d7c <UART_SetConfig+0x338>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a82:	430b      	orrs	r3, r1
 8003a84:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4abc      	ldr	r2, [pc, #752]	; (8003d80 <UART_SetConfig+0x33c>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	0018      	movs	r0, r3
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	68d9      	ldr	r1, [r3, #12]
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4ab6      	ldr	r2, [pc, #728]	; (8003d84 <UART_SetConfig+0x340>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <UART_SetConfig+0x80>
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4ab4      	ldr	r2, [pc, #720]	; (8003d88 <UART_SetConfig+0x344>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	4ab0      	ldr	r2, [pc, #704]	; (8003d8c <UART_SetConfig+0x348>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	220f      	movs	r2, #15
 8003ae2:	4393      	bics	r3, r2
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	0003      	movs	r3, r0
 8003af0:	430b      	orrs	r3, r1
 8003af2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4aa5      	ldr	r2, [pc, #660]	; (8003d90 <UART_SetConfig+0x34c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d131      	bne.n	8003b62 <UART_SetConfig+0x11e>
 8003afe:	4ba5      	ldr	r3, [pc, #660]	; (8003d94 <UART_SetConfig+0x350>)
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	2203      	movs	r2, #3
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d01d      	beq.n	8003b46 <UART_SetConfig+0x102>
 8003b0a:	d823      	bhi.n	8003b54 <UART_SetConfig+0x110>
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d00c      	beq.n	8003b2a <UART_SetConfig+0xe6>
 8003b10:	d820      	bhi.n	8003b54 <UART_SetConfig+0x110>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <UART_SetConfig+0xd8>
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d00e      	beq.n	8003b38 <UART_SetConfig+0xf4>
 8003b1a:	e01b      	b.n	8003b54 <UART_SetConfig+0x110>
 8003b1c:	231b      	movs	r3, #27
 8003b1e:	2220      	movs	r2, #32
 8003b20:	189b      	adds	r3, r3, r2
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e154      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003b2a:	231b      	movs	r3, #27
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	19db      	adds	r3, r3, r7
 8003b32:	2202      	movs	r2, #2
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	e14d      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003b38:	231b      	movs	r3, #27
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	2204      	movs	r2, #4
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e146      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003b46:	231b      	movs	r3, #27
 8003b48:	2220      	movs	r2, #32
 8003b4a:	189b      	adds	r3, r3, r2
 8003b4c:	19db      	adds	r3, r3, r7
 8003b4e:	2208      	movs	r2, #8
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e13f      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003b54:	231b      	movs	r3, #27
 8003b56:	2220      	movs	r2, #32
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	19db      	adds	r3, r3, r7
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	e138      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a8c      	ldr	r2, [pc, #560]	; (8003d98 <UART_SetConfig+0x354>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d131      	bne.n	8003bd0 <UART_SetConfig+0x18c>
 8003b6c:	4b89      	ldr	r3, [pc, #548]	; (8003d94 <UART_SetConfig+0x350>)
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	220c      	movs	r2, #12
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d01d      	beq.n	8003bb4 <UART_SetConfig+0x170>
 8003b78:	d823      	bhi.n	8003bc2 <UART_SetConfig+0x17e>
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d00c      	beq.n	8003b98 <UART_SetConfig+0x154>
 8003b7e:	d820      	bhi.n	8003bc2 <UART_SetConfig+0x17e>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <UART_SetConfig+0x146>
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d00e      	beq.n	8003ba6 <UART_SetConfig+0x162>
 8003b88:	e01b      	b.n	8003bc2 <UART_SetConfig+0x17e>
 8003b8a:	231b      	movs	r3, #27
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	19db      	adds	r3, r3, r7
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e11d      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003b98:	231b      	movs	r3, #27
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	189b      	adds	r3, r3, r2
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	e116      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003ba6:	231b      	movs	r3, #27
 8003ba8:	2220      	movs	r2, #32
 8003baa:	189b      	adds	r3, r3, r2
 8003bac:	19db      	adds	r3, r3, r7
 8003bae:	2204      	movs	r2, #4
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	e10f      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003bb4:	231b      	movs	r3, #27
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	189b      	adds	r3, r3, r2
 8003bba:	19db      	adds	r3, r3, r7
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e108      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003bc2:	231b      	movs	r3, #27
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	189b      	adds	r3, r3, r2
 8003bc8:	19db      	adds	r3, r3, r7
 8003bca:	2210      	movs	r2, #16
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e101      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a71      	ldr	r2, [pc, #452]	; (8003d9c <UART_SetConfig+0x358>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d131      	bne.n	8003c3e <UART_SetConfig+0x1fa>
 8003bda:	4b6e      	ldr	r3, [pc, #440]	; (8003d94 <UART_SetConfig+0x350>)
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bde:	2230      	movs	r2, #48	; 0x30
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b30      	cmp	r3, #48	; 0x30
 8003be4:	d01d      	beq.n	8003c22 <UART_SetConfig+0x1de>
 8003be6:	d823      	bhi.n	8003c30 <UART_SetConfig+0x1ec>
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d00c      	beq.n	8003c06 <UART_SetConfig+0x1c2>
 8003bec:	d820      	bhi.n	8003c30 <UART_SetConfig+0x1ec>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <UART_SetConfig+0x1b4>
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d00e      	beq.n	8003c14 <UART_SetConfig+0x1d0>
 8003bf6:	e01b      	b.n	8003c30 <UART_SetConfig+0x1ec>
 8003bf8:	231b      	movs	r3, #27
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	189b      	adds	r3, r3, r2
 8003bfe:	19db      	adds	r3, r3, r7
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e0e6      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003c06:	231b      	movs	r3, #27
 8003c08:	2220      	movs	r2, #32
 8003c0a:	189b      	adds	r3, r3, r2
 8003c0c:	19db      	adds	r3, r3, r7
 8003c0e:	2202      	movs	r2, #2
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e0df      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003c14:	231b      	movs	r3, #27
 8003c16:	2220      	movs	r2, #32
 8003c18:	189b      	adds	r3, r3, r2
 8003c1a:	19db      	adds	r3, r3, r7
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e0d8      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003c22:	231b      	movs	r3, #27
 8003c24:	2220      	movs	r2, #32
 8003c26:	189b      	adds	r3, r3, r2
 8003c28:	19db      	adds	r3, r3, r7
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e0d1      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003c30:	231b      	movs	r3, #27
 8003c32:	2220      	movs	r2, #32
 8003c34:	189b      	adds	r3, r3, r2
 8003c36:	19db      	adds	r3, r3, r7
 8003c38:	2210      	movs	r2, #16
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	e0ca      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a57      	ldr	r2, [pc, #348]	; (8003da0 <UART_SetConfig+0x35c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d106      	bne.n	8003c56 <UART_SetConfig+0x212>
 8003c48:	231b      	movs	r3, #27
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	189b      	adds	r3, r3, r2
 8003c4e:	19db      	adds	r3, r3, r7
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e0be      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a52      	ldr	r2, [pc, #328]	; (8003da4 <UART_SetConfig+0x360>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d106      	bne.n	8003c6e <UART_SetConfig+0x22a>
 8003c60:	231b      	movs	r3, #27
 8003c62:	2220      	movs	r2, #32
 8003c64:	189b      	adds	r3, r3, r2
 8003c66:	19db      	adds	r3, r3, r7
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
 8003c6c:	e0b2      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a4d      	ldr	r2, [pc, #308]	; (8003da8 <UART_SetConfig+0x364>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d106      	bne.n	8003c86 <UART_SetConfig+0x242>
 8003c78:	231b      	movs	r3, #27
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	19db      	adds	r3, r3, r7
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	e0a6      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a3e      	ldr	r2, [pc, #248]	; (8003d84 <UART_SetConfig+0x340>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d13e      	bne.n	8003d0e <UART_SetConfig+0x2ca>
 8003c90:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <UART_SetConfig+0x350>)
 8003c92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c94:	23c0      	movs	r3, #192	; 0xc0
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	4013      	ands	r3, r2
 8003c9a:	22c0      	movs	r2, #192	; 0xc0
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d027      	beq.n	8003cf2 <UART_SetConfig+0x2ae>
 8003ca2:	22c0      	movs	r2, #192	; 0xc0
 8003ca4:	0112      	lsls	r2, r2, #4
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d82a      	bhi.n	8003d00 <UART_SetConfig+0x2bc>
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	0112      	lsls	r2, r2, #4
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d011      	beq.n	8003cd6 <UART_SetConfig+0x292>
 8003cb2:	2280      	movs	r2, #128	; 0x80
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d822      	bhi.n	8003d00 <UART_SetConfig+0x2bc>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d004      	beq.n	8003cc8 <UART_SetConfig+0x284>
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	00d2      	lsls	r2, r2, #3
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00e      	beq.n	8003ce4 <UART_SetConfig+0x2a0>
 8003cc6:	e01b      	b.n	8003d00 <UART_SetConfig+0x2bc>
 8003cc8:	231b      	movs	r3, #27
 8003cca:	2220      	movs	r2, #32
 8003ccc:	189b      	adds	r3, r3, r2
 8003cce:	19db      	adds	r3, r3, r7
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e07e      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003cd6:	231b      	movs	r3, #27
 8003cd8:	2220      	movs	r2, #32
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	19db      	adds	r3, r3, r7
 8003cde:	2202      	movs	r2, #2
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e077      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003ce4:	231b      	movs	r3, #27
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	189b      	adds	r3, r3, r2
 8003cea:	19db      	adds	r3, r3, r7
 8003cec:	2204      	movs	r2, #4
 8003cee:	701a      	strb	r2, [r3, #0]
 8003cf0:	e070      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003cf2:	231b      	movs	r3, #27
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	19db      	adds	r3, r3, r7
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e069      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003d00:	231b      	movs	r3, #27
 8003d02:	2220      	movs	r2, #32
 8003d04:	189b      	adds	r3, r3, r2
 8003d06:	19db      	adds	r3, r3, r7
 8003d08:	2210      	movs	r2, #16
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e062      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <UART_SetConfig+0x344>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d157      	bne.n	8003dc8 <UART_SetConfig+0x384>
 8003d18:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <UART_SetConfig+0x350>)
 8003d1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d1c:	23c0      	movs	r3, #192	; 0xc0
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4013      	ands	r3, r2
 8003d22:	22c0      	movs	r2, #192	; 0xc0
 8003d24:	0092      	lsls	r2, r2, #2
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d040      	beq.n	8003dac <UART_SetConfig+0x368>
 8003d2a:	22c0      	movs	r2, #192	; 0xc0
 8003d2c:	0092      	lsls	r2, r2, #2
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d843      	bhi.n	8003dba <UART_SetConfig+0x376>
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	0092      	lsls	r2, r2, #2
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d011      	beq.n	8003d5e <UART_SetConfig+0x31a>
 8003d3a:	2280      	movs	r2, #128	; 0x80
 8003d3c:	0092      	lsls	r2, r2, #2
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d83b      	bhi.n	8003dba <UART_SetConfig+0x376>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <UART_SetConfig+0x30c>
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	0052      	lsls	r2, r2, #1
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00e      	beq.n	8003d6c <UART_SetConfig+0x328>
 8003d4e:	e034      	b.n	8003dba <UART_SetConfig+0x376>
 8003d50:	231b      	movs	r3, #27
 8003d52:	2220      	movs	r2, #32
 8003d54:	189b      	adds	r3, r3, r2
 8003d56:	19db      	adds	r3, r3, r7
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e03a      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003d5e:	231b      	movs	r3, #27
 8003d60:	2220      	movs	r2, #32
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	19db      	adds	r3, r3, r7
 8003d66:	2202      	movs	r2, #2
 8003d68:	701a      	strb	r2, [r3, #0]
 8003d6a:	e033      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003d6c:	231b      	movs	r3, #27
 8003d6e:	2220      	movs	r2, #32
 8003d70:	189b      	adds	r3, r3, r2
 8003d72:	19db      	adds	r3, r3, r7
 8003d74:	2204      	movs	r2, #4
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e02c      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	cfff69f3 	.word	0xcfff69f3
 8003d80:	ffffcfff 	.word	0xffffcfff
 8003d84:	40008000 	.word	0x40008000
 8003d88:	40008400 	.word	0x40008400
 8003d8c:	11fff4ff 	.word	0x11fff4ff
 8003d90:	40013800 	.word	0x40013800
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40004400 	.word	0x40004400
 8003d9c:	40004800 	.word	0x40004800
 8003da0:	40004c00 	.word	0x40004c00
 8003da4:	40005000 	.word	0x40005000
 8003da8:	40013c00 	.word	0x40013c00
 8003dac:	231b      	movs	r3, #27
 8003dae:	2220      	movs	r2, #32
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	19db      	adds	r3, r3, r7
 8003db4:	2208      	movs	r2, #8
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	e00c      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003dba:	231b      	movs	r3, #27
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	189b      	adds	r3, r3, r2
 8003dc0:	19db      	adds	r3, r3, r7
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e005      	b.n	8003dd4 <UART_SetConfig+0x390>
 8003dc8:	231b      	movs	r3, #27
 8003dca:	2220      	movs	r2, #32
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	19db      	adds	r3, r3, r7
 8003dd0:	2210      	movs	r2, #16
 8003dd2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4ac1      	ldr	r2, [pc, #772]	; (80040e0 <UART_SetConfig+0x69c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d005      	beq.n	8003dea <UART_SetConfig+0x3a6>
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4ac0      	ldr	r2, [pc, #768]	; (80040e4 <UART_SetConfig+0x6a0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d000      	beq.n	8003dea <UART_SetConfig+0x3a6>
 8003de8:	e093      	b.n	8003f12 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dea:	231b      	movs	r3, #27
 8003dec:	2220      	movs	r2, #32
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	19db      	adds	r3, r3, r7
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d015      	beq.n	8003e24 <UART_SetConfig+0x3e0>
 8003df8:	dc18      	bgt.n	8003e2c <UART_SetConfig+0x3e8>
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d00d      	beq.n	8003e1a <UART_SetConfig+0x3d6>
 8003dfe:	dc15      	bgt.n	8003e2c <UART_SetConfig+0x3e8>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <UART_SetConfig+0x3c6>
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d005      	beq.n	8003e14 <UART_SetConfig+0x3d0>
 8003e08:	e010      	b.n	8003e2c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e0a:	f7fe ff1f 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8003e0e:	0003      	movs	r3, r0
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e12:	e014      	b.n	8003e3e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4bb4      	ldr	r3, [pc, #720]	; (80040e8 <UART_SetConfig+0x6a4>)
 8003e16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e18:	e011      	b.n	8003e3e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7fe fe8b 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8003e1e:	0003      	movs	r3, r0
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e22:	e00c      	b.n	8003e3e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e2a:	e008      	b.n	8003e3e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003e30:	231a      	movs	r3, #26
 8003e32:	2220      	movs	r2, #32
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	19db      	adds	r3, r3, r7
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
        break;
 8003e3c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d100      	bne.n	8003e46 <UART_SetConfig+0x402>
 8003e44:	e135      	b.n	80040b2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e4a:	4ba8      	ldr	r3, [pc, #672]	; (80040ec <UART_SetConfig+0x6a8>)
 8003e4c:	0052      	lsls	r2, r2, #1
 8003e4e:	5ad3      	ldrh	r3, [r2, r3]
 8003e50:	0019      	movs	r1, r3
 8003e52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e54:	f7fc f968 	bl	8000128 <__udivsi3>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	0013      	movs	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	189b      	adds	r3, r3, r2
 8003e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d305      	bcc.n	8003e78 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d906      	bls.n	8003e86 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8003e78:	231a      	movs	r3, #26
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	189b      	adds	r3, r3, r2
 8003e7e:	19db      	adds	r3, r3, r7
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e044      	b.n	8003f10 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e92:	4b96      	ldr	r3, [pc, #600]	; (80040ec <UART_SetConfig+0x6a8>)
 8003e94:	0052      	lsls	r2, r2, #1
 8003e96:	5ad3      	ldrh	r3, [r2, r3]
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	69b8      	ldr	r0, [r7, #24]
 8003ea4:	69f9      	ldr	r1, [r7, #28]
 8003ea6:	f7fc fab5 	bl	8000414 <__aeabi_uldivmod>
 8003eaa:	0002      	movs	r2, r0
 8003eac:	000b      	movs	r3, r1
 8003eae:	0e11      	lsrs	r1, r2, #24
 8003eb0:	021d      	lsls	r5, r3, #8
 8003eb2:	430d      	orrs	r5, r1
 8003eb4:	0214      	lsls	r4, r2, #8
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68b8      	ldr	r0, [r7, #8]
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	1900      	adds	r0, r0, r4
 8003ec8:	4169      	adcs	r1, r5
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f7fc fa9c 	bl	8000414 <__aeabi_uldivmod>
 8003edc:	0002      	movs	r2, r0
 8003ede:	000b      	movs	r3, r1
 8003ee0:	0013      	movs	r3, r2
 8003ee2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	23c0      	movs	r3, #192	; 0xc0
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d309      	bcc.n	8003f02 <UART_SetConfig+0x4be>
 8003eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	035b      	lsls	r3, r3, #13
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d204      	bcs.n	8003f02 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	e006      	b.n	8003f10 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003f02:	231a      	movs	r3, #26
 8003f04:	2220      	movs	r2, #32
 8003f06:	189b      	adds	r3, r3, r2
 8003f08:	19db      	adds	r3, r3, r7
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003f0e:	e0d0      	b.n	80040b2 <UART_SetConfig+0x66e>
 8003f10:	e0cf      	b.n	80040b2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d000      	beq.n	8003f20 <UART_SetConfig+0x4dc>
 8003f1e:	e070      	b.n	8004002 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003f20:	231b      	movs	r3, #27
 8003f22:	2220      	movs	r2, #32
 8003f24:	189b      	adds	r3, r3, r2
 8003f26:	19db      	adds	r3, r3, r7
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d015      	beq.n	8003f5a <UART_SetConfig+0x516>
 8003f2e:	dc18      	bgt.n	8003f62 <UART_SetConfig+0x51e>
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d00d      	beq.n	8003f50 <UART_SetConfig+0x50c>
 8003f34:	dc15      	bgt.n	8003f62 <UART_SetConfig+0x51e>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <UART_SetConfig+0x4fc>
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d005      	beq.n	8003f4a <UART_SetConfig+0x506>
 8003f3e:	e010      	b.n	8003f62 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f40:	f7fe fe84 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8003f44:	0003      	movs	r3, r0
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f48:	e014      	b.n	8003f74 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f4a:	4b67      	ldr	r3, [pc, #412]	; (80040e8 <UART_SetConfig+0x6a4>)
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f4e:	e011      	b.n	8003f74 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f50:	f7fe fdf0 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8003f54:	0003      	movs	r3, r0
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f58:	e00c      	b.n	8003f74 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f60:	e008      	b.n	8003f74 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003f66:	231a      	movs	r3, #26
 8003f68:	2220      	movs	r2, #32
 8003f6a:	189b      	adds	r3, r3, r2
 8003f6c:	19db      	adds	r3, r3, r7
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
        break;
 8003f72:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d100      	bne.n	8003f7c <UART_SetConfig+0x538>
 8003f7a:	e09a      	b.n	80040b2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f80:	4b5a      	ldr	r3, [pc, #360]	; (80040ec <UART_SetConfig+0x6a8>)
 8003f82:	0052      	lsls	r2, r2, #1
 8003f84:	5ad3      	ldrh	r3, [r2, r3]
 8003f86:	0019      	movs	r1, r3
 8003f88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f8a:	f7fc f8cd 	bl	8000128 <__udivsi3>
 8003f8e:	0003      	movs	r3, r0
 8003f90:	005a      	lsls	r2, r3, #1
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	18d2      	adds	r2, r2, r3
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	0010      	movs	r0, r2
 8003fa2:	f7fc f8c1 	bl	8000128 <__udivsi3>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	2b0f      	cmp	r3, #15
 8003fae:	d921      	bls.n	8003ff4 <UART_SetConfig+0x5b0>
 8003fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	025b      	lsls	r3, r3, #9
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d21c      	bcs.n	8003ff4 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	200e      	movs	r0, #14
 8003fc0:	2420      	movs	r4, #32
 8003fc2:	1903      	adds	r3, r0, r4
 8003fc4:	19db      	adds	r3, r3, r7
 8003fc6:	210f      	movs	r1, #15
 8003fc8:	438a      	bics	r2, r1
 8003fca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2207      	movs	r2, #7
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	b299      	uxth	r1, r3
 8003fd8:	1903      	adds	r3, r0, r4
 8003fda:	19db      	adds	r3, r3, r7
 8003fdc:	1902      	adds	r2, r0, r4
 8003fde:	19d2      	adds	r2, r2, r7
 8003fe0:	8812      	ldrh	r2, [r2, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	1902      	adds	r2, r0, r4
 8003fec:	19d2      	adds	r2, r2, r7
 8003fee:	8812      	ldrh	r2, [r2, #0]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	e05e      	b.n	80040b2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003ff4:	231a      	movs	r3, #26
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	189b      	adds	r3, r3, r2
 8003ffa:	19db      	adds	r3, r3, r7
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	e057      	b.n	80040b2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004002:	231b      	movs	r3, #27
 8004004:	2220      	movs	r2, #32
 8004006:	189b      	adds	r3, r3, r2
 8004008:	19db      	adds	r3, r3, r7
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d015      	beq.n	800403c <UART_SetConfig+0x5f8>
 8004010:	dc18      	bgt.n	8004044 <UART_SetConfig+0x600>
 8004012:	2b04      	cmp	r3, #4
 8004014:	d00d      	beq.n	8004032 <UART_SetConfig+0x5ee>
 8004016:	dc15      	bgt.n	8004044 <UART_SetConfig+0x600>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <UART_SetConfig+0x5de>
 800401c:	2b02      	cmp	r3, #2
 800401e:	d005      	beq.n	800402c <UART_SetConfig+0x5e8>
 8004020:	e010      	b.n	8004044 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004022:	f7fe fe13 	bl	8002c4c <HAL_RCC_GetPCLK1Freq>
 8004026:	0003      	movs	r3, r0
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800402a:	e014      	b.n	8004056 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800402c:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <UART_SetConfig+0x6a4>)
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004030:	e011      	b.n	8004056 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004032:	f7fe fd7f 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8004036:	0003      	movs	r3, r0
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800403a:	e00c      	b.n	8004056 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004042:	e008      	b.n	8004056 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004048:	231a      	movs	r3, #26
 800404a:	2220      	movs	r2, #32
 800404c:	189b      	adds	r3, r3, r2
 800404e:	19db      	adds	r3, r3, r7
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
        break;
 8004054:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02a      	beq.n	80040b2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004060:	4b22      	ldr	r3, [pc, #136]	; (80040ec <UART_SetConfig+0x6a8>)
 8004062:	0052      	lsls	r2, r2, #1
 8004064:	5ad3      	ldrh	r3, [r2, r3]
 8004066:	0019      	movs	r1, r3
 8004068:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800406a:	f7fc f85d 	bl	8000128 <__udivsi3>
 800406e:	0003      	movs	r3, r0
 8004070:	001a      	movs	r2, r3
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	085b      	lsrs	r3, r3, #1
 8004078:	18d2      	adds	r2, r2, r3
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	0019      	movs	r1, r3
 8004080:	0010      	movs	r0, r2
 8004082:	f7fc f851 	bl	8000128 <__udivsi3>
 8004086:	0003      	movs	r3, r0
 8004088:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	2b0f      	cmp	r3, #15
 800408e:	d90a      	bls.n	80040a6 <UART_SetConfig+0x662>
 8004090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	025b      	lsls	r3, r3, #9
 8004096:	429a      	cmp	r2, r3
 8004098:	d205      	bcs.n	80040a6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	b29a      	uxth	r2, r3
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60da      	str	r2, [r3, #12]
 80040a4:	e005      	b.n	80040b2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80040a6:	231a      	movs	r3, #26
 80040a8:	2220      	movs	r2, #32
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	19db      	adds	r3, r3, r7
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	226a      	movs	r2, #106	; 0x6a
 80040b6:	2101      	movs	r1, #1
 80040b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	2268      	movs	r2, #104	; 0x68
 80040be:	2101      	movs	r1, #1
 80040c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	2200      	movs	r2, #0
 80040c6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	2200      	movs	r2, #0
 80040cc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80040ce:	231a      	movs	r3, #26
 80040d0:	2220      	movs	r2, #32
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	19db      	adds	r3, r3, r7
 80040d6:	781b      	ldrb	r3, [r3, #0]
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	b010      	add	sp, #64	; 0x40
 80040de:	bdb0      	pop	{r4, r5, r7, pc}
 80040e0:	40008000 	.word	0x40008000
 80040e4:	40008400 	.word	0x40008400
 80040e8:	00f42400 	.word	0x00f42400
 80040ec:	080060e8 	.word	0x080060e8

080040f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	2208      	movs	r2, #8
 80040fe:	4013      	ands	r3, r2
 8004100:	d00b      	beq.n	800411a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a4a      	ldr	r2, [pc, #296]	; (8004234 <UART_AdvFeatureConfig+0x144>)
 800410a:	4013      	ands	r3, r2
 800410c:	0019      	movs	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	2201      	movs	r2, #1
 8004120:	4013      	ands	r3, r2
 8004122:	d00b      	beq.n	800413c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4a43      	ldr	r2, [pc, #268]	; (8004238 <UART_AdvFeatureConfig+0x148>)
 800412c:	4013      	ands	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	2202      	movs	r2, #2
 8004142:	4013      	ands	r3, r2
 8004144:	d00b      	beq.n	800415e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4a3b      	ldr	r2, [pc, #236]	; (800423c <UART_AdvFeatureConfig+0x14c>)
 800414e:	4013      	ands	r3, r2
 8004150:	0019      	movs	r1, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	2204      	movs	r2, #4
 8004164:	4013      	ands	r3, r2
 8004166:	d00b      	beq.n	8004180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4a34      	ldr	r2, [pc, #208]	; (8004240 <UART_AdvFeatureConfig+0x150>)
 8004170:	4013      	ands	r3, r2
 8004172:	0019      	movs	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	2210      	movs	r2, #16
 8004186:	4013      	ands	r3, r2
 8004188:	d00b      	beq.n	80041a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <UART_AdvFeatureConfig+0x154>)
 8004192:	4013      	ands	r3, r2
 8004194:	0019      	movs	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	2220      	movs	r2, #32
 80041a8:	4013      	ands	r3, r2
 80041aa:	d00b      	beq.n	80041c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	4a25      	ldr	r2, [pc, #148]	; (8004248 <UART_AdvFeatureConfig+0x158>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	0019      	movs	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	2240      	movs	r2, #64	; 0x40
 80041ca:	4013      	ands	r3, r2
 80041cc:	d01d      	beq.n	800420a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	; (800424c <UART_AdvFeatureConfig+0x15c>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	0019      	movs	r1, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	035b      	lsls	r3, r3, #13
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d10b      	bne.n	800420a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4a15      	ldr	r2, [pc, #84]	; (8004250 <UART_AdvFeatureConfig+0x160>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	0019      	movs	r1, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	2280      	movs	r2, #128	; 0x80
 8004210:	4013      	ands	r3, r2
 8004212:	d00b      	beq.n	800422c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <UART_AdvFeatureConfig+0x164>)
 800421c:	4013      	ands	r3, r2
 800421e:	0019      	movs	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }
}
 800422c:	46c0      	nop			; (mov r8, r8)
 800422e:	46bd      	mov	sp, r7
 8004230:	b002      	add	sp, #8
 8004232:	bd80      	pop	{r7, pc}
 8004234:	ffff7fff 	.word	0xffff7fff
 8004238:	fffdffff 	.word	0xfffdffff
 800423c:	fffeffff 	.word	0xfffeffff
 8004240:	fffbffff 	.word	0xfffbffff
 8004244:	ffffefff 	.word	0xffffefff
 8004248:	ffffdfff 	.word	0xffffdfff
 800424c:	ffefffff 	.word	0xffefffff
 8004250:	ff9fffff 	.word	0xff9fffff
 8004254:	fff7ffff 	.word	0xfff7ffff

08004258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b092      	sub	sp, #72	; 0x48
 800425c:	af02      	add	r7, sp, #8
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2290      	movs	r2, #144	; 0x90
 8004264:	2100      	movs	r1, #0
 8004266:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004268:	f7fd fc52 	bl	8001b10 <HAL_GetTick>
 800426c:	0003      	movs	r3, r0
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2208      	movs	r2, #8
 8004278:	4013      	ands	r3, r2
 800427a:	2b08      	cmp	r3, #8
 800427c:	d12d      	bne.n	80042da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	0391      	lsls	r1, r2, #14
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4a47      	ldr	r2, [pc, #284]	; (80043a4 <UART_CheckIdleState+0x14c>)
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	f000 f88e 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d022      	beq.n	80042da <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004294:	f3ef 8310 	mrs	r3, PRIMASK
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800429c:	63bb      	str	r3, [r7, #56]	; 0x38
 800429e:	2301      	movs	r3, #1
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	f383 8810 	msr	PRIMASK, r3
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2180      	movs	r1, #128	; 0x80
 80042b6:	438a      	bics	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c0:	f383 8810 	msr	PRIMASK, r3
}
 80042c4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2288      	movs	r2, #136	; 0x88
 80042ca:	2120      	movs	r1, #32
 80042cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2284      	movs	r2, #132	; 0x84
 80042d2:	2100      	movs	r1, #0
 80042d4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e060      	b.n	800439c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2204      	movs	r2, #4
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d146      	bne.n	8004376 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ea:	2280      	movs	r2, #128	; 0x80
 80042ec:	03d1      	lsls	r1, r2, #15
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4a2c      	ldr	r2, [pc, #176]	; (80043a4 <UART_CheckIdleState+0x14c>)
 80042f2:	9200      	str	r2, [sp, #0]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f000 f859 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 80042fa:	1e03      	subs	r3, r0, #0
 80042fc:	d03b      	beq.n	8004376 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004302:	60fb      	str	r3, [r7, #12]
  return(result);
 8004304:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
 8004308:	2301      	movs	r3, #1
 800430a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f383 8810 	msr	PRIMASK, r3
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4922      	ldr	r1, [pc, #136]	; (80043a8 <UART_CheckIdleState+0x150>)
 8004320:	400a      	ands	r2, r1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f383 8810 	msr	PRIMASK, r3
}
 800432e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004330:	f3ef 8310 	mrs	r3, PRIMASK
 8004334:	61bb      	str	r3, [r7, #24]
  return(result);
 8004336:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	633b      	str	r3, [r7, #48]	; 0x30
 800433a:	2301      	movs	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f383 8810 	msr	PRIMASK, r3
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	438a      	bics	r2, r1
 8004354:	609a      	str	r2, [r3, #8]
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	f383 8810 	msr	PRIMASK, r3
}
 8004360:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	228c      	movs	r2, #140	; 0x8c
 8004366:	2120      	movs	r1, #32
 8004368:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2284      	movs	r2, #132	; 0x84
 800436e:	2100      	movs	r1, #0
 8004370:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e012      	b.n	800439c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2288      	movs	r2, #136	; 0x88
 800437a:	2120      	movs	r1, #32
 800437c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	228c      	movs	r2, #140	; 0x8c
 8004382:	2120      	movs	r1, #32
 8004384:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2284      	movs	r2, #132	; 0x84
 8004396:	2100      	movs	r1, #0
 8004398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	0018      	movs	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	b010      	add	sp, #64	; 0x40
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	01ffffff 	.word	0x01ffffff
 80043a8:	fffffedf 	.word	0xfffffedf

080043ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	1dfb      	adds	r3, r7, #7
 80043ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043bc:	e051      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	3301      	adds	r3, #1
 80043c2:	d04e      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c4:	f7fd fba4 	bl	8001b10 <HAL_GetTick>
 80043c8:	0002      	movs	r2, r0
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d302      	bcc.n	80043da <UART_WaitOnFlagUntilTimeout+0x2e>
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e051      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2204      	movs	r2, #4
 80043e6:	4013      	ands	r3, r2
 80043e8:	d03b      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb6>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d038      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb6>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d035      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	2208      	movs	r2, #8
 80043fe:	4013      	ands	r3, r2
 8004400:	2b08      	cmp	r3, #8
 8004402:	d111      	bne.n	8004428 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2208      	movs	r2, #8
 800440a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	0018      	movs	r0, r3
 8004410:	f000 f960 	bl	80046d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2290      	movs	r2, #144	; 0x90
 8004418:	2108      	movs	r1, #8
 800441a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2284      	movs	r2, #132	; 0x84
 8004420:	2100      	movs	r1, #0
 8004422:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e02c      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	401a      	ands	r2, r3
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	429a      	cmp	r2, r3
 800443a:	d112      	bne.n	8004462 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2280      	movs	r2, #128	; 0x80
 8004442:	0112      	lsls	r2, r2, #4
 8004444:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	0018      	movs	r0, r3
 800444a:	f000 f943 	bl	80046d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2290      	movs	r2, #144	; 0x90
 8004452:	2120      	movs	r1, #32
 8004454:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2284      	movs	r2, #132	; 0x84
 800445a:	2100      	movs	r1, #0
 800445c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e00f      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	4013      	ands	r3, r2
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	425a      	negs	r2, r3
 8004472:	4153      	adcs	r3, r2
 8004474:	b2db      	uxtb	r3, r3
 8004476:	001a      	movs	r2, r3
 8004478:	1dfb      	adds	r3, r7, #7
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d09e      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b004      	add	sp, #16
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b098      	sub	sp, #96	; 0x60
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	1dbb      	adds	r3, r7, #6
 8004498:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1dba      	adds	r2, r7, #6
 80044a4:	215c      	movs	r1, #92	; 0x5c
 80044a6:	8812      	ldrh	r2, [r2, #0]
 80044a8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	1dba      	adds	r2, r7, #6
 80044ae:	215e      	movs	r1, #94	; 0x5e
 80044b0:	8812      	ldrh	r2, [r2, #0]
 80044b2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	015b      	lsls	r3, r3, #5
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d10d      	bne.n	80044e2 <UART_Start_Receive_IT+0x56>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d104      	bne.n	80044d8 <UART_Start_Receive_IT+0x4c>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2260      	movs	r2, #96	; 0x60
 80044d2:	497b      	ldr	r1, [pc, #492]	; (80046c0 <UART_Start_Receive_IT+0x234>)
 80044d4:	5299      	strh	r1, [r3, r2]
 80044d6:	e02e      	b.n	8004536 <UART_Start_Receive_IT+0xaa>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2260      	movs	r2, #96	; 0x60
 80044dc:	21ff      	movs	r1, #255	; 0xff
 80044de:	5299      	strh	r1, [r3, r2]
 80044e0:	e029      	b.n	8004536 <UART_Start_Receive_IT+0xaa>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <UART_Start_Receive_IT+0x7a>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <UART_Start_Receive_IT+0x70>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2260      	movs	r2, #96	; 0x60
 80044f6:	21ff      	movs	r1, #255	; 0xff
 80044f8:	5299      	strh	r1, [r3, r2]
 80044fa:	e01c      	b.n	8004536 <UART_Start_Receive_IT+0xaa>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2260      	movs	r2, #96	; 0x60
 8004500:	217f      	movs	r1, #127	; 0x7f
 8004502:	5299      	strh	r1, [r3, r2]
 8004504:	e017      	b.n	8004536 <UART_Start_Receive_IT+0xaa>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	055b      	lsls	r3, r3, #21
 800450e:	429a      	cmp	r2, r3
 8004510:	d10d      	bne.n	800452e <UART_Start_Receive_IT+0xa2>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <UART_Start_Receive_IT+0x98>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2260      	movs	r2, #96	; 0x60
 800451e:	217f      	movs	r1, #127	; 0x7f
 8004520:	5299      	strh	r1, [r3, r2]
 8004522:	e008      	b.n	8004536 <UART_Start_Receive_IT+0xaa>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2260      	movs	r2, #96	; 0x60
 8004528:	213f      	movs	r1, #63	; 0x3f
 800452a:	5299      	strh	r1, [r3, r2]
 800452c:	e003      	b.n	8004536 <UART_Start_Receive_IT+0xaa>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2260      	movs	r2, #96	; 0x60
 8004532:	2100      	movs	r1, #0
 8004534:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2290      	movs	r2, #144	; 0x90
 800453a:	2100      	movs	r1, #0
 800453c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	228c      	movs	r2, #140	; 0x8c
 8004542:	2122      	movs	r1, #34	; 0x22
 8004544:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004546:	f3ef 8310 	mrs	r3, PRIMASK
 800454a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800454c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004550:	2301      	movs	r3, #1
 8004552:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004556:	f383 8810 	msr	PRIMASK, r3
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2101      	movs	r1, #1
 8004568:	430a      	orrs	r2, r1
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004572:	f383 8810 	msr	PRIMASK, r3
}
 8004576:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	059b      	lsls	r3, r3, #22
 8004580:	429a      	cmp	r2, r3
 8004582:	d150      	bne.n	8004626 <UART_Start_Receive_IT+0x19a>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2268      	movs	r2, #104	; 0x68
 8004588:	5a9b      	ldrh	r3, [r3, r2]
 800458a:	1dba      	adds	r2, r7, #6
 800458c:	8812      	ldrh	r2, [r2, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d349      	bcc.n	8004626 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	2380      	movs	r3, #128	; 0x80
 8004598:	015b      	lsls	r3, r3, #5
 800459a:	429a      	cmp	r2, r3
 800459c:	d107      	bne.n	80045ae <UART_Start_Receive_IT+0x122>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d103      	bne.n	80045ae <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4a46      	ldr	r2, [pc, #280]	; (80046c4 <UART_Start_Receive_IT+0x238>)
 80045aa:	675a      	str	r2, [r3, #116]	; 0x74
 80045ac:	e002      	b.n	80045b4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a45      	ldr	r2, [pc, #276]	; (80046c8 <UART_Start_Receive_IT+0x23c>)
 80045b2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d019      	beq.n	80045f0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045bc:	f3ef 8310 	mrs	r3, PRIMASK
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80045c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80045c6:	2301      	movs	r3, #1
 80045c8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	f383 8810 	msr	PRIMASK, r3
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	0049      	lsls	r1, r1, #1
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ea:	f383 8810 	msr	PRIMASK, r3
}
 80045ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f0:	f3ef 8310 	mrs	r3, PRIMASK
 80045f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80045f8:	657b      	str	r3, [r7, #84]	; 0x54
 80045fa:	2301      	movs	r3, #1
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	f383 8810 	msr	PRIMASK, r3
}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2180      	movs	r1, #128	; 0x80
 8004612:	0549      	lsls	r1, r1, #21
 8004614:	430a      	orrs	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	f383 8810 	msr	PRIMASK, r3
}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	e047      	b.n	80046b6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	015b      	lsls	r3, r3, #5
 800462e:	429a      	cmp	r2, r3
 8004630:	d107      	bne.n	8004642 <UART_Start_Receive_IT+0x1b6>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a23      	ldr	r2, [pc, #140]	; (80046cc <UART_Start_Receive_IT+0x240>)
 800463e:	675a      	str	r2, [r3, #116]	; 0x74
 8004640:	e002      	b.n	8004648 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4a22      	ldr	r2, [pc, #136]	; (80046d0 <UART_Start_Receive_IT+0x244>)
 8004646:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d019      	beq.n	8004684 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004650:	f3ef 8310 	mrs	r3, PRIMASK
 8004654:	61fb      	str	r3, [r7, #28]
  return(result);
 8004656:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800465a:	2301      	movs	r3, #1
 800465c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f383 8810 	msr	PRIMASK, r3
}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2190      	movs	r1, #144	; 0x90
 8004672:	0049      	lsls	r1, r1, #1
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	f383 8810 	msr	PRIMASK, r3
}
 8004682:	e018      	b.n	80046b6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004684:	f3ef 8310 	mrs	r3, PRIMASK
 8004688:	613b      	str	r3, [r7, #16]
  return(result);
 800468a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800468c:	653b      	str	r3, [r7, #80]	; 0x50
 800468e:	2301      	movs	r3, #1
 8004690:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f383 8810 	msr	PRIMASK, r3
}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2120      	movs	r1, #32
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f383 8810 	msr	PRIMASK, r3
}
 80046b4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	0018      	movs	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b018      	add	sp, #96	; 0x60
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	000001ff 	.word	0x000001ff
 80046c4:	08004f1d 	.word	0x08004f1d
 80046c8:	08004bd1 	.word	0x08004bd1
 80046cc:	080049fd 	.word	0x080049fd
 80046d0:	08004829 	.word	0x08004829

080046d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08e      	sub	sp, #56	; 0x38
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046dc:	f3ef 8310 	mrs	r3, PRIMASK
 80046e0:	617b      	str	r3, [r7, #20]
  return(result);
 80046e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
 80046e6:	2301      	movs	r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	46c0      	nop			; (mov r8, r8)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4926      	ldr	r1, [pc, #152]	; (8004798 <UART_EndRxTransfer+0xc4>)
 80046fe:	400a      	ands	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470e:	f3ef 8310 	mrs	r3, PRIMASK
 8004712:	623b      	str	r3, [r7, #32]
  return(result);
 8004714:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
 8004718:	2301      	movs	r3, #1
 800471a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	491b      	ldr	r1, [pc, #108]	; (800479c <UART_EndRxTransfer+0xc8>)
 8004730:	400a      	ands	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d118      	bne.n	800477a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004748:	f3ef 8310 	mrs	r3, PRIMASK
 800474c:	60bb      	str	r3, [r7, #8]
  return(result);
 800474e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004752:	2301      	movs	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f383 8810 	msr	PRIMASK, r3
}
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2110      	movs	r1, #16
 800476a:	438a      	bics	r2, r1
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f383 8810 	msr	PRIMASK, r3
}
 8004778:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	228c      	movs	r2, #140	; 0x8c
 800477e:	2120      	movs	r1, #32
 8004780:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	46bd      	mov	sp, r7
 8004792:	b00e      	add	sp, #56	; 0x38
 8004794:	bd80      	pop	{r7, pc}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	fffffedf 	.word	0xfffffedf
 800479c:	effffffe 	.word	0xeffffffe

080047a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	225e      	movs	r2, #94	; 0x5e
 80047b2:	2100      	movs	r1, #0
 80047b4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2256      	movs	r2, #86	; 0x56
 80047ba:	2100      	movs	r1, #0
 80047bc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7ff f92b 	bl	8003a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b004      	add	sp, #16
 80047cc:	bd80      	pop	{r7, pc}

080047ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b086      	sub	sp, #24
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d6:	f3ef 8310 	mrs	r3, PRIMASK
 80047da:	60bb      	str	r3, [r7, #8]
  return(result);
 80047dc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	2301      	movs	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f383 8810 	msr	PRIMASK, r3
}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2140      	movs	r1, #64	; 0x40
 80047f8:	438a      	bics	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f383 8810 	msr	PRIMASK, r3
}
 8004806:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2288      	movs	r2, #136	; 0x88
 800480c:	2120      	movs	r1, #32
 800480e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f7ff f8ef 	bl	80039fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	46bd      	mov	sp, r7
 8004822:	b006      	add	sp, #24
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b094      	sub	sp, #80	; 0x50
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004830:	204e      	movs	r0, #78	; 0x4e
 8004832:	183b      	adds	r3, r7, r0
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	2160      	movs	r1, #96	; 0x60
 8004838:	5a52      	ldrh	r2, [r2, r1]
 800483a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	228c      	movs	r2, #140	; 0x8c
 8004840:	589b      	ldr	r3, [r3, r2]
 8004842:	2b22      	cmp	r3, #34	; 0x22
 8004844:	d000      	beq.n	8004848 <UART_RxISR_8BIT+0x20>
 8004846:	e0c4      	b.n	80049d2 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800484e:	214c      	movs	r1, #76	; 0x4c
 8004850:	187b      	adds	r3, r7, r1
 8004852:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004854:	187b      	adds	r3, r7, r1
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	183b      	adds	r3, r7, r0
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b2d9      	uxtb	r1, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	400a      	ands	r2, r1
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	225e      	movs	r2, #94	; 0x5e
 8004878:	5a9b      	ldrh	r3, [r3, r2]
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b299      	uxth	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	225e      	movs	r2, #94	; 0x5e
 8004884:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	225e      	movs	r2, #94	; 0x5e
 800488a:	5a9b      	ldrh	r3, [r3, r2]
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d000      	beq.n	8004894 <UART_RxISR_8BIT+0x6c>
 8004892:	e0a6      	b.n	80049e2 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004894:	f3ef 8310 	mrs	r3, PRIMASK
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800489c:	64bb      	str	r3, [r7, #72]	; 0x48
 800489e:	2301      	movs	r3, #1
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	f383 8810 	msr	PRIMASK, r3
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	494d      	ldr	r1, [pc, #308]	; (80049ec <UART_RxISR_8BIT+0x1c4>)
 80048b6:	400a      	ands	r2, r1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	f383 8810 	msr	PRIMASK, r3
}
 80048c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	647b      	str	r3, [r7, #68]	; 0x44
 80048d0:	2301      	movs	r3, #1
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d6:	f383 8810 	msr	PRIMASK, r3
}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2101      	movs	r1, #1
 80048e8:	438a      	bics	r2, r1
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	f383 8810 	msr	PRIMASK, r3
}
 80048f6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	228c      	movs	r2, #140	; 0x8c
 80048fc:	2120      	movs	r1, #32
 80048fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a37      	ldr	r2, [pc, #220]	; (80049f0 <UART_RxISR_8BIT+0x1c8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d024      	beq.n	8004960 <UART_RxISR_8BIT+0x138>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a36      	ldr	r2, [pc, #216]	; (80049f4 <UART_RxISR_8BIT+0x1cc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d01f      	beq.n	8004960 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	4013      	ands	r3, r2
 800492c:	d018      	beq.n	8004960 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800492e:	f3ef 8310 	mrs	r3, PRIMASK
 8004932:	61bb      	str	r3, [r7, #24]
  return(result);
 8004934:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004936:	643b      	str	r3, [r7, #64]	; 0x40
 8004938:	2301      	movs	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f383 8810 	msr	PRIMASK, r3
}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	492a      	ldr	r1, [pc, #168]	; (80049f8 <UART_RxISR_8BIT+0x1d0>)
 8004950:	400a      	ands	r2, r1
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004956:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f383 8810 	msr	PRIMASK, r3
}
 800495e:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d12f      	bne.n	80049c8 <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800496e:	f3ef 8310 	mrs	r3, PRIMASK
 8004972:	60fb      	str	r3, [r7, #12]
  return(result);
 8004974:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004978:	2301      	movs	r3, #1
 800497a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f383 8810 	msr	PRIMASK, r3
}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2110      	movs	r1, #16
 8004990:	438a      	bics	r2, r1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004996:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f383 8810 	msr	PRIMASK, r3
}
 800499e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	2210      	movs	r2, #16
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d103      	bne.n	80049b6 <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2210      	movs	r2, #16
 80049b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	225c      	movs	r2, #92	; 0x5c
 80049ba:	5a9a      	ldrh	r2, [r3, r2]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	0011      	movs	r1, r2
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7ff f833 	bl	8003a2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049c6:	e00c      	b.n	80049e2 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7ff f81e 	bl	8003a0c <HAL_UART_RxCpltCallback>
}
 80049d0:	e007      	b.n	80049e2 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2108      	movs	r1, #8
 80049de:	430a      	orrs	r2, r1
 80049e0:	619a      	str	r2, [r3, #24]
}
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b014      	add	sp, #80	; 0x50
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	fffffedf 	.word	0xfffffedf
 80049f0:	40008000 	.word	0x40008000
 80049f4:	40008400 	.word	0x40008400
 80049f8:	fbffffff 	.word	0xfbffffff

080049fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b094      	sub	sp, #80	; 0x50
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004a04:	204e      	movs	r0, #78	; 0x4e
 8004a06:	183b      	adds	r3, r7, r0
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	2160      	movs	r1, #96	; 0x60
 8004a0c:	5a52      	ldrh	r2, [r2, r1]
 8004a0e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	228c      	movs	r2, #140	; 0x8c
 8004a14:	589b      	ldr	r3, [r3, r2]
 8004a16:	2b22      	cmp	r3, #34	; 0x22
 8004a18:	d000      	beq.n	8004a1c <UART_RxISR_16BIT+0x20>
 8004a1a:	e0c4      	b.n	8004ba6 <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a22:	214c      	movs	r1, #76	; 0x4c
 8004a24:	187b      	adds	r3, r7, r1
 8004a26:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a2e:	187b      	adds	r3, r7, r1
 8004a30:	183a      	adds	r2, r7, r0
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	8812      	ldrh	r2, [r2, #0]
 8004a36:	4013      	ands	r3, r2
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	1c9a      	adds	r2, r3, #2
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	225e      	movs	r2, #94	; 0x5e
 8004a4c:	5a9b      	ldrh	r3, [r3, r2]
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b299      	uxth	r1, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	225e      	movs	r2, #94	; 0x5e
 8004a58:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	225e      	movs	r2, #94	; 0x5e
 8004a5e:	5a9b      	ldrh	r3, [r3, r2]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d000      	beq.n	8004a68 <UART_RxISR_16BIT+0x6c>
 8004a66:	e0a6      	b.n	8004bb6 <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a68:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6c:	623b      	str	r3, [r7, #32]
  return(result);
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a70:	647b      	str	r3, [r7, #68]	; 0x44
 8004a72:	2301      	movs	r3, #1
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	f383 8810 	msr	PRIMASK, r3
}
 8004a7c:	46c0      	nop			; (mov r8, r8)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <UART_RxISR_16BIT+0x1c4>)
 8004a8a:	400a      	ands	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	f383 8810 	msr	PRIMASK, r3
}
 8004a98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	f383 8810 	msr	PRIMASK, r3
}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2101      	movs	r1, #1
 8004abc:	438a      	bics	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
 8004ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac6:	f383 8810 	msr	PRIMASK, r3
}
 8004aca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	228c      	movs	r2, #140	; 0x8c
 8004ad0:	2120      	movs	r1, #32
 8004ad2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a37      	ldr	r2, [pc, #220]	; (8004bc4 <UART_RxISR_16BIT+0x1c8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d024      	beq.n	8004b34 <UART_RxISR_16BIT+0x138>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a36      	ldr	r2, [pc, #216]	; (8004bc8 <UART_RxISR_16BIT+0x1cc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d01f      	beq.n	8004b34 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	4013      	ands	r3, r2
 8004b00:	d018      	beq.n	8004b34 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b02:	f3ef 8310 	mrs	r3, PRIMASK
 8004b06:	617b      	str	r3, [r7, #20]
  return(result);
 8004b08:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f383 8810 	msr	PRIMASK, r3
}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	492a      	ldr	r1, [pc, #168]	; (8004bcc <UART_RxISR_16BIT+0x1d0>)
 8004b24:	400a      	ands	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f383 8810 	msr	PRIMASK, r3
}
 8004b32:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d12f      	bne.n	8004b9c <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b42:	f3ef 8310 	mrs	r3, PRIMASK
 8004b46:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b48:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f383 8810 	msr	PRIMASK, r3
}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2110      	movs	r1, #16
 8004b64:	438a      	bics	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f383 8810 	msr	PRIMASK, r3
}
 8004b72:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	2210      	movs	r2, #16
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d103      	bne.n	8004b8a <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2210      	movs	r2, #16
 8004b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	225c      	movs	r2, #92	; 0x5c
 8004b8e:	5a9a      	ldrh	r2, [r3, r2]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	0011      	movs	r1, r2
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7fe ff49 	bl	8003a2c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b9a:	e00c      	b.n	8004bb6 <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fe ff34 	bl	8003a0c <HAL_UART_RxCpltCallback>
}
 8004ba4:	e007      	b.n	8004bb6 <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699a      	ldr	r2, [r3, #24]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2108      	movs	r1, #8
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	619a      	str	r2, [r3, #24]
}
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b014      	add	sp, #80	; 0x50
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	fffffedf 	.word	0xfffffedf
 8004bc4:	40008000 	.word	0x40008000
 8004bc8:	40008400 	.word	0x40008400
 8004bcc:	fbffffff 	.word	0xfbffffff

08004bd0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0a0      	sub	sp, #128	; 0x80
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004bd8:	237a      	movs	r3, #122	; 0x7a
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	2160      	movs	r1, #96	; 0x60
 8004be0:	5a52      	ldrh	r2, [r2, r1]
 8004be2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	228c      	movs	r2, #140	; 0x8c
 8004c00:	589b      	ldr	r3, [r3, r2]
 8004c02:	2b22      	cmp	r3, #34	; 0x22
 8004c04:	d000      	beq.n	8004c08 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004c06:	e16f      	b.n	8004ee8 <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004c08:	236e      	movs	r3, #110	; 0x6e
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	2168      	movs	r1, #104	; 0x68
 8004c10:	5a52      	ldrh	r2, [r2, r1]
 8004c12:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c14:	e116      	b.n	8004e44 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c1c:	216c      	movs	r1, #108	; 0x6c
 8004c1e:	187b      	adds	r3, r7, r1
 8004c20:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004c22:	187b      	adds	r3, r7, r1
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	237a      	movs	r3, #122	; 0x7a
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b2d9      	uxtb	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c34:	400a      	ands	r2, r1
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	225e      	movs	r2, #94	; 0x5e
 8004c48:	5a9b      	ldrh	r3, [r3, r2]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b299      	uxth	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	225e      	movs	r2, #94	; 0x5e
 8004c54:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004c5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c60:	2207      	movs	r2, #7
 8004c62:	4013      	ands	r3, r2
 8004c64:	d049      	beq.n	8004cfa <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c68:	2201      	movs	r2, #1
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d010      	beq.n	8004c90 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004c6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4013      	ands	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2290      	movs	r2, #144	; 0x90
 8004c84:	589b      	ldr	r3, [r3, r2]
 8004c86:	2201      	movs	r2, #1
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2190      	movs	r1, #144	; 0x90
 8004c8e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c92:	2202      	movs	r2, #2
 8004c94:	4013      	ands	r3, r2
 8004c96:	d00f      	beq.n	8004cb8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d00b      	beq.n	8004cb8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2290      	movs	r2, #144	; 0x90
 8004cac:	589b      	ldr	r3, [r3, r2]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2190      	movs	r1, #144	; 0x90
 8004cb6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cba:	2204      	movs	r2, #4
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d00f      	beq.n	8004ce0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	d00b      	beq.n	8004ce0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2204      	movs	r2, #4
 8004cce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2290      	movs	r2, #144	; 0x90
 8004cd4:	589b      	ldr	r3, [r3, r2]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2190      	movs	r1, #144	; 0x90
 8004cde:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2290      	movs	r2, #144	; 0x90
 8004ce4:	589b      	ldr	r3, [r3, r2]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7fe fe95 	bl	8003a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2290      	movs	r2, #144	; 0x90
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	225e      	movs	r2, #94	; 0x5e
 8004cfe:	5a9b      	ldrh	r3, [r3, r2]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d000      	beq.n	8004d08 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004d06:	e09d      	b.n	8004e44 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d08:	f3ef 8310 	mrs	r3, PRIMASK
 8004d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d12:	2301      	movs	r3, #1
 8004d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	f383 8810 	msr	PRIMASK, r3
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4975      	ldr	r1, [pc, #468]	; (8004f00 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d34:	f383 8810 	msr	PRIMASK, r3
}
 8004d38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d3e:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8004d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d42:	667b      	str	r3, [r7, #100]	; 0x64
 8004d44:	2301      	movs	r3, #1
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4a:	f383 8810 	msr	PRIMASK, r3
}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	496a      	ldr	r1, [pc, #424]	; (8004f04 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	609a      	str	r2, [r3, #8]
 8004d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d66:	f383 8810 	msr	PRIMASK, r3
}
 8004d6a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	228c      	movs	r2, #140	; 0x8c
 8004d70:	2120      	movs	r1, #32
 8004d72:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a60      	ldr	r2, [pc, #384]	; (8004f08 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d024      	beq.n	8004dd4 <UART_RxISR_8BIT_FIFOEN+0x204>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a5f      	ldr	r2, [pc, #380]	; (8004f0c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d01f      	beq.n	8004dd4 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	041b      	lsls	r3, r3, #16
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d018      	beq.n	8004dd4 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da2:	f3ef 8310 	mrs	r3, PRIMASK
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004daa:	663b      	str	r3, [r7, #96]	; 0x60
 8004dac:	2301      	movs	r3, #1
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	f383 8810 	msr	PRIMASK, r3
}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4953      	ldr	r1, [pc, #332]	; (8004f10 <UART_RxISR_8BIT_FIFOEN+0x340>)
 8004dc4:	400a      	ands	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dce:	f383 8810 	msr	PRIMASK, r3
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d12f      	bne.n	8004e3c <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de2:	f3ef 8310 	mrs	r3, PRIMASK
 8004de6:	623b      	str	r3, [r7, #32]
  return(result);
 8004de8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dec:	2301      	movs	r3, #1
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	f383 8810 	msr	PRIMASK, r3
}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2110      	movs	r1, #16
 8004e04:	438a      	bics	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	f383 8810 	msr	PRIMASK, r3
}
 8004e12:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	2210      	movs	r2, #16
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d103      	bne.n	8004e2a <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2210      	movs	r2, #16
 8004e28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	225c      	movs	r2, #92	; 0x5c
 8004e2e:	5a9a      	ldrh	r2, [r3, r2]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	0011      	movs	r1, r2
 8004e34:	0018      	movs	r0, r3
 8004e36:	f7fe fdf9 	bl	8003a2c <HAL_UARTEx_RxEventCallback>
 8004e3a:	e003      	b.n	8004e44 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f7fe fde4 	bl	8003a0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e44:	236e      	movs	r3, #110	; 0x6e
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d004      	beq.n	8004e58 <UART_RxISR_8BIT_FIFOEN+0x288>
 8004e4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e50:	2220      	movs	r2, #32
 8004e52:	4013      	ands	r3, r2
 8004e54:	d000      	beq.n	8004e58 <UART_RxISR_8BIT_FIFOEN+0x288>
 8004e56:	e6de      	b.n	8004c16 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004e58:	205a      	movs	r0, #90	; 0x5a
 8004e5a:	183b      	adds	r3, r7, r0
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	215e      	movs	r1, #94	; 0x5e
 8004e60:	5a52      	ldrh	r2, [r2, r1]
 8004e62:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004e64:	0001      	movs	r1, r0
 8004e66:	187b      	adds	r3, r7, r1
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d044      	beq.n	8004ef8 <UART_RxISR_8BIT_FIFOEN+0x328>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2268      	movs	r2, #104	; 0x68
 8004e72:	5a9b      	ldrh	r3, [r3, r2]
 8004e74:	187a      	adds	r2, r7, r1
 8004e76:	8812      	ldrh	r2, [r2, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d23d      	bcs.n	8004ef8 <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e80:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e82:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e84:	657b      	str	r3, [r7, #84]	; 0x54
 8004e86:	2301      	movs	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f383 8810 	msr	PRIMASK, r3
}
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	491d      	ldr	r1, [pc, #116]	; (8004f14 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8004e9e:	400a      	ands	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f383 8810 	msr	PRIMASK, r3
}
 8004eac:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a19      	ldr	r2, [pc, #100]	; (8004f18 <UART_RxISR_8BIT_FIFOEN+0x348>)
 8004eb2:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb8:	617b      	str	r3, [r7, #20]
  return(result);
 8004eba:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ebc:	653b      	str	r3, [r7, #80]	; 0x50
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f383 8810 	msr	PRIMASK, r3
}
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004edc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f383 8810 	msr	PRIMASK, r3
}
 8004ee4:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ee6:	e007      	b.n	8004ef8 <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2108      	movs	r1, #8
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	619a      	str	r2, [r3, #24]
}
 8004ef8:	46c0      	nop			; (mov r8, r8)
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b020      	add	sp, #128	; 0x80
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	fffffeff 	.word	0xfffffeff
 8004f04:	effffffe 	.word	0xeffffffe
 8004f08:	40008000 	.word	0x40008000
 8004f0c:	40008400 	.word	0x40008400
 8004f10:	fbffffff 	.word	0xfbffffff
 8004f14:	efffffff 	.word	0xefffffff
 8004f18:	08004829 	.word	0x08004829

08004f1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b0a2      	sub	sp, #136	; 0x88
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004f24:	2382      	movs	r3, #130	; 0x82
 8004f26:	18fb      	adds	r3, r7, r3
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	2160      	movs	r1, #96	; 0x60
 8004f2c:	5a52      	ldrh	r2, [r2, r1]
 8004f2e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	2284      	movs	r2, #132	; 0x84
 8004f38:	18ba      	adds	r2, r7, r2
 8004f3a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	228c      	movs	r2, #140	; 0x8c
 8004f50:	589b      	ldr	r3, [r3, r2]
 8004f52:	2b22      	cmp	r3, #34	; 0x22
 8004f54:	d000      	beq.n	8004f58 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8004f56:	e179      	b.n	800524c <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004f58:	2376      	movs	r3, #118	; 0x76
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	2168      	movs	r1, #104	; 0x68
 8004f60:	5a52      	ldrh	r2, [r2, r1]
 8004f62:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f64:	e11e      	b.n	80051a4 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f6c:	2174      	movs	r1, #116	; 0x74
 8004f6e:	187b      	adds	r3, r7, r1
 8004f70:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f76:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8004f78:	187b      	adds	r3, r7, r1
 8004f7a:	2282      	movs	r2, #130	; 0x82
 8004f7c:	18ba      	adds	r2, r7, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	8812      	ldrh	r2, [r2, #0]
 8004f82:	4013      	ands	r3, r2
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	1c9a      	adds	r2, r3, #2
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	225e      	movs	r2, #94	; 0x5e
 8004f98:	5a9b      	ldrh	r3, [r3, r2]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b299      	uxth	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	225e      	movs	r2, #94	; 0x5e
 8004fa4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	2184      	movs	r1, #132	; 0x84
 8004fae:	187a      	adds	r2, r7, r1
 8004fb0:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004fb2:	187b      	adds	r3, r7, r1
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2207      	movs	r2, #7
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d04e      	beq.n	800505a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fbc:	187b      	adds	r3, r7, r1
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d010      	beq.n	8004fe8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8004fc6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2290      	movs	r2, #144	; 0x90
 8004fdc:	589b      	ldr	r3, [r3, r2]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2190      	movs	r1, #144	; 0x90
 8004fe6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe8:	2384      	movs	r3, #132	; 0x84
 8004fea:	18fb      	adds	r3, r7, r3
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d00f      	beq.n	8005014 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d00b      	beq.n	8005014 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2202      	movs	r2, #2
 8005002:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2290      	movs	r2, #144	; 0x90
 8005008:	589b      	ldr	r3, [r3, r2]
 800500a:	2204      	movs	r2, #4
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2190      	movs	r1, #144	; 0x90
 8005012:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005014:	2384      	movs	r3, #132	; 0x84
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2204      	movs	r2, #4
 800501c:	4013      	ands	r3, r2
 800501e:	d00f      	beq.n	8005040 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005022:	2201      	movs	r2, #1
 8005024:	4013      	ands	r3, r2
 8005026:	d00b      	beq.n	8005040 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2204      	movs	r2, #4
 800502e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2290      	movs	r2, #144	; 0x90
 8005034:	589b      	ldr	r3, [r3, r2]
 8005036:	2202      	movs	r2, #2
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2190      	movs	r1, #144	; 0x90
 800503e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2290      	movs	r2, #144	; 0x90
 8005044:	589b      	ldr	r3, [r3, r2]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d007      	beq.n	800505a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	0018      	movs	r0, r3
 800504e:	f7fe fce5 	bl	8003a1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2290      	movs	r2, #144	; 0x90
 8005056:	2100      	movs	r1, #0
 8005058:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	225e      	movs	r2, #94	; 0x5e
 800505e:	5a9b      	ldrh	r3, [r3, r2]
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d000      	beq.n	8005068 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005066:	e09d      	b.n	80051a4 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005068:	f3ef 8310 	mrs	r3, PRIMASK
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800506e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005070:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005072:	2301      	movs	r3, #1
 8005074:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005078:	f383 8810 	msr	PRIMASK, r3
}
 800507c:	46c0      	nop			; (mov r8, r8)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4976      	ldr	r1, [pc, #472]	; (8005264 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800508a:	400a      	ands	r2, r1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005090:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509a:	f3ef 8310 	mrs	r3, PRIMASK
 800509e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80050a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050a4:	2301      	movs	r3, #1
 80050a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050aa:	f383 8810 	msr	PRIMASK, r3
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	496b      	ldr	r1, [pc, #428]	; (8005268 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80050bc:	400a      	ands	r2, r1
 80050be:	609a      	str	r2, [r3, #8]
 80050c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c6:	f383 8810 	msr	PRIMASK, r3
}
 80050ca:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	228c      	movs	r2, #140	; 0x8c
 80050d0:	2120      	movs	r1, #32
 80050d2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a61      	ldr	r2, [pc, #388]	; (800526c <UART_RxISR_16BIT_FIFOEN+0x350>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d024      	beq.n	8005134 <UART_RxISR_16BIT_FIFOEN+0x218>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a60      	ldr	r2, [pc, #384]	; (8005270 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d01f      	beq.n	8005134 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	2380      	movs	r3, #128	; 0x80
 80050fc:	041b      	lsls	r3, r3, #16
 80050fe:	4013      	ands	r3, r2
 8005100:	d018      	beq.n	8005134 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005102:	f3ef 8310 	mrs	r3, PRIMASK
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800510a:	667b      	str	r3, [r7, #100]	; 0x64
 800510c:	2301      	movs	r3, #1
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4954      	ldr	r1, [pc, #336]	; (8005274 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8005124:	400a      	ands	r2, r1
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800512a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	f383 8810 	msr	PRIMASK, r3
}
 8005132:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d12f      	bne.n	800519c <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005142:	f3ef 8310 	mrs	r3, PRIMASK
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800514a:	663b      	str	r3, [r7, #96]	; 0x60
 800514c:	2301      	movs	r3, #1
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	f383 8810 	msr	PRIMASK, r3
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2110      	movs	r1, #16
 8005164:	438a      	bics	r2, r1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	f383 8810 	msr	PRIMASK, r3
}
 8005172:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	2210      	movs	r2, #16
 800517c:	4013      	ands	r3, r2
 800517e:	2b10      	cmp	r3, #16
 8005180:	d103      	bne.n	800518a <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2210      	movs	r2, #16
 8005188:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	225c      	movs	r2, #92	; 0x5c
 800518e:	5a9a      	ldrh	r2, [r3, r2]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	0011      	movs	r1, r2
 8005194:	0018      	movs	r0, r3
 8005196:	f7fe fc49 	bl	8003a2c <HAL_UARTEx_RxEventCallback>
 800519a:	e003      	b.n	80051a4 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0018      	movs	r0, r3
 80051a0:	f7fe fc34 	bl	8003a0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051a4:	2376      	movs	r3, #118	; 0x76
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d006      	beq.n	80051bc <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80051ae:	2384      	movs	r3, #132	; 0x84
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2220      	movs	r2, #32
 80051b6:	4013      	ands	r3, r2
 80051b8:	d000      	beq.n	80051bc <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80051ba:	e6d4      	b.n	8004f66 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80051bc:	205e      	movs	r0, #94	; 0x5e
 80051be:	183b      	adds	r3, r7, r0
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	215e      	movs	r1, #94	; 0x5e
 80051c4:	5a52      	ldrh	r2, [r2, r1]
 80051c6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80051c8:	0001      	movs	r1, r0
 80051ca:	187b      	adds	r3, r7, r1
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d044      	beq.n	800525c <UART_RxISR_16BIT_FIFOEN+0x340>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2268      	movs	r2, #104	; 0x68
 80051d6:	5a9b      	ldrh	r3, [r3, r2]
 80051d8:	187a      	adds	r2, r7, r1
 80051da:	8812      	ldrh	r2, [r2, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d23d      	bcs.n	800525c <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e0:	f3ef 8310 	mrs	r3, PRIMASK
 80051e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80051e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80051e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ea:	2301      	movs	r3, #1
 80051ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f383 8810 	msr	PRIMASK, r3
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	491d      	ldr	r1, [pc, #116]	; (8005278 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8005202:	400a      	ands	r2, r1
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005208:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f383 8810 	msr	PRIMASK, r3
}
 8005210:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a19      	ldr	r2, [pc, #100]	; (800527c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005216:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005218:	f3ef 8310 	mrs	r3, PRIMASK
 800521c:	61bb      	str	r3, [r7, #24]
  return(result);
 800521e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005220:	657b      	str	r3, [r7, #84]	; 0x54
 8005222:	2301      	movs	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f383 8810 	msr	PRIMASK, r3
}
 800522c:	46c0      	nop			; (mov r8, r8)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2120      	movs	r1, #32
 800523a:	430a      	orrs	r2, r1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005240:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	f383 8810 	msr	PRIMASK, r3
}
 8005248:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800524a:	e007      	b.n	800525c <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2108      	movs	r1, #8
 8005258:	430a      	orrs	r2, r1
 800525a:	619a      	str	r2, [r3, #24]
}
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	46bd      	mov	sp, r7
 8005260:	b022      	add	sp, #136	; 0x88
 8005262:	bd80      	pop	{r7, pc}
 8005264:	fffffeff 	.word	0xfffffeff
 8005268:	effffffe 	.word	0xeffffffe
 800526c:	40008000 	.word	0x40008000
 8005270:	40008400 	.word	0x40008400
 8005274:	fbffffff 	.word	0xfbffffff
 8005278:	efffffff 	.word	0xefffffff
 800527c:	080049fd 	.word	0x080049fd

08005280 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	46bd      	mov	sp, r7
 800528c:	b002      	add	sp, #8
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005298:	46c0      	nop			; (mov r8, r8)
 800529a:	46bd      	mov	sp, r7
 800529c:	b002      	add	sp, #8
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b002      	add	sp, #8
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2284      	movs	r2, #132	; 0x84
 80052bc:	5c9b      	ldrb	r3, [r3, r2]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e027      	b.n	8005316 <HAL_UARTEx_DisableFifoMode+0x66>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2284      	movs	r2, #132	; 0x84
 80052ca:	2101      	movs	r1, #1
 80052cc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2288      	movs	r2, #136	; 0x88
 80052d2:	2124      	movs	r1, #36	; 0x24
 80052d4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2101      	movs	r1, #1
 80052ea:	438a      	bics	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a0b      	ldr	r2, [pc, #44]	; (8005320 <HAL_UARTEx_DisableFifoMode+0x70>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2288      	movs	r2, #136	; 0x88
 8005308:	2120      	movs	r1, #32
 800530a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2284      	movs	r2, #132	; 0x84
 8005310:	2100      	movs	r1, #0
 8005312:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	0018      	movs	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	b004      	add	sp, #16
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	dfffffff 	.word	0xdfffffff

08005324 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2284      	movs	r2, #132	; 0x84
 8005332:	5c9b      	ldrb	r3, [r3, r2]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005338:	2302      	movs	r3, #2
 800533a:	e02e      	b.n	800539a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2284      	movs	r2, #132	; 0x84
 8005340:	2101      	movs	r1, #1
 8005342:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2288      	movs	r2, #136	; 0x88
 8005348:	2124      	movs	r1, #36	; 0x24
 800534a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2101      	movs	r1, #1
 8005360:	438a      	bics	r2, r1
 8005362:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	08d9      	lsrs	r1, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	0018      	movs	r0, r3
 800537c:	f000 f854 	bl	8005428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2288      	movs	r2, #136	; 0x88
 800538c:	2120      	movs	r1, #32
 800538e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2284      	movs	r2, #132	; 0x84
 8005394:	2100      	movs	r1, #0
 8005396:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	0018      	movs	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	b004      	add	sp, #16
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2284      	movs	r2, #132	; 0x84
 80053b2:	5c9b      	ldrb	r3, [r3, r2]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e02f      	b.n	800541c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2284      	movs	r2, #132	; 0x84
 80053c0:	2101      	movs	r1, #1
 80053c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2288      	movs	r2, #136	; 0x88
 80053c8:	2124      	movs	r1, #36	; 0x24
 80053ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2101      	movs	r1, #1
 80053e0:	438a      	bics	r2, r1
 80053e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	0019      	movs	r1, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0018      	movs	r0, r3
 80053fe:	f000 f813 	bl	8005428 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2288      	movs	r2, #136	; 0x88
 800540e:	2120      	movs	r1, #32
 8005410:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2284      	movs	r2, #132	; 0x84
 8005416:	2100      	movs	r1, #0
 8005418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b004      	add	sp, #16
 8005422:	bd80      	pop	{r7, pc}
 8005424:	f1ffffff 	.word	0xf1ffffff

08005428 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005434:	2b00      	cmp	r3, #0
 8005436:	d108      	bne.n	800544a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	226a      	movs	r2, #106	; 0x6a
 800543c:	2101      	movs	r1, #1
 800543e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2268      	movs	r2, #104	; 0x68
 8005444:	2101      	movs	r1, #1
 8005446:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005448:	e043      	b.n	80054d2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800544a:	260f      	movs	r6, #15
 800544c:	19bb      	adds	r3, r7, r6
 800544e:	2208      	movs	r2, #8
 8005450:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005452:	200e      	movs	r0, #14
 8005454:	183b      	adds	r3, r7, r0
 8005456:	2208      	movs	r2, #8
 8005458:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	0e5b      	lsrs	r3, r3, #25
 8005462:	b2da      	uxtb	r2, r3
 8005464:	240d      	movs	r4, #13
 8005466:	193b      	adds	r3, r7, r4
 8005468:	2107      	movs	r1, #7
 800546a:	400a      	ands	r2, r1
 800546c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	0f5b      	lsrs	r3, r3, #29
 8005476:	b2da      	uxtb	r2, r3
 8005478:	250c      	movs	r5, #12
 800547a:	197b      	adds	r3, r7, r5
 800547c:	2107      	movs	r1, #7
 800547e:	400a      	ands	r2, r1
 8005480:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005482:	183b      	adds	r3, r7, r0
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	197a      	adds	r2, r7, r5
 8005488:	7812      	ldrb	r2, [r2, #0]
 800548a:	4914      	ldr	r1, [pc, #80]	; (80054dc <UARTEx_SetNbDataToProcess+0xb4>)
 800548c:	5c8a      	ldrb	r2, [r1, r2]
 800548e:	435a      	muls	r2, r3
 8005490:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005492:	197b      	adds	r3, r7, r5
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	4a12      	ldr	r2, [pc, #72]	; (80054e0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005498:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800549a:	0019      	movs	r1, r3
 800549c:	f7fa fece 	bl	800023c <__divsi3>
 80054a0:	0003      	movs	r3, r0
 80054a2:	b299      	uxth	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	226a      	movs	r2, #106	; 0x6a
 80054a8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054aa:	19bb      	adds	r3, r7, r6
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	193a      	adds	r2, r7, r4
 80054b0:	7812      	ldrb	r2, [r2, #0]
 80054b2:	490a      	ldr	r1, [pc, #40]	; (80054dc <UARTEx_SetNbDataToProcess+0xb4>)
 80054b4:	5c8a      	ldrb	r2, [r1, r2]
 80054b6:	435a      	muls	r2, r3
 80054b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80054ba:	193b      	adds	r3, r7, r4
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <UARTEx_SetNbDataToProcess+0xb8>)
 80054c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054c2:	0019      	movs	r1, r3
 80054c4:	f7fa feba 	bl	800023c <__divsi3>
 80054c8:	0003      	movs	r3, r0
 80054ca:	b299      	uxth	r1, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2268      	movs	r2, #104	; 0x68
 80054d0:	5299      	strh	r1, [r3, r2]
}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b005      	add	sp, #20
 80054d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	08006100 	.word	0x08006100
 80054e0:	08006108 	.word	0x08006108

080054e4 <sniprintf>:
 80054e4:	b40c      	push	{r2, r3}
 80054e6:	b530      	push	{r4, r5, lr}
 80054e8:	4b17      	ldr	r3, [pc, #92]	; (8005548 <sniprintf+0x64>)
 80054ea:	000c      	movs	r4, r1
 80054ec:	681d      	ldr	r5, [r3, #0]
 80054ee:	b09d      	sub	sp, #116	; 0x74
 80054f0:	2900      	cmp	r1, #0
 80054f2:	da08      	bge.n	8005506 <sniprintf+0x22>
 80054f4:	238b      	movs	r3, #139	; 0x8b
 80054f6:	2001      	movs	r0, #1
 80054f8:	602b      	str	r3, [r5, #0]
 80054fa:	4240      	negs	r0, r0
 80054fc:	b01d      	add	sp, #116	; 0x74
 80054fe:	bc30      	pop	{r4, r5}
 8005500:	bc08      	pop	{r3}
 8005502:	b002      	add	sp, #8
 8005504:	4718      	bx	r3
 8005506:	2382      	movs	r3, #130	; 0x82
 8005508:	466a      	mov	r2, sp
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	8293      	strh	r3, [r2, #20]
 800550e:	2300      	movs	r3, #0
 8005510:	9002      	str	r0, [sp, #8]
 8005512:	9006      	str	r0, [sp, #24]
 8005514:	4299      	cmp	r1, r3
 8005516:	d000      	beq.n	800551a <sniprintf+0x36>
 8005518:	1e4b      	subs	r3, r1, #1
 800551a:	9304      	str	r3, [sp, #16]
 800551c:	9307      	str	r3, [sp, #28]
 800551e:	2301      	movs	r3, #1
 8005520:	466a      	mov	r2, sp
 8005522:	425b      	negs	r3, r3
 8005524:	82d3      	strh	r3, [r2, #22]
 8005526:	0028      	movs	r0, r5
 8005528:	ab21      	add	r3, sp, #132	; 0x84
 800552a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800552c:	a902      	add	r1, sp, #8
 800552e:	9301      	str	r3, [sp, #4]
 8005530:	f000 f9c4 	bl	80058bc <_svfiprintf_r>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	da01      	bge.n	800553c <sniprintf+0x58>
 8005538:	238b      	movs	r3, #139	; 0x8b
 800553a:	602b      	str	r3, [r5, #0]
 800553c:	2c00      	cmp	r4, #0
 800553e:	d0dd      	beq.n	80054fc <sniprintf+0x18>
 8005540:	2200      	movs	r2, #0
 8005542:	9b02      	ldr	r3, [sp, #8]
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e7d9      	b.n	80054fc <sniprintf+0x18>
 8005548:	20000078 	.word	0x20000078

0800554c <memset>:
 800554c:	0003      	movs	r3, r0
 800554e:	1882      	adds	r2, r0, r2
 8005550:	4293      	cmp	r3, r2
 8005552:	d100      	bne.n	8005556 <memset+0xa>
 8005554:	4770      	bx	lr
 8005556:	7019      	strb	r1, [r3, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	e7f9      	b.n	8005550 <memset+0x4>

0800555c <strchr>:
 800555c:	b2c9      	uxtb	r1, r1
 800555e:	7803      	ldrb	r3, [r0, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <strchr+0x12>
 8005564:	428b      	cmp	r3, r1
 8005566:	d100      	bne.n	800556a <strchr+0xe>
 8005568:	4770      	bx	lr
 800556a:	3001      	adds	r0, #1
 800556c:	e7f7      	b.n	800555e <strchr+0x2>
 800556e:	424b      	negs	r3, r1
 8005570:	4159      	adcs	r1, r3
 8005572:	4249      	negs	r1, r1
 8005574:	4008      	ands	r0, r1
 8005576:	e7f7      	b.n	8005568 <strchr+0xc>

08005578 <strstr>:
 8005578:	780a      	ldrb	r2, [r1, #0]
 800557a:	b530      	push	{r4, r5, lr}
 800557c:	2a00      	cmp	r2, #0
 800557e:	d10c      	bne.n	800559a <strstr+0x22>
 8005580:	bd30      	pop	{r4, r5, pc}
 8005582:	429a      	cmp	r2, r3
 8005584:	d108      	bne.n	8005598 <strstr+0x20>
 8005586:	2301      	movs	r3, #1
 8005588:	5ccc      	ldrb	r4, [r1, r3]
 800558a:	2c00      	cmp	r4, #0
 800558c:	d0f8      	beq.n	8005580 <strstr+0x8>
 800558e:	5cc5      	ldrb	r5, [r0, r3]
 8005590:	42a5      	cmp	r5, r4
 8005592:	d101      	bne.n	8005598 <strstr+0x20>
 8005594:	3301      	adds	r3, #1
 8005596:	e7f7      	b.n	8005588 <strstr+0x10>
 8005598:	3001      	adds	r0, #1
 800559a:	7803      	ldrb	r3, [r0, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f0      	bne.n	8005582 <strstr+0xa>
 80055a0:	0018      	movs	r0, r3
 80055a2:	e7ed      	b.n	8005580 <strstr+0x8>

080055a4 <__errno>:
 80055a4:	4b01      	ldr	r3, [pc, #4]	; (80055ac <__errno+0x8>)
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	4770      	bx	lr
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	20000078 	.word	0x20000078

080055b0 <__libc_init_array>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	2600      	movs	r6, #0
 80055b4:	4c0c      	ldr	r4, [pc, #48]	; (80055e8 <__libc_init_array+0x38>)
 80055b6:	4d0d      	ldr	r5, [pc, #52]	; (80055ec <__libc_init_array+0x3c>)
 80055b8:	1b64      	subs	r4, r4, r5
 80055ba:	10a4      	asrs	r4, r4, #2
 80055bc:	42a6      	cmp	r6, r4
 80055be:	d109      	bne.n	80055d4 <__libc_init_array+0x24>
 80055c0:	2600      	movs	r6, #0
 80055c2:	f000 fc6d 	bl	8005ea0 <_init>
 80055c6:	4c0a      	ldr	r4, [pc, #40]	; (80055f0 <__libc_init_array+0x40>)
 80055c8:	4d0a      	ldr	r5, [pc, #40]	; (80055f4 <__libc_init_array+0x44>)
 80055ca:	1b64      	subs	r4, r4, r5
 80055cc:	10a4      	asrs	r4, r4, #2
 80055ce:	42a6      	cmp	r6, r4
 80055d0:	d105      	bne.n	80055de <__libc_init_array+0x2e>
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	00b3      	lsls	r3, r6, #2
 80055d6:	58eb      	ldr	r3, [r5, r3]
 80055d8:	4798      	blx	r3
 80055da:	3601      	adds	r6, #1
 80055dc:	e7ee      	b.n	80055bc <__libc_init_array+0xc>
 80055de:	00b3      	lsls	r3, r6, #2
 80055e0:	58eb      	ldr	r3, [r5, r3]
 80055e2:	4798      	blx	r3
 80055e4:	3601      	adds	r6, #1
 80055e6:	e7f2      	b.n	80055ce <__libc_init_array+0x1e>
 80055e8:	0800614c 	.word	0x0800614c
 80055ec:	0800614c 	.word	0x0800614c
 80055f0:	08006150 	.word	0x08006150
 80055f4:	0800614c 	.word	0x0800614c

080055f8 <__retarget_lock_acquire_recursive>:
 80055f8:	4770      	bx	lr

080055fa <__retarget_lock_release_recursive>:
 80055fa:	4770      	bx	lr

080055fc <_free_r>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	0005      	movs	r5, r0
 8005600:	2900      	cmp	r1, #0
 8005602:	d010      	beq.n	8005626 <_free_r+0x2a>
 8005604:	1f0c      	subs	r4, r1, #4
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	da00      	bge.n	800560e <_free_r+0x12>
 800560c:	18e4      	adds	r4, r4, r3
 800560e:	0028      	movs	r0, r5
 8005610:	f000 f8e2 	bl	80057d8 <__malloc_lock>
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <_free_r+0x90>)
 8005616:	6813      	ldr	r3, [r2, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <_free_r+0x2c>
 800561c:	6063      	str	r3, [r4, #4]
 800561e:	6014      	str	r4, [r2, #0]
 8005620:	0028      	movs	r0, r5
 8005622:	f000 f8e1 	bl	80057e8 <__malloc_unlock>
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	42a3      	cmp	r3, r4
 800562a:	d908      	bls.n	800563e <_free_r+0x42>
 800562c:	6820      	ldr	r0, [r4, #0]
 800562e:	1821      	adds	r1, r4, r0
 8005630:	428b      	cmp	r3, r1
 8005632:	d1f3      	bne.n	800561c <_free_r+0x20>
 8005634:	6819      	ldr	r1, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	1809      	adds	r1, r1, r0
 800563a:	6021      	str	r1, [r4, #0]
 800563c:	e7ee      	b.n	800561c <_free_r+0x20>
 800563e:	001a      	movs	r2, r3
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <_free_r+0x4e>
 8005646:	42a3      	cmp	r3, r4
 8005648:	d9f9      	bls.n	800563e <_free_r+0x42>
 800564a:	6811      	ldr	r1, [r2, #0]
 800564c:	1850      	adds	r0, r2, r1
 800564e:	42a0      	cmp	r0, r4
 8005650:	d10b      	bne.n	800566a <_free_r+0x6e>
 8005652:	6820      	ldr	r0, [r4, #0]
 8005654:	1809      	adds	r1, r1, r0
 8005656:	1850      	adds	r0, r2, r1
 8005658:	6011      	str	r1, [r2, #0]
 800565a:	4283      	cmp	r3, r0
 800565c:	d1e0      	bne.n	8005620 <_free_r+0x24>
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	1841      	adds	r1, r0, r1
 8005664:	6011      	str	r1, [r2, #0]
 8005666:	6053      	str	r3, [r2, #4]
 8005668:	e7da      	b.n	8005620 <_free_r+0x24>
 800566a:	42a0      	cmp	r0, r4
 800566c:	d902      	bls.n	8005674 <_free_r+0x78>
 800566e:	230c      	movs	r3, #12
 8005670:	602b      	str	r3, [r5, #0]
 8005672:	e7d5      	b.n	8005620 <_free_r+0x24>
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	1821      	adds	r1, r4, r0
 8005678:	428b      	cmp	r3, r1
 800567a:	d103      	bne.n	8005684 <_free_r+0x88>
 800567c:	6819      	ldr	r1, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	1809      	adds	r1, r1, r0
 8005682:	6021      	str	r1, [r4, #0]
 8005684:	6063      	str	r3, [r4, #4]
 8005686:	6054      	str	r4, [r2, #4]
 8005688:	e7ca      	b.n	8005620 <_free_r+0x24>
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	20000bd8 	.word	0x20000bd8

08005690 <sbrk_aligned>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4e0f      	ldr	r6, [pc, #60]	; (80056d0 <sbrk_aligned+0x40>)
 8005694:	000d      	movs	r5, r1
 8005696:	6831      	ldr	r1, [r6, #0]
 8005698:	0004      	movs	r4, r0
 800569a:	2900      	cmp	r1, #0
 800569c:	d102      	bne.n	80056a4 <sbrk_aligned+0x14>
 800569e:	f000 fba1 	bl	8005de4 <_sbrk_r>
 80056a2:	6030      	str	r0, [r6, #0]
 80056a4:	0029      	movs	r1, r5
 80056a6:	0020      	movs	r0, r4
 80056a8:	f000 fb9c 	bl	8005de4 <_sbrk_r>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d00a      	beq.n	80056c6 <sbrk_aligned+0x36>
 80056b0:	2303      	movs	r3, #3
 80056b2:	1cc5      	adds	r5, r0, #3
 80056b4:	439d      	bics	r5, r3
 80056b6:	42a8      	cmp	r0, r5
 80056b8:	d007      	beq.n	80056ca <sbrk_aligned+0x3a>
 80056ba:	1a29      	subs	r1, r5, r0
 80056bc:	0020      	movs	r0, r4
 80056be:	f000 fb91 	bl	8005de4 <_sbrk_r>
 80056c2:	3001      	adds	r0, #1
 80056c4:	d101      	bne.n	80056ca <sbrk_aligned+0x3a>
 80056c6:	2501      	movs	r5, #1
 80056c8:	426d      	negs	r5, r5
 80056ca:	0028      	movs	r0, r5
 80056cc:	bd70      	pop	{r4, r5, r6, pc}
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	20000bdc 	.word	0x20000bdc

080056d4 <_malloc_r>:
 80056d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056d6:	2203      	movs	r2, #3
 80056d8:	1ccb      	adds	r3, r1, #3
 80056da:	4393      	bics	r3, r2
 80056dc:	3308      	adds	r3, #8
 80056de:	0006      	movs	r6, r0
 80056e0:	001f      	movs	r7, r3
 80056e2:	2b0c      	cmp	r3, #12
 80056e4:	d238      	bcs.n	8005758 <_malloc_r+0x84>
 80056e6:	270c      	movs	r7, #12
 80056e8:	42b9      	cmp	r1, r7
 80056ea:	d837      	bhi.n	800575c <_malloc_r+0x88>
 80056ec:	0030      	movs	r0, r6
 80056ee:	f000 f873 	bl	80057d8 <__malloc_lock>
 80056f2:	4b38      	ldr	r3, [pc, #224]	; (80057d4 <_malloc_r+0x100>)
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	001c      	movs	r4, r3
 80056fa:	2c00      	cmp	r4, #0
 80056fc:	d133      	bne.n	8005766 <_malloc_r+0x92>
 80056fe:	0039      	movs	r1, r7
 8005700:	0030      	movs	r0, r6
 8005702:	f7ff ffc5 	bl	8005690 <sbrk_aligned>
 8005706:	0004      	movs	r4, r0
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d15e      	bne.n	80057ca <_malloc_r+0xf6>
 800570c:	9b00      	ldr	r3, [sp, #0]
 800570e:	681c      	ldr	r4, [r3, #0]
 8005710:	0025      	movs	r5, r4
 8005712:	2d00      	cmp	r5, #0
 8005714:	d14e      	bne.n	80057b4 <_malloc_r+0xe0>
 8005716:	2c00      	cmp	r4, #0
 8005718:	d051      	beq.n	80057be <_malloc_r+0xea>
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	0029      	movs	r1, r5
 800571e:	18e3      	adds	r3, r4, r3
 8005720:	0030      	movs	r0, r6
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	f000 fb5e 	bl	8005de4 <_sbrk_r>
 8005728:	9b01      	ldr	r3, [sp, #4]
 800572a:	4283      	cmp	r3, r0
 800572c:	d147      	bne.n	80057be <_malloc_r+0xea>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	0030      	movs	r0, r6
 8005732:	1aff      	subs	r7, r7, r3
 8005734:	0039      	movs	r1, r7
 8005736:	f7ff ffab 	bl	8005690 <sbrk_aligned>
 800573a:	3001      	adds	r0, #1
 800573c:	d03f      	beq.n	80057be <_malloc_r+0xea>
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	19db      	adds	r3, r3, r7
 8005742:	6023      	str	r3, [r4, #0]
 8005744:	9b00      	ldr	r3, [sp, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d040      	beq.n	80057ce <_malloc_r+0xfa>
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	42a2      	cmp	r2, r4
 8005750:	d133      	bne.n	80057ba <_malloc_r+0xe6>
 8005752:	2200      	movs	r2, #0
 8005754:	605a      	str	r2, [r3, #4]
 8005756:	e014      	b.n	8005782 <_malloc_r+0xae>
 8005758:	2b00      	cmp	r3, #0
 800575a:	dac5      	bge.n	80056e8 <_malloc_r+0x14>
 800575c:	230c      	movs	r3, #12
 800575e:	2500      	movs	r5, #0
 8005760:	6033      	str	r3, [r6, #0]
 8005762:	0028      	movs	r0, r5
 8005764:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005766:	6821      	ldr	r1, [r4, #0]
 8005768:	1bc9      	subs	r1, r1, r7
 800576a:	d420      	bmi.n	80057ae <_malloc_r+0xda>
 800576c:	290b      	cmp	r1, #11
 800576e:	d918      	bls.n	80057a2 <_malloc_r+0xce>
 8005770:	19e2      	adds	r2, r4, r7
 8005772:	6027      	str	r7, [r4, #0]
 8005774:	42a3      	cmp	r3, r4
 8005776:	d112      	bne.n	800579e <_malloc_r+0xca>
 8005778:	9b00      	ldr	r3, [sp, #0]
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	6863      	ldr	r3, [r4, #4]
 800577e:	6011      	str	r1, [r2, #0]
 8005780:	6053      	str	r3, [r2, #4]
 8005782:	0030      	movs	r0, r6
 8005784:	0025      	movs	r5, r4
 8005786:	f000 f82f 	bl	80057e8 <__malloc_unlock>
 800578a:	2207      	movs	r2, #7
 800578c:	350b      	adds	r5, #11
 800578e:	1d23      	adds	r3, r4, #4
 8005790:	4395      	bics	r5, r2
 8005792:	1aea      	subs	r2, r5, r3
 8005794:	429d      	cmp	r5, r3
 8005796:	d0e4      	beq.n	8005762 <_malloc_r+0x8e>
 8005798:	1b5b      	subs	r3, r3, r5
 800579a:	50a3      	str	r3, [r4, r2]
 800579c:	e7e1      	b.n	8005762 <_malloc_r+0x8e>
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	e7ec      	b.n	800577c <_malloc_r+0xa8>
 80057a2:	6862      	ldr	r2, [r4, #4]
 80057a4:	42a3      	cmp	r3, r4
 80057a6:	d1d5      	bne.n	8005754 <_malloc_r+0x80>
 80057a8:	9b00      	ldr	r3, [sp, #0]
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	e7e9      	b.n	8005782 <_malloc_r+0xae>
 80057ae:	0023      	movs	r3, r4
 80057b0:	6864      	ldr	r4, [r4, #4]
 80057b2:	e7a2      	b.n	80056fa <_malloc_r+0x26>
 80057b4:	002c      	movs	r4, r5
 80057b6:	686d      	ldr	r5, [r5, #4]
 80057b8:	e7ab      	b.n	8005712 <_malloc_r+0x3e>
 80057ba:	0013      	movs	r3, r2
 80057bc:	e7c4      	b.n	8005748 <_malloc_r+0x74>
 80057be:	230c      	movs	r3, #12
 80057c0:	0030      	movs	r0, r6
 80057c2:	6033      	str	r3, [r6, #0]
 80057c4:	f000 f810 	bl	80057e8 <__malloc_unlock>
 80057c8:	e7cb      	b.n	8005762 <_malloc_r+0x8e>
 80057ca:	6027      	str	r7, [r4, #0]
 80057cc:	e7d9      	b.n	8005782 <_malloc_r+0xae>
 80057ce:	605b      	str	r3, [r3, #4]
 80057d0:	deff      	udf	#255	; 0xff
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	20000bd8 	.word	0x20000bd8

080057d8 <__malloc_lock>:
 80057d8:	b510      	push	{r4, lr}
 80057da:	4802      	ldr	r0, [pc, #8]	; (80057e4 <__malloc_lock+0xc>)
 80057dc:	f7ff ff0c 	bl	80055f8 <__retarget_lock_acquire_recursive>
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	20000bd4 	.word	0x20000bd4

080057e8 <__malloc_unlock>:
 80057e8:	b510      	push	{r4, lr}
 80057ea:	4802      	ldr	r0, [pc, #8]	; (80057f4 <__malloc_unlock+0xc>)
 80057ec:	f7ff ff05 	bl	80055fa <__retarget_lock_release_recursive>
 80057f0:	bd10      	pop	{r4, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	20000bd4 	.word	0x20000bd4

080057f8 <__ssputs_r>:
 80057f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057fa:	b085      	sub	sp, #20
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	9203      	str	r2, [sp, #12]
 8005800:	688e      	ldr	r6, [r1, #8]
 8005802:	9a01      	ldr	r2, [sp, #4]
 8005804:	0007      	movs	r7, r0
 8005806:	000c      	movs	r4, r1
 8005808:	680b      	ldr	r3, [r1, #0]
 800580a:	4296      	cmp	r6, r2
 800580c:	d831      	bhi.n	8005872 <__ssputs_r+0x7a>
 800580e:	898a      	ldrh	r2, [r1, #12]
 8005810:	2190      	movs	r1, #144	; 0x90
 8005812:	00c9      	lsls	r1, r1, #3
 8005814:	420a      	tst	r2, r1
 8005816:	d029      	beq.n	800586c <__ssputs_r+0x74>
 8005818:	2003      	movs	r0, #3
 800581a:	6921      	ldr	r1, [r4, #16]
 800581c:	1a5b      	subs	r3, r3, r1
 800581e:	9302      	str	r3, [sp, #8]
 8005820:	6963      	ldr	r3, [r4, #20]
 8005822:	4343      	muls	r3, r0
 8005824:	0fdd      	lsrs	r5, r3, #31
 8005826:	18ed      	adds	r5, r5, r3
 8005828:	9b01      	ldr	r3, [sp, #4]
 800582a:	9802      	ldr	r0, [sp, #8]
 800582c:	3301      	adds	r3, #1
 800582e:	181b      	adds	r3, r3, r0
 8005830:	106d      	asrs	r5, r5, #1
 8005832:	42ab      	cmp	r3, r5
 8005834:	d900      	bls.n	8005838 <__ssputs_r+0x40>
 8005836:	001d      	movs	r5, r3
 8005838:	0552      	lsls	r2, r2, #21
 800583a:	d529      	bpl.n	8005890 <__ssputs_r+0x98>
 800583c:	0029      	movs	r1, r5
 800583e:	0038      	movs	r0, r7
 8005840:	f7ff ff48 	bl	80056d4 <_malloc_r>
 8005844:	1e06      	subs	r6, r0, #0
 8005846:	d02d      	beq.n	80058a4 <__ssputs_r+0xac>
 8005848:	9a02      	ldr	r2, [sp, #8]
 800584a:	6921      	ldr	r1, [r4, #16]
 800584c:	f000 fae7 	bl	8005e1e <memcpy>
 8005850:	89a2      	ldrh	r2, [r4, #12]
 8005852:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <__ssputs_r+0xc0>)
 8005854:	401a      	ands	r2, r3
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	4313      	orrs	r3, r2
 800585a:	81a3      	strh	r3, [r4, #12]
 800585c:	9b02      	ldr	r3, [sp, #8]
 800585e:	6126      	str	r6, [r4, #16]
 8005860:	18f6      	adds	r6, r6, r3
 8005862:	6026      	str	r6, [r4, #0]
 8005864:	6165      	str	r5, [r4, #20]
 8005866:	9e01      	ldr	r6, [sp, #4]
 8005868:	1aed      	subs	r5, r5, r3
 800586a:	60a5      	str	r5, [r4, #8]
 800586c:	9b01      	ldr	r3, [sp, #4]
 800586e:	429e      	cmp	r6, r3
 8005870:	d900      	bls.n	8005874 <__ssputs_r+0x7c>
 8005872:	9e01      	ldr	r6, [sp, #4]
 8005874:	0032      	movs	r2, r6
 8005876:	9903      	ldr	r1, [sp, #12]
 8005878:	6820      	ldr	r0, [r4, #0]
 800587a:	f000 fa9f 	bl	8005dbc <memmove>
 800587e:	2000      	movs	r0, #0
 8005880:	68a3      	ldr	r3, [r4, #8]
 8005882:	1b9b      	subs	r3, r3, r6
 8005884:	60a3      	str	r3, [r4, #8]
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	199b      	adds	r3, r3, r6
 800588a:	6023      	str	r3, [r4, #0]
 800588c:	b005      	add	sp, #20
 800588e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005890:	002a      	movs	r2, r5
 8005892:	0038      	movs	r0, r7
 8005894:	f000 facc 	bl	8005e30 <_realloc_r>
 8005898:	1e06      	subs	r6, r0, #0
 800589a:	d1df      	bne.n	800585c <__ssputs_r+0x64>
 800589c:	0038      	movs	r0, r7
 800589e:	6921      	ldr	r1, [r4, #16]
 80058a0:	f7ff feac 	bl	80055fc <_free_r>
 80058a4:	230c      	movs	r3, #12
 80058a6:	2001      	movs	r0, #1
 80058a8:	603b      	str	r3, [r7, #0]
 80058aa:	89a2      	ldrh	r2, [r4, #12]
 80058ac:	3334      	adds	r3, #52	; 0x34
 80058ae:	4313      	orrs	r3, r2
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	4240      	negs	r0, r0
 80058b4:	e7ea      	b.n	800588c <__ssputs_r+0x94>
 80058b6:	46c0      	nop			; (mov r8, r8)
 80058b8:	fffffb7f 	.word	0xfffffb7f

080058bc <_svfiprintf_r>:
 80058bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058be:	b0a1      	sub	sp, #132	; 0x84
 80058c0:	9003      	str	r0, [sp, #12]
 80058c2:	001d      	movs	r5, r3
 80058c4:	898b      	ldrh	r3, [r1, #12]
 80058c6:	000f      	movs	r7, r1
 80058c8:	0016      	movs	r6, r2
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	d511      	bpl.n	80058f2 <_svfiprintf_r+0x36>
 80058ce:	690b      	ldr	r3, [r1, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10e      	bne.n	80058f2 <_svfiprintf_r+0x36>
 80058d4:	2140      	movs	r1, #64	; 0x40
 80058d6:	f7ff fefd 	bl	80056d4 <_malloc_r>
 80058da:	6038      	str	r0, [r7, #0]
 80058dc:	6138      	str	r0, [r7, #16]
 80058de:	2800      	cmp	r0, #0
 80058e0:	d105      	bne.n	80058ee <_svfiprintf_r+0x32>
 80058e2:	230c      	movs	r3, #12
 80058e4:	9a03      	ldr	r2, [sp, #12]
 80058e6:	3801      	subs	r0, #1
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	b021      	add	sp, #132	; 0x84
 80058ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ee:	2340      	movs	r3, #64	; 0x40
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	2300      	movs	r3, #0
 80058f4:	ac08      	add	r4, sp, #32
 80058f6:	6163      	str	r3, [r4, #20]
 80058f8:	3320      	adds	r3, #32
 80058fa:	7663      	strb	r3, [r4, #25]
 80058fc:	3310      	adds	r3, #16
 80058fe:	76a3      	strb	r3, [r4, #26]
 8005900:	9507      	str	r5, [sp, #28]
 8005902:	0035      	movs	r5, r6
 8005904:	782b      	ldrb	r3, [r5, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <_svfiprintf_r+0x52>
 800590a:	2b25      	cmp	r3, #37	; 0x25
 800590c:	d148      	bne.n	80059a0 <_svfiprintf_r+0xe4>
 800590e:	1bab      	subs	r3, r5, r6
 8005910:	9305      	str	r3, [sp, #20]
 8005912:	42b5      	cmp	r5, r6
 8005914:	d00b      	beq.n	800592e <_svfiprintf_r+0x72>
 8005916:	0032      	movs	r2, r6
 8005918:	0039      	movs	r1, r7
 800591a:	9803      	ldr	r0, [sp, #12]
 800591c:	f7ff ff6c 	bl	80057f8 <__ssputs_r>
 8005920:	3001      	adds	r0, #1
 8005922:	d100      	bne.n	8005926 <_svfiprintf_r+0x6a>
 8005924:	e0af      	b.n	8005a86 <_svfiprintf_r+0x1ca>
 8005926:	6963      	ldr	r3, [r4, #20]
 8005928:	9a05      	ldr	r2, [sp, #20]
 800592a:	189b      	adds	r3, r3, r2
 800592c:	6163      	str	r3, [r4, #20]
 800592e:	782b      	ldrb	r3, [r5, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d100      	bne.n	8005936 <_svfiprintf_r+0x7a>
 8005934:	e0a7      	b.n	8005a86 <_svfiprintf_r+0x1ca>
 8005936:	2201      	movs	r2, #1
 8005938:	2300      	movs	r3, #0
 800593a:	4252      	negs	r2, r2
 800593c:	6062      	str	r2, [r4, #4]
 800593e:	a904      	add	r1, sp, #16
 8005940:	3254      	adds	r2, #84	; 0x54
 8005942:	1852      	adds	r2, r2, r1
 8005944:	1c6e      	adds	r6, r5, #1
 8005946:	6023      	str	r3, [r4, #0]
 8005948:	60e3      	str	r3, [r4, #12]
 800594a:	60a3      	str	r3, [r4, #8]
 800594c:	7013      	strb	r3, [r2, #0]
 800594e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005950:	4b55      	ldr	r3, [pc, #340]	; (8005aa8 <_svfiprintf_r+0x1ec>)
 8005952:	2205      	movs	r2, #5
 8005954:	0018      	movs	r0, r3
 8005956:	7831      	ldrb	r1, [r6, #0]
 8005958:	9305      	str	r3, [sp, #20]
 800595a:	f000 fa55 	bl	8005e08 <memchr>
 800595e:	1c75      	adds	r5, r6, #1
 8005960:	2800      	cmp	r0, #0
 8005962:	d11f      	bne.n	80059a4 <_svfiprintf_r+0xe8>
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	06d3      	lsls	r3, r2, #27
 8005968:	d504      	bpl.n	8005974 <_svfiprintf_r+0xb8>
 800596a:	2353      	movs	r3, #83	; 0x53
 800596c:	a904      	add	r1, sp, #16
 800596e:	185b      	adds	r3, r3, r1
 8005970:	2120      	movs	r1, #32
 8005972:	7019      	strb	r1, [r3, #0]
 8005974:	0713      	lsls	r3, r2, #28
 8005976:	d504      	bpl.n	8005982 <_svfiprintf_r+0xc6>
 8005978:	2353      	movs	r3, #83	; 0x53
 800597a:	a904      	add	r1, sp, #16
 800597c:	185b      	adds	r3, r3, r1
 800597e:	212b      	movs	r1, #43	; 0x2b
 8005980:	7019      	strb	r1, [r3, #0]
 8005982:	7833      	ldrb	r3, [r6, #0]
 8005984:	2b2a      	cmp	r3, #42	; 0x2a
 8005986:	d016      	beq.n	80059b6 <_svfiprintf_r+0xfa>
 8005988:	0035      	movs	r5, r6
 800598a:	2100      	movs	r1, #0
 800598c:	200a      	movs	r0, #10
 800598e:	68e3      	ldr	r3, [r4, #12]
 8005990:	782a      	ldrb	r2, [r5, #0]
 8005992:	1c6e      	adds	r6, r5, #1
 8005994:	3a30      	subs	r2, #48	; 0x30
 8005996:	2a09      	cmp	r2, #9
 8005998:	d94e      	bls.n	8005a38 <_svfiprintf_r+0x17c>
 800599a:	2900      	cmp	r1, #0
 800599c:	d111      	bne.n	80059c2 <_svfiprintf_r+0x106>
 800599e:	e017      	b.n	80059d0 <_svfiprintf_r+0x114>
 80059a0:	3501      	adds	r5, #1
 80059a2:	e7af      	b.n	8005904 <_svfiprintf_r+0x48>
 80059a4:	9b05      	ldr	r3, [sp, #20]
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	1ac0      	subs	r0, r0, r3
 80059aa:	2301      	movs	r3, #1
 80059ac:	4083      	lsls	r3, r0
 80059ae:	4313      	orrs	r3, r2
 80059b0:	002e      	movs	r6, r5
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	e7cc      	b.n	8005950 <_svfiprintf_r+0x94>
 80059b6:	9b07      	ldr	r3, [sp, #28]
 80059b8:	1d19      	adds	r1, r3, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	9107      	str	r1, [sp, #28]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	db01      	blt.n	80059c6 <_svfiprintf_r+0x10a>
 80059c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80059c4:	e004      	b.n	80059d0 <_svfiprintf_r+0x114>
 80059c6:	425b      	negs	r3, r3
 80059c8:	60e3      	str	r3, [r4, #12]
 80059ca:	2302      	movs	r3, #2
 80059cc:	4313      	orrs	r3, r2
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	782b      	ldrb	r3, [r5, #0]
 80059d2:	2b2e      	cmp	r3, #46	; 0x2e
 80059d4:	d10a      	bne.n	80059ec <_svfiprintf_r+0x130>
 80059d6:	786b      	ldrb	r3, [r5, #1]
 80059d8:	2b2a      	cmp	r3, #42	; 0x2a
 80059da:	d135      	bne.n	8005a48 <_svfiprintf_r+0x18c>
 80059dc:	9b07      	ldr	r3, [sp, #28]
 80059de:	3502      	adds	r5, #2
 80059e0:	1d1a      	adds	r2, r3, #4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	9207      	str	r2, [sp, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	db2b      	blt.n	8005a42 <_svfiprintf_r+0x186>
 80059ea:	9309      	str	r3, [sp, #36]	; 0x24
 80059ec:	4e2f      	ldr	r6, [pc, #188]	; (8005aac <_svfiprintf_r+0x1f0>)
 80059ee:	2203      	movs	r2, #3
 80059f0:	0030      	movs	r0, r6
 80059f2:	7829      	ldrb	r1, [r5, #0]
 80059f4:	f000 fa08 	bl	8005e08 <memchr>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d006      	beq.n	8005a0a <_svfiprintf_r+0x14e>
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	1b80      	subs	r0, r0, r6
 8005a00:	4083      	lsls	r3, r0
 8005a02:	6822      	ldr	r2, [r4, #0]
 8005a04:	3501      	adds	r5, #1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	7829      	ldrb	r1, [r5, #0]
 8005a0c:	2206      	movs	r2, #6
 8005a0e:	4828      	ldr	r0, [pc, #160]	; (8005ab0 <_svfiprintf_r+0x1f4>)
 8005a10:	1c6e      	adds	r6, r5, #1
 8005a12:	7621      	strb	r1, [r4, #24]
 8005a14:	f000 f9f8 	bl	8005e08 <memchr>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d03c      	beq.n	8005a96 <_svfiprintf_r+0x1da>
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <_svfiprintf_r+0x1f8>)
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d125      	bne.n	8005a6e <_svfiprintf_r+0x1b2>
 8005a22:	2207      	movs	r2, #7
 8005a24:	9b07      	ldr	r3, [sp, #28]
 8005a26:	3307      	adds	r3, #7
 8005a28:	4393      	bics	r3, r2
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	9307      	str	r3, [sp, #28]
 8005a2e:	6963      	ldr	r3, [r4, #20]
 8005a30:	9a04      	ldr	r2, [sp, #16]
 8005a32:	189b      	adds	r3, r3, r2
 8005a34:	6163      	str	r3, [r4, #20]
 8005a36:	e764      	b.n	8005902 <_svfiprintf_r+0x46>
 8005a38:	4343      	muls	r3, r0
 8005a3a:	0035      	movs	r5, r6
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	189b      	adds	r3, r3, r2
 8005a40:	e7a6      	b.n	8005990 <_svfiprintf_r+0xd4>
 8005a42:	2301      	movs	r3, #1
 8005a44:	425b      	negs	r3, r3
 8005a46:	e7d0      	b.n	80059ea <_svfiprintf_r+0x12e>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	200a      	movs	r0, #10
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	3501      	adds	r5, #1
 8005a50:	6063      	str	r3, [r4, #4]
 8005a52:	7829      	ldrb	r1, [r5, #0]
 8005a54:	1c6e      	adds	r6, r5, #1
 8005a56:	3930      	subs	r1, #48	; 0x30
 8005a58:	2909      	cmp	r1, #9
 8005a5a:	d903      	bls.n	8005a64 <_svfiprintf_r+0x1a8>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0c5      	beq.n	80059ec <_svfiprintf_r+0x130>
 8005a60:	9209      	str	r2, [sp, #36]	; 0x24
 8005a62:	e7c3      	b.n	80059ec <_svfiprintf_r+0x130>
 8005a64:	4342      	muls	r2, r0
 8005a66:	0035      	movs	r5, r6
 8005a68:	2301      	movs	r3, #1
 8005a6a:	1852      	adds	r2, r2, r1
 8005a6c:	e7f1      	b.n	8005a52 <_svfiprintf_r+0x196>
 8005a6e:	aa07      	add	r2, sp, #28
 8005a70:	9200      	str	r2, [sp, #0]
 8005a72:	0021      	movs	r1, r4
 8005a74:	003a      	movs	r2, r7
 8005a76:	4b10      	ldr	r3, [pc, #64]	; (8005ab8 <_svfiprintf_r+0x1fc>)
 8005a78:	9803      	ldr	r0, [sp, #12]
 8005a7a:	e000      	b.n	8005a7e <_svfiprintf_r+0x1c2>
 8005a7c:	bf00      	nop
 8005a7e:	9004      	str	r0, [sp, #16]
 8005a80:	9b04      	ldr	r3, [sp, #16]
 8005a82:	3301      	adds	r3, #1
 8005a84:	d1d3      	bne.n	8005a2e <_svfiprintf_r+0x172>
 8005a86:	89bb      	ldrh	r3, [r7, #12]
 8005a88:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a8a:	065b      	lsls	r3, r3, #25
 8005a8c:	d400      	bmi.n	8005a90 <_svfiprintf_r+0x1d4>
 8005a8e:	e72c      	b.n	80058ea <_svfiprintf_r+0x2e>
 8005a90:	2001      	movs	r0, #1
 8005a92:	4240      	negs	r0, r0
 8005a94:	e729      	b.n	80058ea <_svfiprintf_r+0x2e>
 8005a96:	aa07      	add	r2, sp, #28
 8005a98:	9200      	str	r2, [sp, #0]
 8005a9a:	0021      	movs	r1, r4
 8005a9c:	003a      	movs	r2, r7
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <_svfiprintf_r+0x1fc>)
 8005aa0:	9803      	ldr	r0, [sp, #12]
 8005aa2:	f000 f87b 	bl	8005b9c <_printf_i>
 8005aa6:	e7ea      	b.n	8005a7e <_svfiprintf_r+0x1c2>
 8005aa8:	08006110 	.word	0x08006110
 8005aac:	08006116 	.word	0x08006116
 8005ab0:	0800611a 	.word	0x0800611a
 8005ab4:	00000000 	.word	0x00000000
 8005ab8:	080057f9 	.word	0x080057f9

08005abc <_printf_common>:
 8005abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005abe:	0016      	movs	r6, r2
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	688a      	ldr	r2, [r1, #8]
 8005ac4:	690b      	ldr	r3, [r1, #16]
 8005ac6:	000c      	movs	r4, r1
 8005ac8:	9000      	str	r0, [sp, #0]
 8005aca:	4293      	cmp	r3, r2
 8005acc:	da00      	bge.n	8005ad0 <_printf_common+0x14>
 8005ace:	0013      	movs	r3, r2
 8005ad0:	0022      	movs	r2, r4
 8005ad2:	6033      	str	r3, [r6, #0]
 8005ad4:	3243      	adds	r2, #67	; 0x43
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	2a00      	cmp	r2, #0
 8005ada:	d001      	beq.n	8005ae0 <_printf_common+0x24>
 8005adc:	3301      	adds	r3, #1
 8005ade:	6033      	str	r3, [r6, #0]
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	069b      	lsls	r3, r3, #26
 8005ae4:	d502      	bpl.n	8005aec <_printf_common+0x30>
 8005ae6:	6833      	ldr	r3, [r6, #0]
 8005ae8:	3302      	adds	r3, #2
 8005aea:	6033      	str	r3, [r6, #0]
 8005aec:	6822      	ldr	r2, [r4, #0]
 8005aee:	2306      	movs	r3, #6
 8005af0:	0015      	movs	r5, r2
 8005af2:	401d      	ands	r5, r3
 8005af4:	421a      	tst	r2, r3
 8005af6:	d027      	beq.n	8005b48 <_printf_common+0x8c>
 8005af8:	0023      	movs	r3, r4
 8005afa:	3343      	adds	r3, #67	; 0x43
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	1e5a      	subs	r2, r3, #1
 8005b00:	4193      	sbcs	r3, r2
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	0692      	lsls	r2, r2, #26
 8005b06:	d430      	bmi.n	8005b6a <_printf_common+0xae>
 8005b08:	0022      	movs	r2, r4
 8005b0a:	9901      	ldr	r1, [sp, #4]
 8005b0c:	9800      	ldr	r0, [sp, #0]
 8005b0e:	9d08      	ldr	r5, [sp, #32]
 8005b10:	3243      	adds	r2, #67	; 0x43
 8005b12:	47a8      	blx	r5
 8005b14:	3001      	adds	r0, #1
 8005b16:	d025      	beq.n	8005b64 <_printf_common+0xa8>
 8005b18:	2206      	movs	r2, #6
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	2500      	movs	r5, #0
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d105      	bne.n	8005b30 <_printf_common+0x74>
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	68e5      	ldr	r5, [r4, #12]
 8005b28:	1aed      	subs	r5, r5, r3
 8005b2a:	43eb      	mvns	r3, r5
 8005b2c:	17db      	asrs	r3, r3, #31
 8005b2e:	401d      	ands	r5, r3
 8005b30:	68a3      	ldr	r3, [r4, #8]
 8005b32:	6922      	ldr	r2, [r4, #16]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	dd01      	ble.n	8005b3c <_printf_common+0x80>
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	18ed      	adds	r5, r5, r3
 8005b3c:	2600      	movs	r6, #0
 8005b3e:	42b5      	cmp	r5, r6
 8005b40:	d120      	bne.n	8005b84 <_printf_common+0xc8>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e010      	b.n	8005b68 <_printf_common+0xac>
 8005b46:	3501      	adds	r5, #1
 8005b48:	68e3      	ldr	r3, [r4, #12]
 8005b4a:	6832      	ldr	r2, [r6, #0]
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	42ab      	cmp	r3, r5
 8005b50:	ddd2      	ble.n	8005af8 <_printf_common+0x3c>
 8005b52:	0022      	movs	r2, r4
 8005b54:	2301      	movs	r3, #1
 8005b56:	9901      	ldr	r1, [sp, #4]
 8005b58:	9800      	ldr	r0, [sp, #0]
 8005b5a:	9f08      	ldr	r7, [sp, #32]
 8005b5c:	3219      	adds	r2, #25
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	d1f0      	bne.n	8005b46 <_printf_common+0x8a>
 8005b64:	2001      	movs	r0, #1
 8005b66:	4240      	negs	r0, r0
 8005b68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b6a:	2030      	movs	r0, #48	; 0x30
 8005b6c:	18e1      	adds	r1, r4, r3
 8005b6e:	3143      	adds	r1, #67	; 0x43
 8005b70:	7008      	strb	r0, [r1, #0]
 8005b72:	0021      	movs	r1, r4
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	3145      	adds	r1, #69	; 0x45
 8005b78:	7809      	ldrb	r1, [r1, #0]
 8005b7a:	18a2      	adds	r2, r4, r2
 8005b7c:	3243      	adds	r2, #67	; 0x43
 8005b7e:	3302      	adds	r3, #2
 8005b80:	7011      	strb	r1, [r2, #0]
 8005b82:	e7c1      	b.n	8005b08 <_printf_common+0x4c>
 8005b84:	0022      	movs	r2, r4
 8005b86:	2301      	movs	r3, #1
 8005b88:	9901      	ldr	r1, [sp, #4]
 8005b8a:	9800      	ldr	r0, [sp, #0]
 8005b8c:	9f08      	ldr	r7, [sp, #32]
 8005b8e:	321a      	adds	r2, #26
 8005b90:	47b8      	blx	r7
 8005b92:	3001      	adds	r0, #1
 8005b94:	d0e6      	beq.n	8005b64 <_printf_common+0xa8>
 8005b96:	3601      	adds	r6, #1
 8005b98:	e7d1      	b.n	8005b3e <_printf_common+0x82>
	...

08005b9c <_printf_i>:
 8005b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b9e:	b08b      	sub	sp, #44	; 0x2c
 8005ba0:	9206      	str	r2, [sp, #24]
 8005ba2:	000a      	movs	r2, r1
 8005ba4:	3243      	adds	r2, #67	; 0x43
 8005ba6:	9307      	str	r3, [sp, #28]
 8005ba8:	9005      	str	r0, [sp, #20]
 8005baa:	9204      	str	r2, [sp, #16]
 8005bac:	7e0a      	ldrb	r2, [r1, #24]
 8005bae:	000c      	movs	r4, r1
 8005bb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bb2:	2a78      	cmp	r2, #120	; 0x78
 8005bb4:	d809      	bhi.n	8005bca <_printf_i+0x2e>
 8005bb6:	2a62      	cmp	r2, #98	; 0x62
 8005bb8:	d80b      	bhi.n	8005bd2 <_printf_i+0x36>
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	d100      	bne.n	8005bc0 <_printf_i+0x24>
 8005bbe:	e0be      	b.n	8005d3e <_printf_i+0x1a2>
 8005bc0:	497c      	ldr	r1, [pc, #496]	; (8005db4 <_printf_i+0x218>)
 8005bc2:	9103      	str	r1, [sp, #12]
 8005bc4:	2a58      	cmp	r2, #88	; 0x58
 8005bc6:	d100      	bne.n	8005bca <_printf_i+0x2e>
 8005bc8:	e093      	b.n	8005cf2 <_printf_i+0x156>
 8005bca:	0026      	movs	r6, r4
 8005bcc:	3642      	adds	r6, #66	; 0x42
 8005bce:	7032      	strb	r2, [r6, #0]
 8005bd0:	e022      	b.n	8005c18 <_printf_i+0x7c>
 8005bd2:	0010      	movs	r0, r2
 8005bd4:	3863      	subs	r0, #99	; 0x63
 8005bd6:	2815      	cmp	r0, #21
 8005bd8:	d8f7      	bhi.n	8005bca <_printf_i+0x2e>
 8005bda:	f7fa fa9b 	bl	8000114 <__gnu_thumb1_case_shi>
 8005bde:	0016      	.short	0x0016
 8005be0:	fff6001f 	.word	0xfff6001f
 8005be4:	fff6fff6 	.word	0xfff6fff6
 8005be8:	001ffff6 	.word	0x001ffff6
 8005bec:	fff6fff6 	.word	0xfff6fff6
 8005bf0:	fff6fff6 	.word	0xfff6fff6
 8005bf4:	003600a3 	.word	0x003600a3
 8005bf8:	fff60083 	.word	0xfff60083
 8005bfc:	00b4fff6 	.word	0x00b4fff6
 8005c00:	0036fff6 	.word	0x0036fff6
 8005c04:	fff6fff6 	.word	0xfff6fff6
 8005c08:	0087      	.short	0x0087
 8005c0a:	0026      	movs	r6, r4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	3642      	adds	r6, #66	; 0x42
 8005c10:	1d11      	adds	r1, r2, #4
 8005c12:	6019      	str	r1, [r3, #0]
 8005c14:	6813      	ldr	r3, [r2, #0]
 8005c16:	7033      	strb	r3, [r6, #0]
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0a2      	b.n	8005d62 <_printf_i+0x1c6>
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	6809      	ldr	r1, [r1, #0]
 8005c20:	1d02      	adds	r2, r0, #4
 8005c22:	060d      	lsls	r5, r1, #24
 8005c24:	d50b      	bpl.n	8005c3e <_printf_i+0xa2>
 8005c26:	6805      	ldr	r5, [r0, #0]
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	da03      	bge.n	8005c36 <_printf_i+0x9a>
 8005c2e:	232d      	movs	r3, #45	; 0x2d
 8005c30:	9a04      	ldr	r2, [sp, #16]
 8005c32:	426d      	negs	r5, r5
 8005c34:	7013      	strb	r3, [r2, #0]
 8005c36:	4b5f      	ldr	r3, [pc, #380]	; (8005db4 <_printf_i+0x218>)
 8005c38:	270a      	movs	r7, #10
 8005c3a:	9303      	str	r3, [sp, #12]
 8005c3c:	e01b      	b.n	8005c76 <_printf_i+0xda>
 8005c3e:	6805      	ldr	r5, [r0, #0]
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	0649      	lsls	r1, r1, #25
 8005c44:	d5f1      	bpl.n	8005c2a <_printf_i+0x8e>
 8005c46:	b22d      	sxth	r5, r5
 8005c48:	e7ef      	b.n	8005c2a <_printf_i+0x8e>
 8005c4a:	680d      	ldr	r5, [r1, #0]
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	1d08      	adds	r0, r1, #4
 8005c50:	6018      	str	r0, [r3, #0]
 8005c52:	062e      	lsls	r6, r5, #24
 8005c54:	d501      	bpl.n	8005c5a <_printf_i+0xbe>
 8005c56:	680d      	ldr	r5, [r1, #0]
 8005c58:	e003      	b.n	8005c62 <_printf_i+0xc6>
 8005c5a:	066d      	lsls	r5, r5, #25
 8005c5c:	d5fb      	bpl.n	8005c56 <_printf_i+0xba>
 8005c5e:	680d      	ldr	r5, [r1, #0]
 8005c60:	b2ad      	uxth	r5, r5
 8005c62:	4b54      	ldr	r3, [pc, #336]	; (8005db4 <_printf_i+0x218>)
 8005c64:	2708      	movs	r7, #8
 8005c66:	9303      	str	r3, [sp, #12]
 8005c68:	2a6f      	cmp	r2, #111	; 0x6f
 8005c6a:	d000      	beq.n	8005c6e <_printf_i+0xd2>
 8005c6c:	3702      	adds	r7, #2
 8005c6e:	0023      	movs	r3, r4
 8005c70:	2200      	movs	r2, #0
 8005c72:	3343      	adds	r3, #67	; 0x43
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	6863      	ldr	r3, [r4, #4]
 8005c78:	60a3      	str	r3, [r4, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	db03      	blt.n	8005c86 <_printf_i+0xea>
 8005c7e:	2104      	movs	r1, #4
 8005c80:	6822      	ldr	r2, [r4, #0]
 8005c82:	438a      	bics	r2, r1
 8005c84:	6022      	str	r2, [r4, #0]
 8005c86:	2d00      	cmp	r5, #0
 8005c88:	d102      	bne.n	8005c90 <_printf_i+0xf4>
 8005c8a:	9e04      	ldr	r6, [sp, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00c      	beq.n	8005caa <_printf_i+0x10e>
 8005c90:	9e04      	ldr	r6, [sp, #16]
 8005c92:	0028      	movs	r0, r5
 8005c94:	0039      	movs	r1, r7
 8005c96:	f7fa facd 	bl	8000234 <__aeabi_uidivmod>
 8005c9a:	9b03      	ldr	r3, [sp, #12]
 8005c9c:	3e01      	subs	r6, #1
 8005c9e:	5c5b      	ldrb	r3, [r3, r1]
 8005ca0:	7033      	strb	r3, [r6, #0]
 8005ca2:	002b      	movs	r3, r5
 8005ca4:	0005      	movs	r5, r0
 8005ca6:	429f      	cmp	r7, r3
 8005ca8:	d9f3      	bls.n	8005c92 <_printf_i+0xf6>
 8005caa:	2f08      	cmp	r7, #8
 8005cac:	d109      	bne.n	8005cc2 <_printf_i+0x126>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	07db      	lsls	r3, r3, #31
 8005cb2:	d506      	bpl.n	8005cc2 <_printf_i+0x126>
 8005cb4:	6862      	ldr	r2, [r4, #4]
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	dc02      	bgt.n	8005cc2 <_printf_i+0x126>
 8005cbc:	2330      	movs	r3, #48	; 0x30
 8005cbe:	3e01      	subs	r6, #1
 8005cc0:	7033      	strb	r3, [r6, #0]
 8005cc2:	9b04      	ldr	r3, [sp, #16]
 8005cc4:	1b9b      	subs	r3, r3, r6
 8005cc6:	6123      	str	r3, [r4, #16]
 8005cc8:	9b07      	ldr	r3, [sp, #28]
 8005cca:	0021      	movs	r1, r4
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	9805      	ldr	r0, [sp, #20]
 8005cd0:	9b06      	ldr	r3, [sp, #24]
 8005cd2:	aa09      	add	r2, sp, #36	; 0x24
 8005cd4:	f7ff fef2 	bl	8005abc <_printf_common>
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d147      	bne.n	8005d6c <_printf_i+0x1d0>
 8005cdc:	2001      	movs	r0, #1
 8005cde:	4240      	negs	r0, r0
 8005ce0:	b00b      	add	sp, #44	; 0x2c
 8005ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	6809      	ldr	r1, [r1, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	6022      	str	r2, [r4, #0]
 8005cec:	2278      	movs	r2, #120	; 0x78
 8005cee:	4932      	ldr	r1, [pc, #200]	; (8005db8 <_printf_i+0x21c>)
 8005cf0:	9103      	str	r1, [sp, #12]
 8005cf2:	0021      	movs	r1, r4
 8005cf4:	3145      	adds	r1, #69	; 0x45
 8005cf6:	700a      	strb	r2, [r1, #0]
 8005cf8:	6819      	ldr	r1, [r3, #0]
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	c920      	ldmia	r1!, {r5}
 8005cfe:	0610      	lsls	r0, r2, #24
 8005d00:	d402      	bmi.n	8005d08 <_printf_i+0x16c>
 8005d02:	0650      	lsls	r0, r2, #25
 8005d04:	d500      	bpl.n	8005d08 <_printf_i+0x16c>
 8005d06:	b2ad      	uxth	r5, r5
 8005d08:	6019      	str	r1, [r3, #0]
 8005d0a:	07d3      	lsls	r3, r2, #31
 8005d0c:	d502      	bpl.n	8005d14 <_printf_i+0x178>
 8005d0e:	2320      	movs	r3, #32
 8005d10:	4313      	orrs	r3, r2
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	2710      	movs	r7, #16
 8005d16:	2d00      	cmp	r5, #0
 8005d18:	d1a9      	bne.n	8005c6e <_printf_i+0xd2>
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	4393      	bics	r3, r2
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	e7a4      	b.n	8005c6e <_printf_i+0xd2>
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	680d      	ldr	r5, [r1, #0]
 8005d28:	1d10      	adds	r0, r2, #4
 8005d2a:	6949      	ldr	r1, [r1, #20]
 8005d2c:	6018      	str	r0, [r3, #0]
 8005d2e:	6813      	ldr	r3, [r2, #0]
 8005d30:	062e      	lsls	r6, r5, #24
 8005d32:	d501      	bpl.n	8005d38 <_printf_i+0x19c>
 8005d34:	6019      	str	r1, [r3, #0]
 8005d36:	e002      	b.n	8005d3e <_printf_i+0x1a2>
 8005d38:	066d      	lsls	r5, r5, #25
 8005d3a:	d5fb      	bpl.n	8005d34 <_printf_i+0x198>
 8005d3c:	8019      	strh	r1, [r3, #0]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9e04      	ldr	r6, [sp, #16]
 8005d42:	6123      	str	r3, [r4, #16]
 8005d44:	e7c0      	b.n	8005cc8 <_printf_i+0x12c>
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	1d11      	adds	r1, r2, #4
 8005d4a:	6019      	str	r1, [r3, #0]
 8005d4c:	6816      	ldr	r6, [r2, #0]
 8005d4e:	2100      	movs	r1, #0
 8005d50:	0030      	movs	r0, r6
 8005d52:	6862      	ldr	r2, [r4, #4]
 8005d54:	f000 f858 	bl	8005e08 <memchr>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d001      	beq.n	8005d60 <_printf_i+0x1c4>
 8005d5c:	1b80      	subs	r0, r0, r6
 8005d5e:	6060      	str	r0, [r4, #4]
 8005d60:	6863      	ldr	r3, [r4, #4]
 8005d62:	6123      	str	r3, [r4, #16]
 8005d64:	2300      	movs	r3, #0
 8005d66:	9a04      	ldr	r2, [sp, #16]
 8005d68:	7013      	strb	r3, [r2, #0]
 8005d6a:	e7ad      	b.n	8005cc8 <_printf_i+0x12c>
 8005d6c:	0032      	movs	r2, r6
 8005d6e:	6923      	ldr	r3, [r4, #16]
 8005d70:	9906      	ldr	r1, [sp, #24]
 8005d72:	9805      	ldr	r0, [sp, #20]
 8005d74:	9d07      	ldr	r5, [sp, #28]
 8005d76:	47a8      	blx	r5
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d0af      	beq.n	8005cdc <_printf_i+0x140>
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	079b      	lsls	r3, r3, #30
 8005d80:	d415      	bmi.n	8005dae <_printf_i+0x212>
 8005d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d84:	68e0      	ldr	r0, [r4, #12]
 8005d86:	4298      	cmp	r0, r3
 8005d88:	daaa      	bge.n	8005ce0 <_printf_i+0x144>
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	e7a8      	b.n	8005ce0 <_printf_i+0x144>
 8005d8e:	0022      	movs	r2, r4
 8005d90:	2301      	movs	r3, #1
 8005d92:	9906      	ldr	r1, [sp, #24]
 8005d94:	9805      	ldr	r0, [sp, #20]
 8005d96:	9e07      	ldr	r6, [sp, #28]
 8005d98:	3219      	adds	r2, #25
 8005d9a:	47b0      	blx	r6
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d09d      	beq.n	8005cdc <_printf_i+0x140>
 8005da0:	3501      	adds	r5, #1
 8005da2:	68e3      	ldr	r3, [r4, #12]
 8005da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	42ab      	cmp	r3, r5
 8005daa:	dcf0      	bgt.n	8005d8e <_printf_i+0x1f2>
 8005dac:	e7e9      	b.n	8005d82 <_printf_i+0x1e6>
 8005dae:	2500      	movs	r5, #0
 8005db0:	e7f7      	b.n	8005da2 <_printf_i+0x206>
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	08006121 	.word	0x08006121
 8005db8:	08006132 	.word	0x08006132

08005dbc <memmove>:
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	4288      	cmp	r0, r1
 8005dc0:	d902      	bls.n	8005dc8 <memmove+0xc>
 8005dc2:	188b      	adds	r3, r1, r2
 8005dc4:	4298      	cmp	r0, r3
 8005dc6:	d303      	bcc.n	8005dd0 <memmove+0x14>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e007      	b.n	8005ddc <memmove+0x20>
 8005dcc:	5c8b      	ldrb	r3, [r1, r2]
 8005dce:	5483      	strb	r3, [r0, r2]
 8005dd0:	3a01      	subs	r2, #1
 8005dd2:	d2fb      	bcs.n	8005dcc <memmove+0x10>
 8005dd4:	bd10      	pop	{r4, pc}
 8005dd6:	5ccc      	ldrb	r4, [r1, r3]
 8005dd8:	54c4      	strb	r4, [r0, r3]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d1fa      	bne.n	8005dd6 <memmove+0x1a>
 8005de0:	e7f8      	b.n	8005dd4 <memmove+0x18>
	...

08005de4 <_sbrk_r>:
 8005de4:	2300      	movs	r3, #0
 8005de6:	b570      	push	{r4, r5, r6, lr}
 8005de8:	4d06      	ldr	r5, [pc, #24]	; (8005e04 <_sbrk_r+0x20>)
 8005dea:	0004      	movs	r4, r0
 8005dec:	0008      	movs	r0, r1
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	f7fa fd04 	bl	80007fc <_sbrk>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d103      	bne.n	8005e00 <_sbrk_r+0x1c>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d000      	beq.n	8005e00 <_sbrk_r+0x1c>
 8005dfe:	6023      	str	r3, [r4, #0]
 8005e00:	bd70      	pop	{r4, r5, r6, pc}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	20000bd0 	.word	0x20000bd0

08005e08 <memchr>:
 8005e08:	b2c9      	uxtb	r1, r1
 8005e0a:	1882      	adds	r2, r0, r2
 8005e0c:	4290      	cmp	r0, r2
 8005e0e:	d101      	bne.n	8005e14 <memchr+0xc>
 8005e10:	2000      	movs	r0, #0
 8005e12:	4770      	bx	lr
 8005e14:	7803      	ldrb	r3, [r0, #0]
 8005e16:	428b      	cmp	r3, r1
 8005e18:	d0fb      	beq.n	8005e12 <memchr+0xa>
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	e7f6      	b.n	8005e0c <memchr+0x4>

08005e1e <memcpy>:
 8005e1e:	2300      	movs	r3, #0
 8005e20:	b510      	push	{r4, lr}
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d100      	bne.n	8005e28 <memcpy+0xa>
 8005e26:	bd10      	pop	{r4, pc}
 8005e28:	5ccc      	ldrb	r4, [r1, r3]
 8005e2a:	54c4      	strb	r4, [r0, r3]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	e7f8      	b.n	8005e22 <memcpy+0x4>

08005e30 <_realloc_r>:
 8005e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e32:	0007      	movs	r7, r0
 8005e34:	000e      	movs	r6, r1
 8005e36:	0014      	movs	r4, r2
 8005e38:	2900      	cmp	r1, #0
 8005e3a:	d105      	bne.n	8005e48 <_realloc_r+0x18>
 8005e3c:	0011      	movs	r1, r2
 8005e3e:	f7ff fc49 	bl	80056d4 <_malloc_r>
 8005e42:	0005      	movs	r5, r0
 8005e44:	0028      	movs	r0, r5
 8005e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e48:	2a00      	cmp	r2, #0
 8005e4a:	d103      	bne.n	8005e54 <_realloc_r+0x24>
 8005e4c:	f7ff fbd6 	bl	80055fc <_free_r>
 8005e50:	0025      	movs	r5, r4
 8005e52:	e7f7      	b.n	8005e44 <_realloc_r+0x14>
 8005e54:	f000 f81b 	bl	8005e8e <_malloc_usable_size_r>
 8005e58:	9001      	str	r0, [sp, #4]
 8005e5a:	4284      	cmp	r4, r0
 8005e5c:	d803      	bhi.n	8005e66 <_realloc_r+0x36>
 8005e5e:	0035      	movs	r5, r6
 8005e60:	0843      	lsrs	r3, r0, #1
 8005e62:	42a3      	cmp	r3, r4
 8005e64:	d3ee      	bcc.n	8005e44 <_realloc_r+0x14>
 8005e66:	0021      	movs	r1, r4
 8005e68:	0038      	movs	r0, r7
 8005e6a:	f7ff fc33 	bl	80056d4 <_malloc_r>
 8005e6e:	1e05      	subs	r5, r0, #0
 8005e70:	d0e8      	beq.n	8005e44 <_realloc_r+0x14>
 8005e72:	9b01      	ldr	r3, [sp, #4]
 8005e74:	0022      	movs	r2, r4
 8005e76:	429c      	cmp	r4, r3
 8005e78:	d900      	bls.n	8005e7c <_realloc_r+0x4c>
 8005e7a:	001a      	movs	r2, r3
 8005e7c:	0031      	movs	r1, r6
 8005e7e:	0028      	movs	r0, r5
 8005e80:	f7ff ffcd 	bl	8005e1e <memcpy>
 8005e84:	0031      	movs	r1, r6
 8005e86:	0038      	movs	r0, r7
 8005e88:	f7ff fbb8 	bl	80055fc <_free_r>
 8005e8c:	e7da      	b.n	8005e44 <_realloc_r+0x14>

08005e8e <_malloc_usable_size_r>:
 8005e8e:	1f0b      	subs	r3, r1, #4
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	1f18      	subs	r0, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	da01      	bge.n	8005e9c <_malloc_usable_size_r+0xe>
 8005e98:	580b      	ldr	r3, [r1, r0]
 8005e9a:	18c0      	adds	r0, r0, r3
 8005e9c:	4770      	bx	lr
	...

08005ea0 <_init>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr

08005eac <_fini>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb2:	bc08      	pop	{r3}
 8005eb4:	469e      	mov	lr, r3
 8005eb6:	4770      	bx	lr
